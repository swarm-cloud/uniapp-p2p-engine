// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DCloudUniappRuntime
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import CoreGraphics
import DCloudUTSFoundation
@_exported import DCloudUniappRuntime
import DeveloperToolsSupport
import Dispatch
import Foundation
import JavaScriptCore
import MobileCoreServices
import QuartzCore
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import zlib
public protocol ParameterEncoder {
  func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
}
open class JSONParameterEncoder : DCloudUniappRuntime.ParameterEncoder {
  public static var `default`: DCloudUniappRuntime.JSONParameterEncoder {
    get
  }
  public static var prettyPrinted: DCloudUniappRuntime.JSONParameterEncoder {
    get
  }
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  public static var sortedKeys: DCloudUniappRuntime.JSONParameterEncoder {
    get
  }
  final public let encoder: Foundation.JSONEncoder
  public init(encoder: Foundation.JSONEncoder = JSONEncoder())
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension DCloudUniappRuntime.ParameterEncoder where Self == DCloudUniappRuntime.JSONParameterEncoder {
  public static var json: DCloudUniappRuntime.JSONParameterEncoder {
    get
  }
  public static func json(encoder: Foundation.JSONEncoder = JSONEncoder()) -> DCloudUniappRuntime.JSONParameterEncoder
}
open class URLEncodedFormParameterEncoder : DCloudUniappRuntime.ParameterEncoder {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination, b: DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: DCloudUniappRuntime.URLEncodedFormParameterEncoder {
    get
  }
  final public let encoder: DCloudUniappRuntime.URLEncodedFormEncoder
  final public let destination: DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination
  public init(encoder: DCloudUniappRuntime.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination = .methodDependent)
  open func encode<Parameters>(_ parameters: Parameters?, into request: Foundation.URLRequest) throws -> Foundation.URLRequest where Parameters : Swift.Encodable
  @objc deinit
}
extension DCloudUniappRuntime.ParameterEncoder where Self == DCloudUniappRuntime.URLEncodedFormParameterEncoder {
  public static var urlEncodedForm: DCloudUniappRuntime.URLEncodedFormParameterEncoder {
    get
  }
  public static func urlEncodedForm(encoder: DCloudUniappRuntime.URLEncodedFormEncoder = URLEncodedFormEncoder(), destination: DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination = .methodDependent) -> DCloudUniappRuntime.URLEncodedFormParameterEncoder
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniIQToolbarPlaceholderConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var showPlaceholder: Swift.Bool
  @objc @_Concurrency.MainActor final public var font: UIKit.UIFont?
  @objc @_Concurrency.MainActor final public var color: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var buttonColor: UIKit.UIColor?
  @_Concurrency.MainActor @objc override final public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : DCloudUniappRuntime.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : DCloudUniappRuntime.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : DCloudUniappRuntime.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension DCloudUniappRuntime.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : DCloudUniappRuntime.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod, headers: DCloudUniappRuntime.HTTPHeaders? = nil) throws
}
@_hasMissingDesignatedInitializers public class UniImageLoadEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var width: Swift.Float
    public var height: Swift.Float
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniImageLoadEvent.Detail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniImageErrorEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var errMsg: Swift.String
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniImageErrorEvent.Detail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniPageManagerImpl : DCloudUniappRuntime.UniPageManager {
  @objc deinit
  public func createPage(_ pageUrl: Swift.String, _ pageId: Swift.String, _ pageStyle: Swift.Dictionary<Swift.String, Any?>) -> any DCloudUniappRuntime.UniPage
  public func findPageById(_ pageId: Swift.String) -> (any DCloudUniappRuntime.UniPage)?
}
extension DCloudUniappRuntime.UniPageImpl {
  public func show(_ options: Swift.Dictionary<Swift.String, Any>?, _ function: @escaping () -> Swift.Void)
  public func hide(_ options: Swift.Dictionary<Swift.String, Any>?, _ function: @escaping () -> Swift.Void)
  public func close(_ options: Swift.Dictionary<Swift.String, Any>?, _ function: @escaping () -> Swift.Void)
}
public typealias UTSSize = CoreFoundation.CGSize
public typealias UTSWatchActionBlock = (Any, Any) -> Swift.Void
public typealias UTSComponentCallback = (_ result: Any, _ keepAlive: Swift.Bool) -> Swift.Void
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UTSComponent<T> : DCloudUniappRuntime.UniComponent, DCloudUTSFoundation.UTSObject where T : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) required public init(domNode: DCloudUniappRuntime.UniElementImpl)
  @_Concurrency.MainActor(unsafe) public var __$$el: T {
    get
  }
  @_Concurrency.MainActor(unsafe) open func __$$init()
  @_Concurrency.MainActor(unsafe) open func created()
  @_Concurrency.MainActor(unsafe) override public func measure(constrainedSize: CoreFoundation.CGSize, widthMode: DCloudUniappRuntime.UniFlexMeasureMode, heightMode: DCloudUniappRuntime.UniFlexMeasureMode) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) open func NVMeasure(size: DCloudUniappRuntime.UTSSize) -> DCloudUniappRuntime.UTSSize
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillLoad()
  @_Concurrency.MainActor(unsafe) open func NVBeforeLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView() -> UIKit.UIView
  @_Concurrency.MainActor(unsafe) open func NVLoad() -> T
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) open func NVLoaded()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutDidFinish()
  @_Concurrency.MainActor(unsafe) open func NVLayouted()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewWillUnload()
  @_Concurrency.MainActor(unsafe) open func NVBeforeUnload()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidUnload()
  @_Concurrency.MainActor(unsafe) open func NVUnloaded()
  @objc deinit
  @_Concurrency.MainActor(unsafe) open func unmounted()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateAttributes(_ attributes: [Swift.String : Any] = [:])
  @_Concurrency.MainActor(unsafe) public func fireEvent(_ name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func __$$emit(_ name: Swift.String)
  @_Concurrency.MainActor(unsafe) public func __$$emit(_ name: Swift.String, _ data: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) public func forceUpdate()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func updateStyles(_ styles: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) open func NVUpdateStyles(_ styles: [Swift.String : Any])
  @_Concurrency.MainActor(unsafe) open func __$$watch(_ name: Swift.String, _ action: @escaping DCloudUniappRuntime.UTSWatchActionBlock)
  @_Concurrency.MainActor(unsafe) open func __$$watch(_ name: Swift.String, _ action: @escaping DCloudUniappRuntime.UTSWatchActionBlock, _ options: [Swift.String : Any]?)
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
}
public struct HTTPMethod : Swift.RawRepresentable, Swift.Equatable, Swift.Hashable {
  public static let connect: DCloudUniappRuntime.HTTPMethod
  public static let delete: DCloudUniappRuntime.HTTPMethod
  public static let get: DCloudUniappRuntime.HTTPMethod
  public static let head: DCloudUniappRuntime.HTTPMethod
  public static let options: DCloudUniappRuntime.HTTPMethod
  public static let patch: DCloudUniappRuntime.HTTPMethod
  public static let post: DCloudUniappRuntime.HTTPMethod
  public static let put: DCloudUniappRuntime.HTTPMethod
  public static let query: DCloudUniappRuntime.HTTPMethod
  public static let trace: DCloudUniappRuntime.HTTPMethod
  public let rawValue: Swift.String
  public init(rawValue: Swift.String)
  public typealias RawValue = Swift.String
}
public typealias AFDataResponse<Success> = DCloudUniappRuntime.DataResponse<Success, DCloudUniappRuntime.AFError>
public typealias AFDownloadResponse<Success> = DCloudUniappRuntime.DownloadResponse<Success, DCloudUniappRuntime.AFError>
public struct DataResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension DCloudUniappRuntime.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DCloudUniappRuntime.DataResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> DCloudUniappRuntime.DataResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> DCloudUniappRuntime.DataResponse<NewSuccess, any Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> DCloudUniappRuntime.DataResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> DCloudUniappRuntime.DataResponse<Success, any Swift.Error> where NewFailure : Swift.Error
}
public struct DownloadResponse<Success, Failure> where Failure : Swift.Error {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let fileURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let metrics: Foundation.URLSessionTaskMetrics?
  public let serializationDuration: Foundation.TimeInterval
  public let result: Swift.Result<Success, Failure>
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, resumeData: Foundation.Data?, metrics: Foundation.URLSessionTaskMetrics?, serializationDuration: Foundation.TimeInterval, result: Swift.Result<Success, Failure>)
}
extension DCloudUniappRuntime.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension DCloudUniappRuntime.DownloadResponse {
  public func map<NewSuccess>(_ transform: (Success) -> NewSuccess) -> DCloudUniappRuntime.DownloadResponse<NewSuccess, Failure>
  public func tryMap<NewSuccess>(_ transform: (Success) throws -> NewSuccess) -> DCloudUniappRuntime.DownloadResponse<NewSuccess, any Swift.Error>
  public func mapError<NewFailure>(_ transform: (Failure) -> NewFailure) -> DCloudUniappRuntime.DownloadResponse<Success, NewFailure> where NewFailure : Swift.Error
  public func tryMapError<NewFailure>(_ transform: (Failure) throws -> NewFailure) -> DCloudUniappRuntime.DownloadResponse<Success, any Swift.Error> where NewFailure : Swift.Error
}
public enum UniFlexMeasureMode : Swift.Int32 {
  case Undefined, Exactly, AtMost
  public init?(rawValue: Swift.Int32)
  public typealias RawValue = Swift.Int32
  public var rawValue: Swift.Int32 {
    get
  }
}
extension DCloudUniappRuntime.Request {
  public static let didResumeNotification: Foundation.Notification.Name
  public static let didSuspendNotification: Foundation.Notification.Name
  public static let didCancelNotification: Foundation.Notification.Name
  public static let didFinishNotification: Foundation.Notification.Name
  public static let didResumeTaskNotification: Foundation.Notification.Name
  public static let didSuspendTaskNotification: Foundation.Notification.Name
  public static let didCancelTaskNotification: Foundation.Notification.Name
  public static let didCompleteTaskNotification: Foundation.Notification.Name
}
extension Foundation.Notification {
  public var request: DCloudUniappRuntime.Request? {
    get
  }
}
@_hasMissingDesignatedInitializers final public class AlamofireNotifications : DCloudUniappRuntime.EventMonitor {
  final public func requestDidResume(_ request: DCloudUniappRuntime.Request)
  final public func requestDidSuspend(_ request: DCloudUniappRuntime.Request)
  final public func requestDidCancel(_ request: DCloudUniappRuntime.Request)
  final public func requestDidFinish(_ request: DCloudUniappRuntime.Request)
  final public func request(_ request: DCloudUniappRuntime.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func request(_ request: DCloudUniappRuntime.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func request(_ request: DCloudUniappRuntime.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: DCloudUniappRuntime.Request, didCompleteTask task: Foundation.URLSessionTask, with error: DCloudUniappRuntime.AFError?)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.toolbar")
  @_Concurrency.MainActor dynamic public var keyboardToolbar: DCloudUniappRuntime.UniIQToolbar {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.hidePlaceholder")
  @_Concurrency.MainActor dynamic public var shouldHideToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.placeholder")
  @_Concurrency.MainActor dynamic public var toolbarPlaceholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.drawingPlaceholder")
  @_Concurrency.MainActor dynamic public var drawingToolbarPlaceholder: Swift.String? {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.addToolbar(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addKeyboardToolbarWithTarget(target: Swift.AnyObject?, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil, rightBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?, previousBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, nextBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil)
  @objc @available(*, unavailable, renamed: "iq.addDone(target:action:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addDone(target:action:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithImage(_ image: UIKit.UIImage, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightButton(target:configuration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightButtonOnKeyboardWithText(_ text: Swift.String, target: Swift.AnyObject?, action: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addCancelDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, cancelAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonTitle: Swift.String, rightButtonTitle: Swift.String, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addRightLeft(target:rightConfiguration:leftConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addRightLeftOnKeyboardWithTarget(_ target: Swift.AnyObject?, leftButtonImage: UIKit.UIImage, rightButtonImage: UIKit.UIImage, leftButtonAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextDone(target:previousAction:nextAction:doneAction:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextDone(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextDone(target:previousAction:nextAction:doneAction:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextDoneOnKeyboardWithTarget(_ target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:showPlaceholder:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, shouldShowPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonImage: UIKit.UIImage, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @objc @available(*, unavailable, renamed: "iq.addPreviousNextRight(target:previousConfiguration:nextConfiguration:rightConfiguration:title:titleAccessibilityLabel:)")
  @_Concurrency.MainActor dynamic public func addPreviousNextRightOnKeyboardWithTarget(_ target: Swift.AnyObject?, rightButtonTitle: Swift.String, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, rightButtonAction: ObjectiveC.Selector, titleText: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniIQInvocation : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor weak final public var target: Swift.AnyObject?
  @objc @_Concurrency.MainActor final public var action: ObjectiveC.Selector
  @objc @_Concurrency.MainActor public init(_ target: Swift.AnyObject, _ action: ObjectiveC.Selector)
  @objc @_Concurrency.MainActor final public func invoke(from: Any)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UIView : DCloudUniappRuntime.UniKeyboardManagerCompatible {
  @_Concurrency.MainActor(unsafe) public static let defaultKeyboardDistance: CoreFoundation.CGFloat
  public typealias Base = UIKit.UIView
}
@available(iOSApplicationExtension, unavailable)
@available(*, unavailable, renamed: "UIView.defaultKeyboardDistance")
public let kIQUseDefaultKeyboardDistance: CoreFoundation.CGFloat
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension DCloudUniappRuntime.UniKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public var distanceFromKeyboard: CoreFoundation.CGFloat {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var ignoreSwitchingByNextPrevious: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var enableMode: DCloudUniappRuntime.UniIQEnableMode {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var resignOnTouchOutsideMode: DCloudUniappRuntime.UniIQEnableMode {
    get
    set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.distanceFromKeyboard")
  @_Concurrency.MainActor(unsafe) dynamic public var keyboardDistanceFromTextField: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.ignoreSwitchingByNextPrevious")
  @_Concurrency.MainActor(unsafe) dynamic public var ignoreSwitchingByNextPrevious: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.enableMode")
  @_Concurrency.MainActor(unsafe) dynamic public var enableMode: DCloudUniappRuntime.UniIQEnableMode {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.resignOnTouchOutsideMode")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldResignOnTouchOutsideMode: DCloudUniappRuntime.UniIQEnableMode {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class UniIQToolbar : UIKit.UIToolbar, UIKit.UIInputViewAudioFeedback {
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor open var additionalLeadingItems: [UIKit.UIBarButtonItem]
  @_Concurrency.MainActor open var additionalTrailingItems: [UIKit.UIBarButtonItem]
  @objc @_Concurrency.MainActor open var previousBarButton: DCloudUniappRuntime.UniIQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var nextBarButton: DCloudUniappRuntime.UniIQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var titleBarButton: DCloudUniappRuntime.UniIQTitleBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var doneBarButton: DCloudUniappRuntime.UniIQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @objc @_Concurrency.MainActor open var fixedSpaceBarButton: DCloudUniappRuntime.UniIQBarButtonItem {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor @objc override dynamic open func sizeThatFits(_ size: CoreFoundation.CGSize) -> CoreFoundation.CGSize
  @_Concurrency.MainActor @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc open var enableInputClicksWhenVisible: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public protocol UniElement {
  var classList: [Swift.String] { get set }
  var firstChild: (any DCloudUniappRuntime.UniElement)? { get }
  var lastChild: (any DCloudUniappRuntime.UniElement)? { get }
  var parentNode: (any DCloudUniappRuntime.UniElement)? { get }
  var parentElement: (any DCloudUniappRuntime.UniElement)? { get }
  var previousSibling: (any DCloudUniappRuntime.UniElement)? { get }
  var nextSibling: (any DCloudUniappRuntime.UniElement)? { get }
  var nextElementSibling: (any DCloudUniappRuntime.UniElement)? { get }
  var children: [any DCloudUniappRuntime.UniElement] { get }
  var childNodes: [any DCloudUniappRuntime.UniElement] { get }
  var tagName: Swift.String { get }
  var nodeName: Swift.String? { get }
  var dataset: Swift.Dictionary<Swift.String, Any?> { get }
  var attributes: Swift.Dictionary<Swift.String, Any> { get }
  var style: DCloudUniappRuntime.CSSStyleDeclaration { get }
  var scrollWidth: Foundation.NSNumber { get }
  var scrollHeight: Foundation.NSNumber { get }
  var scrollLeft: Foundation.NSNumber { get set }
  var scrollTop: Foundation.NSNumber { get set }
  var offsetLeft: Foundation.NSNumber { get }
  var offsetTop: Foundation.NSNumber { get }
  var offsetWidth: Foundation.NSNumber { get }
  var offsetHeight: Foundation.NSNumber { get }
  var ext: Swift.Dictionary<Swift.String, Any?> { get }
  func getNodeId() -> Swift.String
  func takeSnapshot(_ options: DCloudUniappRuntime.TakeSnapshotOptions)
  func appendChild(_ aChild: any DCloudUniappRuntime.UniElement)
  func insertBefore(_ newChild: any DCloudUniappRuntime.UniElement, _ refChild: (any DCloudUniappRuntime.UniElement)?) -> (any DCloudUniappRuntime.UniElement)?
  func insertBefore(_ newChild: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  func setAttribute(_ key: Swift.String, _ value: Swift.String)
  func setAnyAttribute(_ key: Swift.String, _ value: Any)
  func getAttribute(_ key: Swift.String) -> Swift.String?
  func getAnyAttribute(_ key: Swift.String) -> Any?
  func hasAttribute(_ key: Swift.String) -> Swift.Bool
  func removeAttribute(_ key: Swift.String)
  func updateStyle(_ map: Swift.Dictionary<Swift.String, Any>)
  func getBoundingClientRect() -> DCloudUniappRuntime.DOMRect
  func getDrawableContext() -> (any DCloudUniappRuntime.DrawableContext)?
  func addEventListener<T, R>(_ type: Swift.String, _ callback: @escaping (_ event: T) -> R) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  func removeEventListener(_ type: Swift.String, _ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  func removeChild(_ aChild: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  func remove()
  func dispatchEvent(_ type: Swift.String, _ value: DCloudUniappRuntime.UniEvent)
  func scrollTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  func scrollBy(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  func querySelector(_ selector: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  func querySelectorAll(_ selector: Swift.String) -> [any DCloudUniappRuntime.UniElement]?
  func focus()
  func blur()
}
@objc public protocol UniTabsElement : JavaScriptCore.JSExport {
  @objc func appendItem(_ pageId: Swift.String)
  @objc func createTabBar(_ style: Swift.Dictionary<Swift.String, Any>)
  @objc func switchSelect(_ pageId: Swift.String, _ index: Foundation.NSNumber)
  @objc func hideTabBar(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func showTabBar(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func setTabBarBadge(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func removeTabBarBadge(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func showTabBarRedDot(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func hideTabBarRedDot(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func setTabBarStyle(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func setTabBarItem(_ op: Swift.Dictionary<Swift.String, Any>)
  @objc func getTabBarHeight() -> Foundation.NSNumber
  @objc var isTabBarVisible: Swift.Bool { get }
  @objc var currentItemId: Swift.String? { get }
}
@objc public protocol UniWebViewElement : JavaScriptCore.JSExport {
  @objc func back()
  @objc func forward()
  @objc func reload()
  @objc func stop()
  @objc func evalJS(_ js: Swift.String)
}
public protocol UniCommentElement : DCloudUniappRuntime.UniElement {
  var text: Swift.String { get set }
}
@objc public protocol UniButtonElement : JavaScriptCore.JSExport {
  @objc func click()
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor dynamic open func iq_parentContainerViewController() -> UIKit.UIViewController?
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIViewController {
  @objc @available(*, unavailable, renamed: "iq_parentContainerViewController()")
  @_Concurrency.MainActor(unsafe) dynamic open func parentIQContainerViewController() -> UIKit.UIViewController?
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.Request {
  #if compiler(>=5.3) && $RethrowsProtocol
  public func uploadProgress(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func downloadProgress(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.Progress>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.Progress>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlRequests(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.URLRequest>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.URLRequest>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func urlSessionTasks(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.URLSessionTask>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.URLSessionTask>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func cURLDescriptions(bufferingPolicy: DCloudUniappRuntime.StreamOf<Swift.String>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Swift.String>
  #endif
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, DCloudUniappRuntime.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.DataRequest {
  #if compiler(>=5.3) && $RethrowsProtocol
  public func httpResponses(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.HTTPURLResponse>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.HTTPURLResponse>
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  @_disfavoredOverload public func onHTTPResponse(perform handler: @escaping @Sendable (_ response: Foundation.HTTPURLResponse) async -> DCloudUniappRuntime.Request.ResponseDisposition) -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  public func onHTTPResponse(perform handler: @escaping @Sendable (_ response: Foundation.HTTPURLResponse) async -> Swift.Void) -> Self
  #endif
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataTask<Value> where Value : Swift.Decodable
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataTask<Swift.String>
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> DCloudUniappRuntime.DataTask<Serializer.SerializedObject> where Serializer : DCloudUniappRuntime.ResponseSerializer
  public func serializingResponse<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> DCloudUniappRuntime.DataTask<Serializer.SerializedObject> where Serializer : DCloudUniappRuntime.DataResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DownloadTask<Value> {
  #if compiler(>=5.3) && $EffectfulProp
  public var response: DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var result: Swift.Result<Value, DCloudUniappRuntime.AFError> {
    get async
  }
  #endif
  #if compiler(>=5.3) && $EffectfulProp
  public var value: Value {
    get async throws
  }
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.DownloadRequest {
  public func serializingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadTask<Foundation.Data>
  public func serializingDecodable<Value>(_ type: Value.Type = Value.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<Value>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<Value>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<Value>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadTask<Value> where Value : Swift.Decodable
  public func serializingDownloadedFileURL(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> DCloudUniappRuntime.DownloadTask<Foundation.URL>
  public func serializingString(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadTask<Swift.String>
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> DCloudUniappRuntime.DownloadTask<Serializer.SerializedObject> where Serializer : DCloudUniappRuntime.ResponseSerializer
  public func serializingDownload<Serializer>(using serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true) -> DCloudUniappRuntime.DownloadTask<Serializer.SerializedObject> where Serializer : DCloudUniappRuntime.DownloadResponseSerializerProtocol
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DataStreamTask {
  #if compiler(>=5.3) && $RethrowsProtocol
  public typealias Stream<Success, Failure> = DCloudUniappRuntime.StreamOf<DCloudUniappRuntime.DataStreamRequest.Stream<Success, Failure>> where Failure : Swift.Error
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingData(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: DCloudUniappRuntime.DataStreamTask.Stream<Foundation.Data, Swift.Never>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.DataStreamTask.Stream<Foundation.Data, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingStrings(automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: DCloudUniappRuntime.DataStreamTask.Stream<Swift.String, Swift.Never>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.DataStreamTask.Stream<Swift.String, Swift.Never>
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingDecodables<T>(_ type: T.Type = T.self, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: DCloudUniappRuntime.DataStreamTask.Stream<T, DCloudUniappRuntime.AFError>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.DataStreamTask.Stream<T, DCloudUniappRuntime.AFError> where T : Swift.Decodable
  #endif
  #if compiler(>=5.3) && $RethrowsProtocol
  public func streamingResponses<Serializer>(serializedUsing serializer: Serializer, automaticallyCancelling shouldAutomaticallyCancel: Swift.Bool = true, bufferingPolicy: DCloudUniappRuntime.DataStreamTask.Stream<Serializer.SerializedObject, DCloudUniappRuntime.AFError>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.DataStreamTask.Stream<Serializer.SerializedObject, DCloudUniappRuntime.AFError> where Serializer : DCloudUniappRuntime.DataStreamSerializer
  #endif
  public func cancel()
  public func resume()
  public func suspend()
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.DataStreamRequest {
  #if compiler(>=5.3) && $RethrowsProtocol
  final public func httpResponses(bufferingPolicy: DCloudUniappRuntime.StreamOf<Foundation.HTTPURLResponse>.BufferingPolicy = .unbounded) -> DCloudUniappRuntime.StreamOf<Foundation.HTTPURLResponse>
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  @_disfavoredOverload final public func onHTTPResponse(perform handler: @escaping @Sendable (Foundation.HTTPURLResponse) async -> DCloudUniappRuntime.Request.ResponseDisposition) -> Self
  #endif
  #if compiler(>=5.3) && $AsyncAwait && $Sendable
  @discardableResult
  final public func onHTTPResponse(perform handler: @escaping @Sendable (Foundation.HTTPURLResponse) async -> Swift.Void) -> Self
  #endif
  final public func streamTask() -> DCloudUniappRuntime.DataStreamTask
}
#if compiler(>=5.3) && $RethrowsProtocol
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct StreamOf<Element> : _Concurrency.AsyncSequence {
  public typealias AsyncIterator = DCloudUniappRuntime.StreamOf<Element>.Iterator
  public typealias BufferingPolicy = _Concurrency.AsyncStream<Element>.Continuation.BufferingPolicy
  public func makeAsyncIterator() -> DCloudUniappRuntime.StreamOf<Element>.Iterator
  public struct Iterator : _Concurrency.AsyncIteratorProtocol {
    #if compiler(>=5.3) && $AsyncAwait
    public mutating func next() async -> Element?
    #endif
  }
}
#endif
@_hasMissingDesignatedInitializers public class UniTextareaLineChangeEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class TextareaLineChangeEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniTextareaLineChangeEvent.TextareaLineChangeEventDetail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniInputEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class InputEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniInputEvent.InputEventDetail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniInputConfirmEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class InputConfirmEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniInputConfirmEvent.InputConfirmEventDetail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniInputKeyboardHeightChangeEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class InputKeyboardHeightChangeEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniInputKeyboardHeightChangeEvent.InputKeyboardHeightChangeEventDetail
  @objc deinit
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: any DCloudUniappRuntime.URLRequestConvertible, with parameters: DCloudUniappRuntime.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : DCloudUniappRuntime.ParameterEncoding {
  public enum Destination {
    case methodDependent
    case queryString
    case httpBody
    public static func == (a: DCloudUniappRuntime.URLEncoding.Destination, b: DCloudUniappRuntime.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    case custom((_ key: Swift.String, _ index: Swift.Int) -> Swift.String)
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: DCloudUniappRuntime.URLEncoding.BoolEncoding, b: DCloudUniappRuntime.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: DCloudUniappRuntime.URLEncoding {
    get
  }
  public static var queryString: DCloudUniappRuntime.URLEncoding {
    get
  }
  public static var httpBody: DCloudUniappRuntime.URLEncoding {
    get
  }
  public let destination: DCloudUniappRuntime.URLEncoding.Destination
  public let arrayEncoding: DCloudUniappRuntime.URLEncoding.ArrayEncoding
  public let boolEncoding: DCloudUniappRuntime.URLEncoding.BoolEncoding
  public init(destination: DCloudUniappRuntime.URLEncoding.Destination = .methodDependent, arrayEncoding: DCloudUniappRuntime.URLEncoding.ArrayEncoding = .brackets, boolEncoding: DCloudUniappRuntime.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: any DCloudUniappRuntime.URLRequestConvertible, with parameters: DCloudUniappRuntime.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : DCloudUniappRuntime.ParameterEncoding {
  public enum Error : Swift.Error {
    case invalidJSONObject
    public static func == (a: DCloudUniappRuntime.JSONEncoding.Error, b: DCloudUniappRuntime.JSONEncoding.Error) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: DCloudUniappRuntime.JSONEncoding {
    get
  }
  public static var prettyPrinted: DCloudUniappRuntime.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: any DCloudUniappRuntime.URLRequestConvertible, with parameters: DCloudUniappRuntime.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: any DCloudUniappRuntime.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
extension DCloudUniappRuntime.JSONEncoding.Error {
  public var localizedDescription: Swift.String {
    get
  }
}
public struct PullDownRefreshOptions {
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIImage {
  @objc public static let keyboardPreviousImage: UIKit.UIImage
  @objc public static let keyboardNextImage: UIKit.UIImage
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static func uni_setDeviceInterfaceOrientation(_ toOrientaiton: UIKit.UIInterfaceOrientation)
}
public protocol IUniContext {
  func getApp() -> DCloudUniappRuntime.UniAppImpl?
}
public protocol IPageContext {
  func getDomManager() -> DCloudUniappRuntime.UniDomManager
  func getUniContext() -> any DCloudUniappRuntime.IUniContext
  func getUniPageImpl() -> DCloudUniappRuntime.UniPageImpl
  func getUniPageManagerImpl() -> DCloudUniappRuntime.UniPageManagerImpl
}
@_hasMissingDesignatedInitializers public class UniAppImpl : DCloudUniappRuntime.UniApp {
  public var pageManager: any DCloudUniappRuntime.UniPageManager {
    get
  }
  public var appid: Swift.String {
    get
  }
  public var appConfig: any DCloudUniappRuntime.AppConfig
  public func getAppResource() -> DCloudUniappRuntime.UniAppResource
  public func attachTo(screen: UIKit.UIView)
  public func addEventListener(_ event: Swift.String, _ function: @escaping (DCloudUniappRuntime.UniAppEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  public func addEventListener(_ event: Swift.String, _ function: @escaping (DCloudUniappRuntime.UniAppEvent) -> Swift.Bool) -> DCloudUniappRuntime.UniCallbackWrapper
  public func removeEventListener(_ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  public func loadFontFace(_ options: DCloudUniappRuntime.NativeLoadFontFaceOptions)
  public func updateStatusBarStyle(_ style: Swift.String)
  public func onEvent(_ event: Swift.String)
  public func addEventListener<T>(_ event: Swift.String, _ callback: @escaping (T) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  public func removeEventListener(_ event: Swift.String, _ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  public func addKeyEventListener(_ event: Swift.String, _ callback: @escaping (DCloudUniappRuntime.UniKeyEvent) -> Swift.Bool)
  public func quit()
  public func getAppStartDuration() -> Foundation.NSNumber
  public func getRedirectInfo() -> Swift.Dictionary<Swift.String, Any?>
  @objc deinit
}
public struct HTTPHeaders {
  public init()
  public init(_ headers: [DCloudUniappRuntime.HTTPHeader])
  public init(_ dictionary: [Swift.String : Swift.String])
  public mutating func add(name: Swift.String, value: Swift.String)
  public mutating func add(_ header: DCloudUniappRuntime.HTTPHeader)
  public mutating func update(name: Swift.String, value: Swift.String)
  public mutating func update(_ header: DCloudUniappRuntime.HTTPHeader)
  public mutating func remove(name: Swift.String)
  public mutating func sort()
  public func sorted() -> DCloudUniappRuntime.HTTPHeaders
  public func value(for name: Swift.String) -> Swift.String?
  public subscript(name: Swift.String) -> Swift.String? {
    get
    set
  }
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
}
extension DCloudUniappRuntime.HTTPHeaders : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Swift.String)...)
  public typealias Key = Swift.String
  public typealias Value = Swift.String
}
extension DCloudUniappRuntime.HTTPHeaders : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: DCloudUniappRuntime.HTTPHeader...)
  public typealias ArrayLiteralElement = DCloudUniappRuntime.HTTPHeader
}
extension DCloudUniappRuntime.HTTPHeaders : Swift.Sequence {
  public func makeIterator() -> Swift.IndexingIterator<[DCloudUniappRuntime.HTTPHeader]>
}
extension DCloudUniappRuntime.HTTPHeaders : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public subscript(position: Swift.Int) -> DCloudUniappRuntime.HTTPHeader {
    get
  }
  public func index(after i: Swift.Int) -> Swift.Int
  public typealias Element = DCloudUniappRuntime.HTTPHeader
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<DCloudUniappRuntime.HTTPHeaders>
  public typealias Iterator = Swift.IndexingIterator<[DCloudUniappRuntime.HTTPHeader]>
  public typealias SubSequence = Swift.Slice<DCloudUniappRuntime.HTTPHeaders>
}
extension DCloudUniappRuntime.HTTPHeaders : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public struct HTTPHeader : Swift.Hashable {
  public let name: Swift.String
  public let value: Swift.String
  public init(name: Swift.String, value: Swift.String)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: DCloudUniappRuntime.HTTPHeader, b: DCloudUniappRuntime.HTTPHeader) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension DCloudUniappRuntime.HTTPHeader : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DCloudUniappRuntime.HTTPHeader {
  public static func accept(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func acceptCharset(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func acceptLanguage(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func acceptEncoding(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func authorization(username: Swift.String, password: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func authorization(bearerToken: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func authorization(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func contentDisposition(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func contentEncoding(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func contentType(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
  public static func userAgent(_ value: Swift.String) -> DCloudUniappRuntime.HTTPHeader
}
extension DCloudUniappRuntime.HTTPHeaders {
  public static let `default`: DCloudUniappRuntime.HTTPHeaders
}
extension DCloudUniappRuntime.HTTPHeader {
  public static let defaultAcceptEncoding: DCloudUniappRuntime.HTTPHeader
  public static let defaultAcceptLanguage: DCloudUniappRuntime.HTTPHeader
  public static let defaultUserAgent: DCloudUniappRuntime.HTTPHeader
}
extension Foundation.URLRequest {
  public var headers: DCloudUniappRuntime.HTTPHeaders {
    get
    set
  }
}
extension Foundation.HTTPURLResponse {
  public var headers: DCloudUniappRuntime.HTTPHeaders {
    get
  }
}
extension Foundation.URLSessionConfiguration {
  public var headers: DCloudUniappRuntime.HTTPHeaders {
    get
    set
  }
}
public enum AFError : Swift.Error {
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: any Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: any Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: any Swift.Error)
    case inputStreamReadFailed(error: any Swift.Error)
  }
  public struct UnexpectedInputStreamLength : Swift.Error {
    public var bytesExpected: Swift.UInt64
    public var bytesRead: Swift.UInt64
  }
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: any Swift.Error)
    case customEncodingFailed(error: any Swift.Error)
  }
  public enum ParameterEncoderFailureReason {
    public enum RequiredComponent {
      case url
      case httpMethod(rawValue: Swift.String)
    }
    case missingRequiredComponent(DCloudUniappRuntime.AFError.ParameterEncoderFailureReason.RequiredComponent)
    case encoderFailed(error: any Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
    case customValidationFailed(error: any Swift.Error)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: any Swift.Error)
    case decodingFailed(error: any Swift.Error)
    case customSerializationFailed(error: any Swift.Error)
    case invalidEmptyResponse(type: Swift.String)
  }
  public enum ServerTrustFailureReason {
    public struct Output {
      public let host: Swift.String
      public let trust: Security.SecTrust
      public let status: Darwin.OSStatus
      public let result: Security.SecTrustResultType
    }
    case noRequiredEvaluator(host: Swift.String)
    case noCertificatesFound
    case noPublicKeysFound
    case policyApplicationFailed(trust: Security.SecTrust, policy: Security.SecPolicy, status: Darwin.OSStatus)
    case settingAnchorCertificatesFailed(status: Darwin.OSStatus, certificates: [Security.SecCertificate])
    case revocationPolicyCreationFailed
    case trustEvaluationFailed(error: (any Swift.Error)?)
    case defaultEvaluationFailed(output: DCloudUniappRuntime.AFError.ServerTrustFailureReason.Output)
    case hostValidationFailed(output: DCloudUniappRuntime.AFError.ServerTrustFailureReason.Output)
    case revocationCheckFailed(output: DCloudUniappRuntime.AFError.ServerTrustFailureReason.Output, options: DCloudUniappRuntime.RevocationTrustEvaluator.Options)
    case certificatePinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedCertificates: [Security.SecCertificate], serverCertificates: [Security.SecCertificate])
    case publicKeyPinningFailed(host: Swift.String, trust: Security.SecTrust, pinnedKeys: [Security.SecKey], serverKeys: [Security.SecKey])
    case customEvaluationFailed(error: any Swift.Error)
  }
  public enum URLRequestValidationFailureReason {
    case bodyDataInGETRequest(Foundation.Data)
  }
  case createUploadableFailed(error: any Swift.Error)
  case createURLRequestFailed(error: any Swift.Error)
  case downloadedFileMoveFailed(error: any Swift.Error, source: Foundation.URL, destination: Foundation.URL)
  case explicitlyCancelled
  case invalidURL(url: any DCloudUniappRuntime.URLConvertible)
  case multipartEncodingFailed(reason: DCloudUniappRuntime.AFError.MultipartEncodingFailureReason)
  case parameterEncodingFailed(reason: DCloudUniappRuntime.AFError.ParameterEncodingFailureReason)
  case parameterEncoderFailed(reason: DCloudUniappRuntime.AFError.ParameterEncoderFailureReason)
  case requestAdaptationFailed(error: any Swift.Error)
  case requestRetryFailed(retryError: any Swift.Error, originalError: any Swift.Error)
  case responseValidationFailed(reason: DCloudUniappRuntime.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: DCloudUniappRuntime.AFError.ResponseSerializationFailureReason)
  case serverTrustEvaluationFailed(reason: DCloudUniappRuntime.AFError.ServerTrustFailureReason)
  case sessionDeinitialized
  case sessionInvalidated(error: (any Swift.Error)?)
  case sessionTaskFailed(error: any Swift.Error)
  case urlRequestValidationFailed(reason: DCloudUniappRuntime.AFError.URLRequestValidationFailureReason)
}
extension Swift.Error {
  public var asAFError: DCloudUniappRuntime.AFError? {
    get
  }
  public func asAFError(orFailWith message: @autoclosure () -> Swift.String, file: Swift.StaticString = #file, line: Swift.UInt = #line) -> DCloudUniappRuntime.AFError
}
extension DCloudUniappRuntime.AFError {
  public var isSessionDeinitializedError: Swift.Bool {
    get
  }
  public var isSessionInvalidatedError: Swift.Bool {
    get
  }
  public var isExplicitlyCancelledError: Swift.Bool {
    get
  }
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isParameterEncoderError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isRequestAdaptationError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
  public var isServerTrustEvaluationError: Swift.Bool {
    get
  }
  public var isRequestRetryError: Swift.Bool {
    get
  }
  public var isCreateUploadableError: Swift.Bool {
    get
  }
  public var isCreateURLRequestError: Swift.Bool {
    get
  }
  public var isDownloadedFileMoveError: Swift.Bool {
    get
  }
  public var isSessionTaskError: Swift.Bool {
    get
  }
}
extension DCloudUniappRuntime.AFError {
  public var urlConvertible: (any DCloudUniappRuntime.URLConvertible)? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: (any Swift.Error)? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
  public var sourceURL: Foundation.URL? {
    get
  }
  public var destinationURL: Foundation.URL? {
    get
  }
  public var downloadResumeData: Foundation.Data? {
    get
  }
}
extension DCloudUniappRuntime.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class UniIQTitleBarButtonItem : DCloudUniappRuntime.UniIQBarButtonItem {
  @objc @_Concurrency.MainActor open var titleFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open var titleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open var selectableTitleColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor convenience public init(title: Swift.String?)
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniEventHelper {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniRichTextItemClickEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class UniRichTextItemClickEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniRichTextItemClickEvent.UniRichTextItemClickEventDetail
  @objc deinit
}
extension Swift.String {
  public func toURL() -> Foundation.URL?
  public func toMD5() -> Swift.String
  public func isNumeric() -> Swift.Bool
  public static func replaceHTMLSpaces(_ inputString: Swift.String) -> Swift.String
}
public typealias UniStringAnyMap = Swift.Dictionary<Swift.String, Any>
public typealias UniStringAnyMapOption = DCloudUniappRuntime.UniStringAnyMap?
public typealias UniStringOptionAnyMap = Swift.Dictionary<Swift.String, Any?>
public typealias UniStringOptionAnyMapOption = DCloudUniappRuntime.UniStringOptionAnyMap?
public typealias UniMap = DCloudUniappRuntime.UniStringOptionAnyMap
@_inheritsConvenienceInitializers @IBDesignable @objc @_Concurrency.MainActor(unsafe) open class SevenSwitch : UIKit.UIControl {
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var on: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var activeColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var inactiveColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var onTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var borderColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var thumbTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var onThumbTintColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var shadowColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var isRounded: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var thumbImage: UIKit.UIImage! {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var onImage: UIKit.UIImage! {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) open var offImage: UIKit.UIImage! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var onLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) open var offLabel: UIKit.UILabel!
  @_Concurrency.MainActor(unsafe) @objc convenience dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor(unsafe) open func setOn(_ isOn: Swift.Bool, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func isOn() -> Swift.Bool
  @objc deinit
}
public protocol EventMonitor {
  var queue: Dispatch.DispatchQueue { get }
  func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  func request(_ request: DCloudUniappRuntime.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: DCloudUniappRuntime.Request, didFailToCreateURLRequestWithError error: DCloudUniappRuntime.AFError)
  func request(_ request: DCloudUniappRuntime.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  func request(_ request: DCloudUniappRuntime.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: DCloudUniappRuntime.AFError)
  func request(_ request: DCloudUniappRuntime.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  func request(_ request: DCloudUniappRuntime.Request, didCreateTask task: Foundation.URLSessionTask)
  func request(_ request: DCloudUniappRuntime.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  func request(_ request: DCloudUniappRuntime.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: DCloudUniappRuntime.AFError)
  func request(_ request: DCloudUniappRuntime.Request, didCompleteTask task: Foundation.URLSessionTask, with error: DCloudUniappRuntime.AFError?)
  func requestIsRetrying(_ request: DCloudUniappRuntime.Request)
  func requestDidFinish(_ request: DCloudUniappRuntime.Request)
  func requestDidResume(_ request: DCloudUniappRuntime.Request)
  func request(_ request: DCloudUniappRuntime.Request, didResumeTask task: Foundation.URLSessionTask)
  func requestDidSuspend(_ request: DCloudUniappRuntime.Request)
  func request(_ request: DCloudUniappRuntime.Request, didSuspendTask task: Foundation.URLSessionTask)
  func requestDidCancel(_ request: DCloudUniappRuntime.Request)
  func request(_ request: DCloudUniappRuntime.Request, didCancelTask task: Foundation.URLSessionTask)
  func request(_ request: DCloudUniappRuntime.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  func request(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Foundation.Data?, DCloudUniappRuntime.AFError>)
  func request<Value>(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError>)
  func request(_ request: DCloudUniappRuntime.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  func request<Value>(_ request: DCloudUniappRuntime.DataStreamRequest, didParseStream result: Swift.Result<Value, DCloudUniappRuntime.AFError>)
  func request(_ request: DCloudUniappRuntime.UploadRequest, didCreateUploadable uploadable: DCloudUniappRuntime.UploadRequest.Uploadable)
  func request(_ request: DCloudUniappRuntime.UploadRequest, didFailToCreateUploadableWithError error: DCloudUniappRuntime.AFError)
  func request(_ request: DCloudUniappRuntime.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  func request(_ request: DCloudUniappRuntime.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, DCloudUniappRuntime.AFError>)
  func request(_ request: DCloudUniappRuntime.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  func request(_ request: DCloudUniappRuntime.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  func request(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Foundation.URL?, DCloudUniappRuntime.AFError>)
  func request<Value>(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError>)
}
extension DCloudUniappRuntime.EventMonitor {
  public var queue: Dispatch.DispatchQueue {
    get
  }
  public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  public func request(_ request: DCloudUniappRuntime.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: DCloudUniappRuntime.Request, didFailToCreateURLRequestWithError error: DCloudUniappRuntime.AFError)
  public func request(_ request: DCloudUniappRuntime.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  public func request(_ request: DCloudUniappRuntime.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: DCloudUniappRuntime.AFError)
  public func request(_ request: DCloudUniappRuntime.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  public func request(_ request: DCloudUniappRuntime.Request, didCreateTask task: Foundation.URLSessionTask)
  public func request(_ request: DCloudUniappRuntime.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  public func request(_ request: DCloudUniappRuntime.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: DCloudUniappRuntime.AFError)
  public func request(_ request: DCloudUniappRuntime.Request, didCompleteTask task: Foundation.URLSessionTask, with error: DCloudUniappRuntime.AFError?)
  public func requestIsRetrying(_ request: DCloudUniappRuntime.Request)
  public func requestDidFinish(_ request: DCloudUniappRuntime.Request)
  public func requestDidResume(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didResumeTask task: Foundation.URLSessionTask)
  public func requestDidSuspend(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didSuspendTask task: Foundation.URLSessionTask)
  public func requestDidCancel(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didCancelTask task: Foundation.URLSessionTask)
  public func request(_ request: DCloudUniappRuntime.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  public func request(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Foundation.Data?, DCloudUniappRuntime.AFError>)
  public func request<Value>(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError>)
  public func request(_ request: DCloudUniappRuntime.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  public func request<Value>(_ request: DCloudUniappRuntime.DataStreamRequest, didParseStream result: Swift.Result<Value, DCloudUniappRuntime.AFError>)
  public func request(_ request: DCloudUniappRuntime.UploadRequest, didCreateUploadable uploadable: DCloudUniappRuntime.UploadRequest.Uploadable)
  public func request(_ request: DCloudUniappRuntime.UploadRequest, didFailToCreateUploadableWithError error: DCloudUniappRuntime.AFError)
  public func request(_ request: DCloudUniappRuntime.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  public func request(_ request: DCloudUniappRuntime.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, DCloudUniappRuntime.AFError>)
  public func request(_ request: DCloudUniappRuntime.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  public func request(_ request: DCloudUniappRuntime.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  public func request(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Foundation.URL?, DCloudUniappRuntime.AFError>)
  public func request<Value>(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError>)
}
@_hasMissingDesignatedInitializers final public class CompositeEventMonitor : DCloudUniappRuntime.EventMonitor {
  final public let queue: Dispatch.DispatchQueue
  final public func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  final public func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  final public func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  final public func request(_ request: DCloudUniappRuntime.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: DCloudUniappRuntime.Request, didFailToCreateURLRequestWithError error: DCloudUniappRuntime.AFError)
  final public func request(_ request: DCloudUniappRuntime.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  final public func request(_ request: DCloudUniappRuntime.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: DCloudUniappRuntime.AFError)
  final public func request(_ request: DCloudUniappRuntime.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  final public func request(_ request: DCloudUniappRuntime.Request, didCreateTask task: Foundation.URLSessionTask)
  final public func request(_ request: DCloudUniappRuntime.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  final public func request(_ request: DCloudUniappRuntime.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: DCloudUniappRuntime.AFError)
  final public func request(_ request: DCloudUniappRuntime.Request, didCompleteTask task: Foundation.URLSessionTask, with error: DCloudUniappRuntime.AFError?)
  final public func requestIsRetrying(_ request: DCloudUniappRuntime.Request)
  final public func requestDidFinish(_ request: DCloudUniappRuntime.Request)
  final public func requestDidResume(_ request: DCloudUniappRuntime.Request)
  final public func request(_ request: DCloudUniappRuntime.Request, didResumeTask task: Foundation.URLSessionTask)
  final public func requestDidSuspend(_ request: DCloudUniappRuntime.Request)
  final public func request(_ request: DCloudUniappRuntime.Request, didSuspendTask task: Foundation.URLSessionTask)
  final public func requestDidCancel(_ request: DCloudUniappRuntime.Request)
  final public func request(_ request: DCloudUniappRuntime.Request, didCancelTask task: Foundation.URLSessionTask)
  final public func request(_ request: DCloudUniappRuntime.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  final public func request(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Foundation.Data?, DCloudUniappRuntime.AFError>)
  final public func request<Value>(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError>)
  final public func request(_ request: DCloudUniappRuntime.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  final public func request<Value>(_ request: DCloudUniappRuntime.DataStreamRequest, didParseStream result: Swift.Result<Value, DCloudUniappRuntime.AFError>)
  final public func request(_ request: DCloudUniappRuntime.UploadRequest, didCreateUploadable uploadable: DCloudUniappRuntime.UploadRequest.Uploadable)
  final public func request(_ request: DCloudUniappRuntime.UploadRequest, didFailToCreateUploadableWithError error: DCloudUniappRuntime.AFError)
  final public func request(_ request: DCloudUniappRuntime.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  final public func request(_ request: DCloudUniappRuntime.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, DCloudUniappRuntime.AFError>)
  final public func request(_ request: DCloudUniappRuntime.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  final public func request(_ request: DCloudUniappRuntime.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  final public func request(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Foundation.URL?, DCloudUniappRuntime.AFError>)
  final public func request<Value>(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError>)
  @objc deinit
}
open class ClosureEventMonitor : DCloudUniappRuntime.EventMonitor {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, (any Swift.Error)?) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Swift.Void)?
  open var taskDidFinishCollectingMetrics: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, (any Swift.Error)?) -> Swift.Void)?
  open var taskIsWaitingForConnectivity: ((Foundation.URLSession, Foundation.URLSessionTask) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var requestDidCreateInitialURLRequest: ((DCloudUniappRuntime.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToCreateURLRequestWithError: ((DCloudUniappRuntime.Request, DCloudUniappRuntime.AFError) -> Swift.Void)?
  open var requestDidAdaptInitialRequestToAdaptedRequest: ((DCloudUniappRuntime.Request, Foundation.URLRequest, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidFailToAdaptURLRequestWithError: ((DCloudUniappRuntime.Request, Foundation.URLRequest, DCloudUniappRuntime.AFError) -> Swift.Void)?
  open var requestDidCreateURLRequest: ((DCloudUniappRuntime.Request, Foundation.URLRequest) -> Swift.Void)?
  open var requestDidCreateTask: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidGatherMetrics: ((DCloudUniappRuntime.Request, Foundation.URLSessionTaskMetrics) -> Swift.Void)?
  open var requestDidFailTaskEarlyWithError: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask, DCloudUniappRuntime.AFError) -> Swift.Void)?
  open var requestDidCompleteTaskWithError: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask, DCloudUniappRuntime.AFError?) -> Swift.Void)?
  open var requestIsRetrying: ((DCloudUniappRuntime.Request) -> Swift.Void)?
  open var requestDidFinish: ((DCloudUniappRuntime.Request) -> Swift.Void)?
  open var requestDidResume: ((DCloudUniappRuntime.Request) -> Swift.Void)?
  open var requestDidResumeTask: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidSuspend: ((DCloudUniappRuntime.Request) -> Swift.Void)?
  open var requestDidSuspendTask: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidCancel: ((DCloudUniappRuntime.Request) -> Swift.Void)?
  open var requestDidCancelTask: ((DCloudUniappRuntime.Request, Foundation.URLSessionTask) -> Swift.Void)?
  open var requestDidValidateRequestResponseDataWithResult: ((DCloudUniappRuntime.DataRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?, DCloudUniappRuntime.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseResponse: ((DCloudUniappRuntime.DataRequest, DCloudUniappRuntime.DataResponse<Foundation.Data?, DCloudUniappRuntime.AFError>) -> Swift.Void)?
  open var requestDidValidateRequestResponseWithResult: ((DCloudUniappRuntime.DataStreamRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, DCloudUniappRuntime.Request.ValidationResult) -> Swift.Void)?
  open var requestDidCreateUploadable: ((DCloudUniappRuntime.UploadRequest, DCloudUniappRuntime.UploadRequest.Uploadable) -> Swift.Void)?
  open var requestDidFailToCreateUploadableWithError: ((DCloudUniappRuntime.UploadRequest, DCloudUniappRuntime.AFError) -> Swift.Void)?
  open var requestDidProvideInputStream: ((DCloudUniappRuntime.UploadRequest, Foundation.InputStream) -> Swift.Void)?
  open var requestDidFinishDownloadingUsingTaskWithResult: ((DCloudUniappRuntime.DownloadRequest, Foundation.URLSessionTask, Swift.Result<Foundation.URL, DCloudUniappRuntime.AFError>) -> Swift.Void)?
  open var requestDidCreateDestinationURL: ((DCloudUniappRuntime.DownloadRequest, Foundation.URL) -> Swift.Void)?
  open var requestDidValidateRequestResponseFileURLWithResult: ((DCloudUniappRuntime.DownloadRequest, Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.URL?, DCloudUniappRuntime.Request.ValidationResult) -> Swift.Void)?
  open var requestDidParseDownloadResponse: ((DCloudUniappRuntime.DownloadRequest, DCloudUniappRuntime.DownloadResponse<Foundation.URL?, DCloudUniappRuntime.AFError>) -> Swift.Void)?
  final public let queue: Dispatch.DispatchQueue
  public init(queue: Dispatch.DispatchQueue = .main)
  open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, taskNeedsNewBodyStream task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  open func request(_ request: DCloudUniappRuntime.Request, didCreateInitialURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: DCloudUniappRuntime.Request, didFailToCreateURLRequestWithError error: DCloudUniappRuntime.AFError)
  open func request(_ request: DCloudUniappRuntime.Request, didAdaptInitialRequest initialRequest: Foundation.URLRequest, to adaptedRequest: Foundation.URLRequest)
  open func request(_ request: DCloudUniappRuntime.Request, didFailToAdaptURLRequest initialRequest: Foundation.URLRequest, withError error: DCloudUniappRuntime.AFError)
  open func request(_ request: DCloudUniappRuntime.Request, didCreateURLRequest urlRequest: Foundation.URLRequest)
  open func request(_ request: DCloudUniappRuntime.Request, didCreateTask task: Foundation.URLSessionTask)
  open func request(_ request: DCloudUniappRuntime.Request, didGatherMetrics metrics: Foundation.URLSessionTaskMetrics)
  open func request(_ request: DCloudUniappRuntime.Request, didFailTask task: Foundation.URLSessionTask, earlyWithError error: DCloudUniappRuntime.AFError)
  open func request(_ request: DCloudUniappRuntime.Request, didCompleteTask task: Foundation.URLSessionTask, with error: DCloudUniappRuntime.AFError?)
  open func requestIsRetrying(_ request: DCloudUniappRuntime.Request)
  open func requestDidFinish(_ request: DCloudUniappRuntime.Request)
  open func requestDidResume(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didResumeTask task: Foundation.URLSessionTask)
  open func requestDidSuspend(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didSuspendTask task: Foundation.URLSessionTask)
  open func requestDidCancel(_ request: DCloudUniappRuntime.Request)
  public func request(_ request: DCloudUniappRuntime.Request, didCancelTask task: Foundation.URLSessionTask)
  open func request(_ request: DCloudUniappRuntime.DataRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, data: Foundation.Data?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  open func request(_ request: DCloudUniappRuntime.DataRequest, didParseResponse response: DCloudUniappRuntime.DataResponse<Foundation.Data?, DCloudUniappRuntime.AFError>)
  public func request(_ request: DCloudUniappRuntime.DataStreamRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  open func request(_ request: DCloudUniappRuntime.UploadRequest, didCreateUploadable uploadable: DCloudUniappRuntime.UploadRequest.Uploadable)
  open func request(_ request: DCloudUniappRuntime.UploadRequest, didFailToCreateUploadableWithError error: DCloudUniappRuntime.AFError)
  open func request(_ request: DCloudUniappRuntime.UploadRequest, didProvideInputStream stream: Foundation.InputStream)
  open func request(_ request: DCloudUniappRuntime.DownloadRequest, didFinishDownloadingUsing task: Foundation.URLSessionTask, with result: Swift.Result<Foundation.URL, DCloudUniappRuntime.AFError>)
  open func request(_ request: DCloudUniappRuntime.DownloadRequest, didCreateDestinationURL url: Foundation.URL)
  open func request(_ request: DCloudUniappRuntime.DownloadRequest, didValidateRequest urlRequest: Foundation.URLRequest?, response: Foundation.HTTPURLResponse, fileURL: Foundation.URL?, withResult result: DCloudUniappRuntime.Request.ValidationResult)
  open func request(_ request: DCloudUniappRuntime.DownloadRequest, didParseResponse response: DCloudUniappRuntime.DownloadResponse<Foundation.URL?, DCloudUniappRuntime.AFError>)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class UniComponent : DCloudUniappRuntime.DCUniComponent {
  @_Concurrency.MainActor(unsafe) public var jsElement: (any JavaScriptCore.JSExport)? {
    get
  }
  @_Concurrency.MainActor(unsafe) weak public var domNode: DCloudUniappRuntime.UniElementImpl?
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var rootView: UIKit.UIView? {
    @objc get
  }
  @objc deinit
  @_Concurrency.MainActor(unsafe) required public init(domNode: DCloudUniappRuntime.UniElementImpl)
  @_Concurrency.MainActor(unsafe) open func enableNVMeasure() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func setNeedsLayout()
  @_Concurrency.MainActor(unsafe) open func measure(constrainedSize: CoreFoundation.CGSize, widthMode: DCloudUniappRuntime.UniFlexMeasureMode, heightMode: DCloudUniappRuntime.UniFlexMeasureMode) -> CoreFoundation.CGSize
  @_Concurrency.MainActor(unsafe) public func getPageUrl() -> Swift.String
}
extension DCloudUniappRuntime.UniComponent {
  @_Concurrency.MainActor(unsafe) public func getScrollWidth() -> Foundation.NSNumber
  @_Concurrency.MainActor(unsafe) public func getScrollHeight() -> Foundation.NSNumber
  @_Concurrency.MainActor(unsafe) public func setScrollLeft(_ left: Foundation.NSNumber)
  @_Concurrency.MainActor(unsafe) public func setScrollTop(_ top: Foundation.NSNumber)
  @_Concurrency.MainActor(unsafe) public func getScrollLeft() -> Foundation.NSNumber
  @_Concurrency.MainActor(unsafe) public func getScrollTop() -> Foundation.NSNumber
  @_Concurrency.MainActor(unsafe) public func scrollTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @_Concurrency.MainActor(unsafe) public func scrollBy(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @_Concurrency.MainActor(unsafe) public func takeSnapshot(_ options: DCloudUniappRuntime.TakeSnapshotOptions)
}
extension DCloudUniappRuntime.UniComponent {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func onClickEvent(_ data: [Swift.AnyHashable : Any])
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func onTouchEvent(_ name: Swift.String, data: [Any])
}
extension DCloudUniappRuntime.UniComponent {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func _performBlockOnComponentThread(_ block: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func _addUITask(_ block: @escaping () -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func fireEvent(_ eventName: Swift.String, params: [Swift.String : Any]?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func _getBorderDefaultHeight() -> Swift.Float
}
public protocol CachedResponseHandler {
  func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
public struct ResponseCacher {
  public enum Behavior {
    case cache
    case doNotCache
    case modify((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)
  }
  public static let cache: DCloudUniappRuntime.ResponseCacher
  public static let doNotCache: DCloudUniappRuntime.ResponseCacher
  public let behavior: DCloudUniappRuntime.ResponseCacher.Behavior
  public init(behavior: DCloudUniappRuntime.ResponseCacher.Behavior)
}
extension DCloudUniappRuntime.ResponseCacher : DCloudUniappRuntime.CachedResponseHandler {
  public func dataTask(_ task: Foundation.URLSessionDataTask, willCacheResponse response: Foundation.CachedURLResponse, completion: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension DCloudUniappRuntime.CachedResponseHandler where Self == DCloudUniappRuntime.ResponseCacher {
  public static var cache: DCloudUniappRuntime.ResponseCacher {
    get
  }
  public static var doNotCache: DCloudUniappRuntime.ResponseCacher {
    get
  }
  public static func modify(using closure: @escaping ((Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)) -> DCloudUniappRuntime.ResponseCacher
}
@objc open class SessionDelegate : ObjectiveC.NSObject {
  public init(fileManager: Foundation.FileManager = .default)
  @objc deinit
}
extension DCloudUniappRuntime.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: (any Swift.Error)?)
}
extension DCloudUniappRuntime.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @available(macOS 10.13, iOS 11.0, tvOS 11.0, watchOS 4.0, *)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, taskIsWaitingForConnectivity task: Foundation.URLSessionTask)
}
extension DCloudUniappRuntime.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension DCloudUniappRuntime.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
}
public struct TakeSnapshotOptions {
}
@_hasMissingDesignatedInitializers public class UniDocumentImpl : DCloudUniappRuntime.UniDocument {
  public var tagType: Swift.String
  public var attributes: [Swift.String : Any]
  public var id: Swift.String
  @objc deinit
  public func destory()
  public func create()
  public func createElement(_ tagName: Swift.String) -> any DCloudUniappRuntime.UniElement
  public func createElement(_ id: Swift.String, _ tagName: Swift.String) -> any DCloudUniappRuntime.UniElement
  public func createElement(_ data: any DCloudUniappRuntime.INodeData) -> any DCloudUniappRuntime.UniElement
  public func createElement(_ data: Swift.Dictionary<Swift.String, Any>) -> any DCloudUniappRuntime.UniElement
  public func createTextNode(_ data: Swift.String) -> any DCloudUniappRuntime.UniElement
  public func getElementById(_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  public func getRealDomNodeById<T>(id: Swift.String) -> T? where T : DCloudUniappRuntime.UniElement
  public func getElementsByTagName(_ name: Swift.String) -> [any DCloudUniappRuntime.UniElement]
  @discardableResult
  public func addEventListener<T>(_ type: Swift.String, _ listener: @escaping (T) -> Any?) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  @discardableResult
  public func addTouchEventListener<T>(_ type: Swift.String, _ listener: @escaping (T) -> Any?) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  @discardableResult
  public func addClickEventListener<T>(_ listener: @escaping (T) -> Any?) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  public func removeEventListener(_ type: Swift.String, _ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  public func removeEventListener(_ type: Swift.String)
  public func removeEventListener(identify: Swift.String)
  public func removeEventListener(_ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  public func dispatchEvent<T>(_ type: Swift.String, _ value: T) where T : DCloudUniappRuntime.UniEvent
  public func appendChild(_ child: any DCloudUniappRuntime.UniElement)
  public func cloneNode() -> any DCloudUniappRuntime.UniElement
  public func contains(_ otherNode: any DCloudUniappRuntime.UniElement) -> Swift.Bool
  public func hasChildNodes() -> Swift.Bool
  public func isEqualNode(_ otherNode: any DCloudUniappRuntime.UniElement) -> Swift.Bool
  public func replaceChild(_ newChild: any DCloudUniappRuntime.UniElement, _ oldChild: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  public func remove()
  public func getAttribute(_ attributeName: Swift.String) -> Any?
  public func getAttributeNames() -> Swift.Array<Swift.String>
  public func getBoundingClientRect() -> DCloudUniappRuntime.DOMRect
  public func hasAttribute(_ attName: Swift.String) -> Swift.Bool
  public func removeAttribute(_ attrName: Swift.String)
  public func blur()
  public func click()
  public func focus()
  public func syncStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  public func updateAttrs(_ attrs: Swift.Dictionary<Swift.String, Any>)
  public func updateStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  public func append(nodes: any DCloudUniappRuntime.UniElement...)
  public func prepend(nodes: any DCloudUniappRuntime.UniElement...)
  public var dataset: DCloudUniappRuntime.UniStringOptionAnyMap {
    get
  }
  public var nodeName: Swift.String? {
    get
  }
  public var isConnected: Swift.Bool
  public var characterSet: Swift.String
  public var activeElement: (any DCloudUniappRuntime.UniElement)?
  public var hidden: Swift.Bool
  public var parentNode: (any DCloudUniappRuntime.UniElement)?
  public var innerHTML: Swift.String?
  public var visibilityState: Swift.String?
  public var defaultView: UIKit.UIView?
  public var dir: Swift.String?
  public var location: Swift.String?
  public var readyState: Swift.String?
  public var URL: Swift.String?
  public var childNodes: [any DCloudUniappRuntime.UniElement] {
    get
  }
  public var firstChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var lastChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var firstElementChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var lastElementChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var nextElementSibling: (any DCloudUniappRuntime.UniElement)?
  public var previousElementSibling: (any DCloudUniappRuntime.UniElement)?
  public var previousSibling: (any DCloudUniappRuntime.UniElement)?
  public var nextSibling: (any DCloudUniappRuntime.UniElement)?
  public var childElementCount: Swift.Int {
    get
  }
  public var children: [any DCloudUniappRuntime.UniElement] {
    get
  }
  public var tagName: Swift.String {
    get
  }
  public var clientLeft: Swift.Float {
    get
  }
  public var clientTop: Swift.Float {
    get
  }
  public var clientWidth: Swift.Float {
    get
  }
  public var clientHeight: Swift.Float {
    get
  }
  public var style: DCloudUniappRuntime.CSSStyleDeclaration {
    get
  }
  public var lazy: Swift.Bool
  public func getNodeId() -> Swift.String
  public func insertBefore(_ child: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  public func insertBefore(_ child: any DCloudUniappRuntime.UniElement, _ anchor: (any DCloudUniappRuntime.UniElement)?) -> (any DCloudUniappRuntime.UniElement)?
  public func removeChild(_ child: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  public func getStyleMap() -> Swift.Dictionary<Swift.String, Any?>
  public func getAttributeMap() -> Swift.Dictionary<Swift.String, Any>
  public func syncUpdateStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  public func getChildNodeAt(_ position: Swift.Int) -> (any DCloudUniappRuntime.UniElement)?
  public func getChildCount() -> Swift.Int
  public func getWidth() -> Swift.Float
  public func getHeight() -> Swift.Float
  public func getX() -> Swift.Float
  public func getY() -> Swift.Float
  public func invoke(_ method: Swift.String, _ arguments: Any...) -> Any?
  public func getDrawableContext() -> (any DCloudUniappRuntime.DrawableContext)?
  public func notifyLayout()
  public func waitNativeRender(_ callback: @escaping () -> Swift.Void)
  public var body: any DCloudUniappRuntime.UniElement {
    get
  }
  public func getRealDomNodeById<T>(_ tag: Swift.String) -> T?
  public func startRender()
  public func startRender(_ callback: (() -> Swift.Void)?)
  public func createComment(_ text: Swift.String) -> any DCloudUniappRuntime.UniCommentElement
  public func runAsyncDomTask(_ fn: @escaping () -> (Any?), _ callback: @escaping (Any?) -> Swift.Void)
  public var classList: [Swift.String]
  public var parentElement: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var scrollWidth: Foundation.NSNumber {
    get
  }
  public var scrollHeight: Foundation.NSNumber {
    get
  }
  public var scrollLeft: Foundation.NSNumber {
    get
    set(value)
  }
  public var scrollTop: Foundation.NSNumber {
    get
    set(value)
  }
  public var offsetLeft: Foundation.NSNumber {
    get
  }
  public var offsetTop: Foundation.NSNumber {
    get
  }
  public var offsetWidth: Foundation.NSNumber {
    get
  }
  public var offsetHeight: Foundation.NSNumber {
    get
  }
  public var ext: [Swift.String : Any?]
  public func setAttribute(_ key: Swift.String, _ value: Swift.String)
  public func setAnyAttribute(_ key: Swift.String, _ value: Any)
  public func getAttribute(_ key: Swift.String) -> Swift.String?
  public func getAnyAttribute(_ key: Swift.String) -> Any?
  public func addEventListener<T, R>(_ type: Swift.String, _ callback: @escaping (T) -> R) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  public func scrollTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  public func scrollBy(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  public func querySelector(_ selector: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  public func querySelectorAll(_ selector: Swift.String) -> [any DCloudUniappRuntime.UniElement]?
  public func takeSnapshot(_ options: DCloudUniappRuntime.TakeSnapshotOptions)
}
@_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class UTSContainer<T> : DCloudUniappRuntime.UTSComponent<T> where T : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) required public init(domNode: DCloudUniappRuntime.UniElementImpl)
  @objc deinit
}
public typealias UniEventCallback = (_ type: Swift.String, _ res: Any?) -> Swift.Void
extension UIKit.UIApplication {
  @_Concurrency.MainActor(unsafe) public class func uni_getKeyWindow() -> UIKit.UIWindow?
  @_Concurrency.MainActor(unsafe) public class func uni_findCurrentViewController() -> UIKit.UIViewController?
}
open class Session {
  public static let `default`: DCloudUniappRuntime.Session
  final public let session: Foundation.URLSession
  final public let delegate: DCloudUniappRuntime.SessionDelegate
  final public let rootQueue: Dispatch.DispatchQueue
  final public let startRequestsImmediately: Swift.Bool
  final public let requestQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let interceptor: (any DCloudUniappRuntime.RequestInterceptor)?
  final public let serverTrustManager: DCloudUniappRuntime.ServerTrustManager?
  final public let redirectHandler: (any DCloudUniappRuntime.RedirectHandler)?
  final public let cachedResponseHandler: (any DCloudUniappRuntime.CachedResponseHandler)?
  final public let eventMonitor: DCloudUniappRuntime.CompositeEventMonitor
  final public let defaultEventMonitors: [any DCloudUniappRuntime.EventMonitor]
  public init(session: Foundation.URLSession, delegate: DCloudUniappRuntime.SessionDelegate, rootQueue: Dispatch.DispatchQueue, startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, serverTrustManager: DCloudUniappRuntime.ServerTrustManager? = nil, redirectHandler: (any DCloudUniappRuntime.RedirectHandler)? = nil, cachedResponseHandler: (any DCloudUniappRuntime.CachedResponseHandler)? = nil, eventMonitors: [any DCloudUniappRuntime.EventMonitor] = [])
  convenience public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.af.default, delegate: DCloudUniappRuntime.SessionDelegate = SessionDelegate(), rootQueue: Dispatch.DispatchQueue = DispatchQueue(label: "org.alamofire.session.rootQueue"), startRequestsImmediately: Swift.Bool = true, requestQueue: Dispatch.DispatchQueue? = nil, serializationQueue: Dispatch.DispatchQueue? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, serverTrustManager: DCloudUniappRuntime.ServerTrustManager? = nil, redirectHandler: (any DCloudUniappRuntime.RedirectHandler)? = nil, cachedResponseHandler: (any DCloudUniappRuntime.CachedResponseHandler)? = nil, eventMonitors: [any DCloudUniappRuntime.EventMonitor] = [])
  @objc deinit
  public func withAllRequests(perform action: @escaping (Swift.Set<DCloudUniappRuntime.Request>) -> Swift.Void)
  public func cancelAllRequests(completingOnQueue queue: Dispatch.DispatchQueue = .main, completion: (() -> Swift.Void)? = nil)
  public typealias RequestModifier = (inout Foundation.URLRequest) throws -> Swift.Void
  open func request(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, parameters: DCloudUniappRuntime.Parameters? = nil, encoding: any DCloudUniappRuntime.ParameterEncoding = URLEncoding.default, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.DataRequest
  open func request<Parameters>(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any DCloudUniappRuntime.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.DataRequest where Parameters : Swift.Encodable
  open func request(_ convertible: any DCloudUniappRuntime.URLRequestConvertible, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil) -> DCloudUniappRuntime.DataRequest
  open func streamRequest<Parameters>(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any DCloudUniappRuntime.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: DCloudUniappRuntime.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.DataStreamRequest where Parameters : Swift.Encodable
  open func streamRequest(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, headers: DCloudUniappRuntime.HTTPHeaders? = nil, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.DataStreamRequest
  open func streamRequest(_ convertible: any DCloudUniappRuntime.URLRequestConvertible, automaticallyCancelOnStreamError: Swift.Bool = false, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil) -> DCloudUniappRuntime.DataStreamRequest
  open func download(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, parameters: DCloudUniappRuntime.Parameters? = nil, encoding: any DCloudUniappRuntime.ParameterEncoding = URLEncoding.default, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil, to destination: DCloudUniappRuntime.DownloadRequest.Destination? = nil) -> DCloudUniappRuntime.DownloadRequest
  open func download<Parameters>(_ convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .get, parameters: Parameters? = nil, encoder: any DCloudUniappRuntime.ParameterEncoder = URLEncodedFormParameterEncoder.default, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil, to destination: DCloudUniappRuntime.DownloadRequest.Destination? = nil) -> DCloudUniappRuntime.DownloadRequest where Parameters : Swift.Encodable
  open func download(_ convertible: any DCloudUniappRuntime.URLRequestConvertible, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, to destination: DCloudUniappRuntime.DownloadRequest.Destination? = nil) -> DCloudUniappRuntime.DownloadRequest
  open func download(resumingWith data: Foundation.Data, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, to destination: DCloudUniappRuntime.DownloadRequest.Destination? = nil) -> DCloudUniappRuntime.DownloadRequest
  open func upload(_ data: Foundation.Data, to convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .post, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.UploadRequest
  open func upload(_ data: Foundation.Data, with convertible: any DCloudUniappRuntime.URLRequestConvertible, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> DCloudUniappRuntime.UploadRequest
  open func upload(_ fileURL: Foundation.URL, to convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .post, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.UploadRequest
  open func upload(_ fileURL: Foundation.URL, with convertible: any DCloudUniappRuntime.URLRequestConvertible, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> DCloudUniappRuntime.UploadRequest
  open func upload(_ stream: Foundation.InputStream, to convertible: any DCloudUniappRuntime.URLConvertible, method: DCloudUniappRuntime.HTTPMethod = .post, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.UploadRequest
  open func upload(_ stream: Foundation.InputStream, with convertible: any DCloudUniappRuntime.URLRequestConvertible, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> DCloudUniappRuntime.UploadRequest
  open func upload(multipartFormData: @escaping (DCloudUniappRuntime.MultipartFormData) -> Swift.Void, to url: any DCloudUniappRuntime.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: DCloudUniappRuntime.HTTPMethod = .post, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.UploadRequest
  open func upload(multipartFormData: @escaping (DCloudUniappRuntime.MultipartFormData) -> Swift.Void, with request: any DCloudUniappRuntime.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> DCloudUniappRuntime.UploadRequest
  open func upload(multipartFormData: DCloudUniappRuntime.MultipartFormData, to url: any DCloudUniappRuntime.URLConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, method: DCloudUniappRuntime.HTTPMethod = .post, headers: DCloudUniappRuntime.HTTPHeaders? = nil, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default, requestModifier: DCloudUniappRuntime.Session.RequestModifier? = nil) -> DCloudUniappRuntime.UploadRequest
  open func upload(multipartFormData: DCloudUniappRuntime.MultipartFormData, with request: any DCloudUniappRuntime.URLRequestConvertible, usingThreshold encodingMemoryThreshold: Swift.UInt64 = MultipartFormData.encodingMemoryThreshold, interceptor: (any DCloudUniappRuntime.RequestInterceptor)? = nil, fileManager: Foundation.FileManager = .default) -> DCloudUniappRuntime.UploadRequest
}
extension DCloudUniappRuntime.Session : DCloudUniappRuntime.RequestDelegate {
  public var sessionConfiguration: Foundation.URLSessionConfiguration {
    get
  }
  public var startImmediately: Swift.Bool {
    get
  }
  public func cleanup(after request: DCloudUniappRuntime.Request)
  public func retryResult(for request: DCloudUniappRuntime.Request, dueTo error: DCloudUniappRuntime.AFError, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  public func retryRequest(_ request: DCloudUniappRuntime.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @objc @_Concurrency.MainActor final public var canGoPrevious: Swift.Bool {
    @objc get
  }
  @objc @_Concurrency.MainActor final public var canGoNext: Swift.Bool {
    @objc get
  }
  @discardableResult
  @objc @_Concurrency.MainActor final public func goPrevious() -> Swift.Bool
  @discardableResult
  @objc @_Concurrency.MainActor final public func goNext() -> Swift.Bool
}
public let STRING_ANIMATIONTYPE: Swift.String
public let STRING_POP_IN: Swift.String
public let STRING_POP_OUT: Swift.String
public let STRING_NONE: Swift.String
public let STRING_NAVIGATIONBAR: Swift.String
public let STRING_TABBAR: Swift.String
public struct AlamofireExtension<ExtendedType> {
  public var type: ExtendedType {
    get
  }
  public init(_ type: ExtendedType)
}
public protocol AlamofireExtended {
  associatedtype ExtendedType
  static var af: DCloudUniappRuntime.AlamofireExtension<Self.ExtendedType>.Type { get set }
  var af: DCloudUniappRuntime.AlamofireExtension<Self.ExtendedType> { get set }
}
extension DCloudUniappRuntime.AlamofireExtended {
  public static var af: DCloudUniappRuntime.AlamofireExtension<Self>.Type {
    get
    set
  }
  public var af: DCloudUniappRuntime.AlamofireExtension<Self> {
    get
    set
  }
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniIQKeyboardReturnKeyHandler : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor weak final public var delegate: (any UIKit.UITextFieldDelegate & UIKit.UITextViewDelegate)?
  @objc @_Concurrency.MainActor final public var lastTextFieldReturnKeyType: UIKit.UIReturnKeyType {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc @_Concurrency.MainActor public init(controller: UIKit.UIViewController)
  @objc deinit
  @objc @_Concurrency.MainActor final public func addTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func removeTextFieldView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func addResponderFromView(_ view: UIKit.UIView)
  @objc @_Concurrency.MainActor final public func removeResponderFromView(_ view: UIKit.UIView)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class UniIQPreviousNextView : UIKit.UIView {
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @objc @_Concurrency.MainActor final public func reloadInputViews()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc(UniElementPropsNode) @objcMembers open class UniElementPropsNode : DCloudUniappRuntime.UniElementFlexNode {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniScrollEvent : DCloudUniappRuntime.UniEvent {
  @_hasMissingDesignatedInitializers public class ScrollEventDetail {
    public var scrollLeft: Swift.Float
    public var scrollTop: Swift.Float
    public var scrollHeight: Swift.Float
    public var scrollWidth: Swift.Float
    public var deltaX: Swift.Float
    public var deltaY: Swift.Float
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniScrollEvent.ScrollEventDetail
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniScrollEndEvent : DCloudUniappRuntime.UniScrollEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniScrollToLowerEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniScrollToUpperEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniRefresherEvent : DCloudUniappRuntime.UniEvent {
  @_hasMissingDesignatedInitializers public class RefresherEventdetail {
    public var dy: Swift.Float
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniRefresherEvent.RefresherEventdetail
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniRefresherpullingEvent : DCloudUniappRuntime.UniRefresherEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniRefresherrefreshEvent : DCloudUniappRuntime.UniRefresherEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniRefresherrestoreEvent : DCloudUniappRuntime.UniRefresherEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniRefresherabortEvent : DCloudUniappRuntime.UniRefresherEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTabTapEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  public var index: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CSSStyleDeclaration {
  public var cssText: Swift.String {
    get
  }
  public var length: Swift.Int {
    get
  }
  public func getPropertyValue(_ property: Swift.String) -> Any
  public func removeProperty(_ property: Swift.String) -> Any
  public func setProperty(_ propertyName: Swift.String, _ value: Any)
  public func putAll(_ style: Swift.Dictionary<Swift.String, Any>)
  public func getStyleMap() -> Swift.Dictionary<Swift.String, Any>
  public func get(_ key: Swift.String) -> Any?
  public func set(_ key: Swift.String, _ value: Any)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
public struct UniKeyboardManagerWrapper<Base> {
  public let base: Base
  public init(_ base: Base)
}
@available(iOSApplicationExtension, unavailable)
public protocol UniKeyboardManagerCompatible {
  associatedtype Base
  var iq: DCloudUniappRuntime.UniKeyboardManagerWrapper<Self.Base> { get set }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManagerCompatible {
  public var iq: DCloudUniappRuntime.UniKeyboardManagerWrapper<Self> {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UniJsSwiftApiWrapper : ObjectiveC.NSObject {
  @objc public static func runOnJsQueue(_ runable: @escaping () -> Swift.Void)
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class UniIQBarButtonItem : UIKit.UIBarButtonItem {
  @_Concurrency.MainActor @objc override dynamic public init()
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic open var tintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor open func setTarget(_ target: Swift.AnyObject?, action: ObjectiveC.Selector?)
  @objc @_Concurrency.MainActor open var invocation: DCloudUniappRuntime.UniIQInvocation? {
    @objc get
    @objc set
  }
  @objc deinit
}
public struct RequestAdapterState {
  public let requestID: Foundation.UUID
  public let session: DCloudUniappRuntime.Session
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  func adapt(_ urlRequest: Foundation.URLRequest, using state: DCloudUniappRuntime.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
extension DCloudUniappRuntime.RequestAdapter {
  public func adapt(_ urlRequest: Foundation.URLRequest, using state: DCloudUniappRuntime.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
public enum RetryResult {
  case retry
  case retryWithDelay(Foundation.TimeInterval)
  case doNotRetry
  case doNotRetryWithError(any Swift.Error)
}
public protocol RequestRetrier {
  func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
}
public protocol RequestInterceptor : DCloudUniappRuntime.RequestAdapter, DCloudUniappRuntime.RequestRetrier {
}
extension DCloudUniappRuntime.RequestInterceptor {
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  public func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
}
public typealias AdaptHandler = (Foundation.URLRequest, DCloudUniappRuntime.Session, _ completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void) -> Swift.Void
public typealias RetryHandler = (DCloudUniappRuntime.Request, DCloudUniappRuntime.Session, any Swift.Error, _ completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void) -> Swift.Void
open class Adapter : DCloudUniappRuntime.RequestInterceptor {
  public init(_ adaptHandler: @escaping DCloudUniappRuntime.AdaptHandler)
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: DCloudUniappRuntime.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  @objc deinit
}
extension DCloudUniappRuntime.RequestAdapter where Self == DCloudUniappRuntime.Adapter {
  public static func adapter(using closure: @escaping DCloudUniappRuntime.AdaptHandler) -> DCloudUniappRuntime.Adapter
}
open class Retrier : DCloudUniappRuntime.RequestInterceptor {
  public init(_ retryHandler: @escaping DCloudUniappRuntime.RetryHandler)
  open func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  @objc deinit
}
extension DCloudUniappRuntime.RequestRetrier where Self == DCloudUniappRuntime.Retrier {
  public static func retrier(using closure: @escaping DCloudUniappRuntime.RetryHandler) -> DCloudUniappRuntime.Retrier
}
open class Interceptor : DCloudUniappRuntime.RequestInterceptor {
  final public let adapters: [any DCloudUniappRuntime.RequestAdapter]
  final public let retriers: [any DCloudUniappRuntime.RequestRetrier]
  public init(adaptHandler: @escaping DCloudUniappRuntime.AdaptHandler, retryHandler: @escaping DCloudUniappRuntime.RetryHandler)
  public init(adapter: any DCloudUniappRuntime.RequestAdapter, retrier: any DCloudUniappRuntime.RequestRetrier)
  public init(adapters: [any DCloudUniappRuntime.RequestAdapter] = [], retriers: [any DCloudUniappRuntime.RequestRetrier] = [], interceptors: [any DCloudUniappRuntime.RequestInterceptor] = [])
  open func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func adapt(_ urlRequest: Foundation.URLRequest, using state: DCloudUniappRuntime.RequestAdapterState, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  open func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  @objc deinit
}
extension DCloudUniappRuntime.RequestInterceptor where Self == DCloudUniappRuntime.Interceptor {
  public static func interceptor(adapter: @escaping DCloudUniappRuntime.AdaptHandler, retrier: @escaping DCloudUniappRuntime.RetryHandler) -> DCloudUniappRuntime.Interceptor
  public static func interceptor(adapter: any DCloudUniappRuntime.RequestAdapter, retrier: any DCloudUniappRuntime.RequestRetrier) -> DCloudUniappRuntime.Interceptor
  public static func interceptor(adapters: [any DCloudUniappRuntime.RequestAdapter] = [], retriers: [any DCloudUniappRuntime.RequestRetrier] = [], interceptors: [any DCloudUniappRuntime.RequestInterceptor] = []) -> DCloudUniappRuntime.Interceptor
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType)
    public enum ConnectionType {
      case ethernetOrWiFi
      case cellular
      public static func == (a: DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType, b: DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
  }
  public typealias Listener = (DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  public static let `default`: DCloudUniappRuntime.NetworkReachabilityManager?
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnCellular: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  final public let reachabilityQueue: Dispatch.DispatchQueue
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var status: DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening(onQueue queue: Dispatch.DispatchQueue = .main, onUpdatePerforming listener: @escaping DCloudUniappRuntime.NetworkReachabilityManager.Listener) -> Swift.Bool
  open func stopListening()
}
extension DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
  public static func == (a: DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus, b: DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class UniTextareaFocusEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class TextareaFocusEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniTextareaFocusEvent.TextareaFocusEventDetail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniTextareaBlurEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class TextareaBlurEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniTextareaBlurEvent.TextareaBlurEventDetail
  @objc deinit
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
public protocol ResponseSerializer : DCloudUniappRuntime.DataResponseSerializerProtocol, DCloudUniappRuntime.DownloadResponseSerializerProtocol {
  var dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor { get }
  var emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> { get }
  var emptyResponseCodes: Swift.Set<Swift.Int> { get }
}
public protocol DataPreprocessor {
  func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct PassthroughPreprocessor : DCloudUniappRuntime.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
public struct GoogleXSSIPreprocessor : DCloudUniappRuntime.DataPreprocessor {
  public init()
  public func preprocess(_ data: Foundation.Data) throws -> Foundation.Data
}
extension DCloudUniappRuntime.DataPreprocessor where Self == DCloudUniappRuntime.PassthroughPreprocessor {
  public static var passthrough: DCloudUniappRuntime.PassthroughPreprocessor {
    get
  }
}
extension DCloudUniappRuntime.DataPreprocessor where Self == DCloudUniappRuntime.GoogleXSSIPreprocessor {
  public static var googleXSSI: DCloudUniappRuntime.GoogleXSSIPreprocessor {
    get
  }
}
extension DCloudUniappRuntime.ResponseSerializer {
  public static var defaultDataPreprocessor: any DCloudUniappRuntime.DataPreprocessor {
    get
  }
  public static var defaultEmptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> {
    get
  }
  public static var defaultEmptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public var dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor {
    get
  }
  public var emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> {
    get
  }
  public var emptyResponseCodes: Swift.Set<Swift.Int> {
    get
  }
  public func requestAllowsEmptyResponseData(_ request: Foundation.URLRequest?) -> Swift.Bool?
  public func responseAllowsEmptyResponseData(_ response: Foundation.HTTPURLResponse?) -> Swift.Bool?
  public func emptyResponseAllowed(forRequest request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?) -> Swift.Bool
}
extension DCloudUniappRuntime.DownloadResponseSerializerProtocol where Self : DCloudUniappRuntime.DataResponseSerializerProtocol {
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Self.SerializedObject
}
extension DCloudUniappRuntime.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Foundation.Data?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : DCloudUniappRuntime.DataResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : DCloudUniappRuntime.ResponseSerializer
}
extension DCloudUniappRuntime.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Foundation.URL?>) -> Swift.Void) -> Self
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : DCloudUniappRuntime.DownloadResponseSerializerProtocol
  @discardableResult
  public func response<Serializer>(queue: Dispatch.DispatchQueue = .main, responseSerializer: Serializer, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Serializer.SerializedObject>) -> Swift.Void) -> Self where Serializer : DCloudUniappRuntime.ResponseSerializer
}
public struct URLResponseSerializer : DCloudUniappRuntime.DownloadResponseSerializerProtocol {
  public init()
  public func serializeDownload(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, fileURL: Foundation.URL?, error: (any Swift.Error)?) throws -> Foundation.URL
  public typealias SerializedObject = Foundation.URL
}
extension DCloudUniappRuntime.DownloadResponseSerializerProtocol where Self == DCloudUniappRuntime.URLResponseSerializer {
  public static var url: DCloudUniappRuntime.URLResponseSerializer {
    get
  }
}
extension DCloudUniappRuntime.DownloadRequest {
  @discardableResult
  public func responseURL(queue: Dispatch.DispatchQueue = .main, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Foundation.URL>) -> Swift.Void) -> Self
}
final public class DataResponseSerializer : DCloudUniappRuntime.ResponseSerializer {
  final public let dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  public init(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
  @objc deinit
}
extension DCloudUniappRuntime.ResponseSerializer where Self == DCloudUniappRuntime.DataResponseSerializer {
  public static var data: DCloudUniappRuntime.DataResponseSerializer {
    get
  }
  public static func data(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataResponseSerializer
}
extension DCloudUniappRuntime.DataRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension DCloudUniappRuntime.DownloadRequest {
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
final public class StringResponseSerializer : DCloudUniappRuntime.ResponseSerializer {
  final public let dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor
  final public let encoding: Swift.String.Encoding?
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  public init(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Swift.String
  public typealias SerializedObject = Swift.String
  @objc deinit
}
extension DCloudUniappRuntime.ResponseSerializer where Self == DCloudUniappRuntime.StringResponseSerializer {
  public static var string: DCloudUniappRuntime.StringResponseSerializer {
    get
  }
  public static func string(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.StringResponseSerializer
}
extension DCloudUniappRuntime.DataRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension DCloudUniappRuntime.DownloadRequest {
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
@available(*, deprecated, message: "JSONResponseSerializer deprecated and will be removed in Alamofire 6. Use DecodableResponseSerializer instead.")
final public class JSONResponseSerializer : DCloudUniappRuntime.ResponseSerializer {
  final public let dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  final public let options: Foundation.JSONSerialization.ReadingOptions
  public init(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> Any
  public typealias SerializedObject = Any
  @objc deinit
}
extension DCloudUniappRuntime.DataRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<Any>) -> Swift.Void) -> Self
}
extension DCloudUniappRuntime.DownloadRequest {
  @available(*, deprecated, message: "responseJSON deprecated and will be removed in Alamofire 6. Use responseDecodable instead.")
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = JSONResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = JSONResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = JSONResponseSerializer.defaultEmptyRequestMethods, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<Any>) -> Swift.Void) -> Self
}
public protocol EmptyResponse {
  static func emptyValue() -> Self
}
public struct Empty : Swift.Codable {
  public static let value: DCloudUniappRuntime.Empty
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension DCloudUniappRuntime.Empty : DCloudUniappRuntime.EmptyResponse {
  public static func emptyValue() -> DCloudUniappRuntime.Empty
}
public protocol DataDecoder {
  func decode<D>(_ type: D.Type, from data: Foundation.Data) throws -> D where D : Swift.Decodable
}
extension Foundation.JSONDecoder : DCloudUniappRuntime.DataDecoder {
}
extension Foundation.PropertyListDecoder : DCloudUniappRuntime.DataDecoder {
}
final public class DecodableResponseSerializer<T> : DCloudUniappRuntime.ResponseSerializer where T : Swift.Decodable {
  final public let dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor
  final public let decoder: any DCloudUniappRuntime.DataDecoder
  final public let emptyResponseCodes: Swift.Set<Swift.Int>
  final public let emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  public init(dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer.defaultEmptyRequestMethods)
  final public func serialize(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: (any Swift.Error)?) throws -> T
  public typealias SerializedObject = T
  @objc deinit
}
extension DCloudUniappRuntime.ResponseSerializer {
  public static func decodable<T>(of type: T.Type, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DecodableResponseSerializer<T> where Self == DCloudUniappRuntime.DecodableResponseSerializer<T>, T : Swift.Decodable
}
extension DCloudUniappRuntime.DataRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDataResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
extension DCloudUniappRuntime.DownloadRequest {
  @discardableResult
  public func responseDecodable<T>(of type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods, completionHandler: @escaping (DCloudUniappRuntime.AFDownloadResponse<T>) -> Swift.Void) -> Self where T : Swift.Decodable
}
public protocol DataStreamSerializer {
  associatedtype SerializedObject
  func serialize(_ data: Foundation.Data) throws -> Self.SerializedObject
}
public struct DecodableStreamSerializer<T> : DCloudUniappRuntime.DataStreamSerializer where T : Swift.Decodable {
  public let decoder: any DCloudUniappRuntime.DataDecoder
  public let dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor
  public init(decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = PassthroughPreprocessor())
  public func serialize(_ data: Foundation.Data) throws -> T
  public typealias SerializedObject = T
}
public struct PassthroughStreamSerializer : DCloudUniappRuntime.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Foundation.Data
  public typealias SerializedObject = Foundation.Data
}
public struct StringStreamSerializer : DCloudUniappRuntime.DataStreamSerializer {
  public init()
  public func serialize(_ data: Foundation.Data) throws -> Swift.String
  public typealias SerializedObject = Swift.String
}
extension DCloudUniappRuntime.DataStreamSerializer {
  public static func decodable<T>(of type: T.Type, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), dataPreprocessor: any DCloudUniappRuntime.DataPreprocessor = PassthroughPreprocessor()) -> Self where Self == DCloudUniappRuntime.DecodableStreamSerializer<T>, T : Swift.Decodable
}
extension DCloudUniappRuntime.DataStreamSerializer where Self == DCloudUniappRuntime.PassthroughStreamSerializer {
  public static var passthrough: DCloudUniappRuntime.PassthroughStreamSerializer {
    get
  }
}
extension DCloudUniappRuntime.DataStreamSerializer where Self == DCloudUniappRuntime.StringStreamSerializer {
  public static var string: DCloudUniappRuntime.StringStreamSerializer {
    get
  }
}
extension DCloudUniappRuntime.DataStreamRequest {
  @discardableResult
  final public func responseStream(on queue: Dispatch.DispatchQueue = .main, stream: @escaping DCloudUniappRuntime.DataStreamRequest.Handler<Foundation.Data, Swift.Never>) -> Self
  @discardableResult
  final public func responseStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main, stream: @escaping DCloudUniappRuntime.DataStreamRequest.Handler<Serializer.SerializedObject, DCloudUniappRuntime.AFError>) -> Self where Serializer : DCloudUniappRuntime.DataStreamSerializer
  @discardableResult
  final public func responseStreamString(on queue: Dispatch.DispatchQueue = .main, stream: @escaping DCloudUniappRuntime.DataStreamRequest.Handler<Swift.String, Swift.Never>) -> Self
  @discardableResult
  final public func responseStreamDecodable<T>(of type: T.Type = T.self, on queue: Dispatch.DispatchQueue = .main, using decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), preprocessor: any DCloudUniappRuntime.DataPreprocessor = PassthroughPreprocessor(), stream: @escaping DCloudUniappRuntime.DataStreamRequest.Handler<T, DCloudUniappRuntime.AFError>) -> Self where T : Swift.Decodable
}
@_inheritsConvenienceInitializers @objc(UTSRuntimeBridge) @objcMembers public class UTSRuntimeBridge : ObjectiveC.NSObject {
  @objc public class func getCurrentViewController() -> UIKit.UIViewController
  @objc public class func getKeyWindow() -> UIKit.UIWindow
  @objc public class func convertColor(_ value: Any) -> UIKit.UIColor
  @objc public class func convertString(_ value: Any) -> Swift.String
  @objc public class func convertBool(_ value: Any) -> Swift.Bool
  @objc public class func convertNumber(_ value: Any) -> Foundation.NSNumber
  @objc public class func convertDouble(_ value: Any) -> Swift.Double
  @objc public class func convertFloat(_ value: Any) -> Swift.Float
  @objc public class func convertInt(_ value: Any) -> Swift.Int
  @objc public class func originTypeFromNumber(_ number: Foundation.NSNumber) -> Swift.String
  @objc public class func aesDecrypt(_ data: Foundation.Data, _ key: Swift.String) -> Foundation.Data
  @objc public class func rumtimeDataPath() -> Swift.String
  @objc public class func appsPath() -> Swift.String
  @objc public class func wwwPath() -> Swift.String
  @objc public class func ensureDirExist(_ path: Swift.String)
  @objc public class func getAppName() -> Swift.String
  @objc public class func getAppId() -> Swift.String
  @objc public class func getAppVersionCode() -> Swift.String
  @objc public class func getAppVersion() -> Swift.String
  @objc public class func getInnerVersion() -> Swift.String
  @objc public class func getRuntimeVersion() -> Swift.String
  @objc public class func getCompilerVersion() -> Swift.String
  @objc public class func appDataPath() -> Swift.String
  @objc public class func getResourcePath(_ resourceName: Swift.String) -> Swift.String
  @objc public class func getUserAgent() -> Swift.String
  @objc public class func getDeviceId() -> Swift.String
  @objc public class func getDeviceModel() -> Swift.String
  @objc public class func getSystemLanguage() -> Swift.String
  @objc public class func isRoot() -> Swift.Bool
  @objc public class func getGgbs() -> Swift.String
  @objc public class func getSystemSetting() -> [Swift.String : Any]
  @objc public class func getAppAuthorizeSetting() -> [Swift.String : Any]
  @objc public class func getWindowInfo() -> [Swift.String : Any]
  @objc public static func reloadApp(_ isDebug: Swift.Bool = false)
  @objc public static func logDebug(_ log: Swift.String)
  @objc public static func getFontFilePath(_ fontFamily: Swift.String) -> Swift.String?
  @objc public static func setDeviceInterfaceOrientation(_ toOrientaiton: UIKit.UIInterfaceOrientation)
  @objc public class func checkIfSupportOrientation(_ orientation: UIKit.UIInterfaceOrientation) -> Swift.Bool
  @objc public class func lockScreen()
  @objc public class func unLockScreen()
  @objc public class func isScreenLocked() -> Swift.Bool
  @objc public class func setTempOrientation(_ orientation: UIKit.UIInterfaceOrientationMask)
  @objc public class func loadImage(_ url: Swift.String, _ complete: @escaping (UIKit.UIImage) -> Swift.Void)
  @objc public class func getResourceAbsolutePath(_ h5Path: Swift.String, _ basePath: Swift.String?) -> Swift.String
  @objc public class func getMediaCacheDir() -> Swift.String
  @objc public static func getVideoCacheDir() -> Swift.String
  @objc public static func convert2AbsFullPath(_ path: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol INavigationBar : AnyObject {
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UIScrollView : DCloudUniappRuntime.UniKeyboardManagerCompatible {
  @_Concurrency.MainActor(unsafe) public var iq: DCloudUniappRuntime.UniKeyboardManagerWrapper<UIKit.UIView> {
    get
    set
  }
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension DCloudUniappRuntime.UniKeyboardManagerWrapper where Base : UIKit.UIScrollView {
  @_Concurrency.MainActor public var ignoreScrollingAdjustment: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var ignoreContentInsetAdjustment: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var restoreContentOffset: Swift.Bool {
    get
    set(newValue)
  }
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIScrollView {
  @objc @available(*, unavailable, renamed: "iq.ignoreScrollingAdjustment")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreScrollingAdjustment: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.ignoreContentInsetAdjustment")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldIgnoreContentInsetAdjustment: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @available(*, unavailable, renamed: "iq.restoreContentOffset")
  @_Concurrency.MainActor(unsafe) dynamic public var shouldRestoreScrollViewContentOffset: Swift.Bool {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class Request {
  public enum State {
    case initialized
    case resumed
    case suspended
    case cancelled
    case finished
    public static func == (a: DCloudUniappRuntime.Request.State, b: DCloudUniappRuntime.Request.State) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public let id: Foundation.UUID
  final public let underlyingQueue: Dispatch.DispatchQueue
  final public let serializationQueue: Dispatch.DispatchQueue
  final public let eventMonitor: (any DCloudUniappRuntime.EventMonitor)?
  final public let interceptor: (any DCloudUniappRuntime.RequestInterceptor)?
  weak public var delegate: (any DCloudUniappRuntime.RequestDelegate)? {
    get
  }
  public var state: DCloudUniappRuntime.Request.State {
    get
  }
  public var isInitialized: Swift.Bool {
    get
  }
  public var isResumed: Swift.Bool {
    get
  }
  public var isSuspended: Swift.Bool {
    get
  }
  public var isCancelled: Swift.Bool {
    get
  }
  public var isFinished: Swift.Bool {
    get
  }
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  final public let uploadProgress: Foundation.Progress
  final public let downloadProgress: Foundation.Progress
  public var redirectHandler: (any DCloudUniappRuntime.RedirectHandler)? {
    get
  }
  public var cachedResponseHandler: (any DCloudUniappRuntime.CachedResponseHandler)? {
    get
  }
  public var credential: Foundation.URLCredential? {
    get
  }
  public var requests: [Foundation.URLRequest] {
    get
  }
  public var firstRequest: Foundation.URLRequest? {
    get
  }
  public var lastRequest: Foundation.URLRequest? {
    get
  }
  public var request: Foundation.URLRequest? {
    get
  }
  public var performedRequests: [Foundation.URLRequest] {
    get
  }
  public var response: Foundation.HTTPURLResponse? {
    get
  }
  public var tasks: [Foundation.URLSessionTask] {
    get
  }
  public var firstTask: Foundation.URLSessionTask? {
    get
  }
  public var lastTask: Foundation.URLSessionTask? {
    get
  }
  public var task: Foundation.URLSessionTask? {
    get
  }
  public var allMetrics: [Foundation.URLSessionTaskMetrics] {
    get
  }
  public var firstMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var lastMetrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
  public var retryCount: Swift.Int {
    get
  }
  public var error: DCloudUniappRuntime.AFError? {
    get
  }
  @discardableResult
  public func cancel() -> Self
  @discardableResult
  public func suspend() -> Self
  @discardableResult
  public func resume() -> Self
  @discardableResult
  public func authenticate(username: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  public func authenticate(with credential: Foundation.URLCredential) -> Self
  @discardableResult
  public func downloadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping DCloudUniappRuntime.Request.ProgressHandler) -> Self
  @discardableResult
  public func uploadProgress(queue: Dispatch.DispatchQueue = .main, closure: @escaping DCloudUniappRuntime.Request.ProgressHandler) -> Self
  @discardableResult
  public func redirect(using handler: any DCloudUniappRuntime.RedirectHandler) -> Self
  @discardableResult
  public func cacheResponse(using handler: any DCloudUniappRuntime.CachedResponseHandler) -> Self
  @discardableResult
  public func cURLDescription(on queue: Dispatch.DispatchQueue, calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func cURLDescription(calling handler: @escaping (Swift.String) -> Swift.Void) -> Self
  @discardableResult
  public func onURLRequestCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLRequest) -> Swift.Void) -> Self
  @discardableResult
  public func onURLSessionTaskCreation(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.URLSessionTask) -> Swift.Void) -> Self
  @objc deinit
}
extension DCloudUniappRuntime.Request {
  public enum ResponseDisposition {
    case allow
    case cancel
    public static func == (a: DCloudUniappRuntime.Request.ResponseDisposition, b: DCloudUniappRuntime.Request.ResponseDisposition) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
extension DCloudUniappRuntime.Request : Swift.Equatable {
  public static func == (lhs: DCloudUniappRuntime.Request, rhs: DCloudUniappRuntime.Request) -> Swift.Bool
}
extension DCloudUniappRuntime.Request : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension DCloudUniappRuntime.Request : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension DCloudUniappRuntime.Request {
  public func cURLDescription() -> Swift.String
}
public protocol RequestDelegate : AnyObject {
  var sessionConfiguration: Foundation.URLSessionConfiguration { get }
  var startImmediately: Swift.Bool { get }
  func cleanup(after request: DCloudUniappRuntime.Request)
  func retryResult(for request: DCloudUniappRuntime.Request, dueTo error: DCloudUniappRuntime.AFError, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  func retryRequest(_ request: DCloudUniappRuntime.Request, withDelay timeDelay: Foundation.TimeInterval?)
}
@_hasMissingDesignatedInitializers public class DataRequest : DCloudUniappRuntime.Request {
  final public let convertible: any DCloudUniappRuntime.URLRequestConvertible
  public var data: Foundation.Data? {
    get
  }
  @discardableResult
  public func validate(_ validation: @escaping DCloudUniappRuntime.DataRequest.Validation) -> Self
  @discardableResult
  @_disfavoredOverload public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (_ response: Foundation.HTTPURLResponse, _ completionHandler: @escaping (DCloudUniappRuntime.Request.ResponseDisposition) -> Swift.Void) -> Swift.Void) -> Self
  @discardableResult
  public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.HTTPURLResponse) -> Swift.Void) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class DataStreamRequest : DCloudUniappRuntime.Request {
  public typealias Handler<Success, Failure> = (DCloudUniappRuntime.DataStreamRequest.Stream<Success, Failure>) throws -> Swift.Void where Failure : Swift.Error
  public struct Stream<Success, Failure> where Failure : Swift.Error {
    public let event: DCloudUniappRuntime.DataStreamRequest.Event<Success, Failure>
    public let token: DCloudUniappRuntime.DataStreamRequest.CancellationToken
    public func cancel()
  }
  public enum Event<Success, Failure> where Failure : Swift.Error {
    case stream(Swift.Result<Success, Failure>)
    case complete(DCloudUniappRuntime.DataStreamRequest.Completion)
  }
  public struct Completion {
    public let request: Foundation.URLRequest?
    public let response: Foundation.HTTPURLResponse?
    public let metrics: Foundation.URLSessionTaskMetrics?
    public let error: DCloudUniappRuntime.AFError?
  }
  public struct CancellationToken {
    public func cancel()
  }
  final public let convertible: any DCloudUniappRuntime.URLRequestConvertible
  final public let automaticallyCancelOnStreamError: Swift.Bool
  @discardableResult
  final public func validate(_ validation: @escaping DCloudUniappRuntime.DataStreamRequest.Validation) -> Self
  final public func asInputStream(bufferSize: Swift.Int = 1024) -> Foundation.InputStream?
  @discardableResult
  @_disfavoredOverload final public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (_ response: Foundation.HTTPURLResponse, _ completionHandler: @escaping (DCloudUniappRuntime.Request.ResponseDisposition) -> Swift.Void) -> Swift.Void) -> Self
  @discardableResult
  final public func onHTTPResponse(on queue: Dispatch.DispatchQueue = .main, perform handler: @escaping (Foundation.HTTPURLResponse) -> Swift.Void) -> Self
  @objc deinit
}
extension DCloudUniappRuntime.DataStreamRequest.Stream {
  public var result: Swift.Result<Success, Failure>? {
    get
  }
  public var value: Success? {
    get
  }
  public var error: Failure? {
    get
  }
  public var completion: DCloudUniappRuntime.DataStreamRequest.Completion? {
    get
  }
}
@_hasMissingDesignatedInitializers public class DownloadRequest : DCloudUniappRuntime.Request {
  public struct Options : Swift.OptionSet {
    public static let createIntermediateDirectories: DCloudUniappRuntime.DownloadRequest.Options
    public static let removePreviousFile: DCloudUniappRuntime.DownloadRequest.Options
    public let rawValue: Swift.Int
    public init(rawValue: Swift.Int)
    public typealias ArrayLiteralElement = DCloudUniappRuntime.DownloadRequest.Options
    public typealias Element = DCloudUniappRuntime.DownloadRequest.Options
    public typealias RawValue = Swift.Int
  }
  public typealias Destination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: DCloudUniappRuntime.DownloadRequest.Options)
  public class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask, options: DCloudUniappRuntime.DownloadRequest.Options = []) -> DCloudUniappRuntime.DownloadRequest.Destination
  public enum Downloadable {
    case request(any DCloudUniappRuntime.URLRequestConvertible)
    case resumeData(Foundation.Data)
  }
  public var resumeData: Foundation.Data? {
    get
  }
  public var fileURL: Foundation.URL? {
    get
  }
  final public let downloadable: DCloudUniappRuntime.DownloadRequest.Downloadable
  public func task(forResumeData data: Foundation.Data, using session: Foundation.URLSession) -> Foundation.URLSessionTask
  @discardableResult
  override public func cancel() -> Self
  @discardableResult
  public func cancel(producingResumeData shouldProduceResumeData: Swift.Bool) -> Self
  @discardableResult
  public func cancel(byProducingResumeData completionHandler: @escaping (_ data: Foundation.Data?) -> Swift.Void) -> Self
  @discardableResult
  public func validate(_ validation: @escaping DCloudUniappRuntime.DownloadRequest.Validation) -> Self
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UploadRequest : DCloudUniappRuntime.DataRequest {
  public enum Uploadable {
    case data(Foundation.Data)
    case file(Foundation.URL, shouldRemove: Swift.Bool)
    case stream(Foundation.InputStream)
  }
  final public let upload: any DCloudUniappRuntime.UploadableConvertible
  final public let fileManager: Foundation.FileManager
  public var uploadable: DCloudUniappRuntime.UploadRequest.Uploadable?
  public func cleanup()
  @objc deinit
}
public protocol UploadableConvertible {
  func createUploadable() throws -> DCloudUniappRuntime.UploadRequest.Uploadable
}
extension DCloudUniappRuntime.UploadRequest.Uploadable : DCloudUniappRuntime.UploadableConvertible {
  public func createUploadable() throws -> DCloudUniappRuntime.UploadRequest.Uploadable
}
public protocol UploadConvertible : DCloudUniappRuntime.URLRequestConvertible, DCloudUniappRuntime.UploadableConvertible {
}
public typealias UniDomNodeConstructor = (any DCloudUniappRuntime.IPageContext, any DCloudUniappRuntime.INodeData) -> DCloudUniappRuntime.UniElementImpl
@_hasMissingDesignatedInitializers public class UniComponentRegistry {
  public static let shared: DCloudUniappRuntime.UniComponentRegistry
  @objc deinit
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: DCloudUniappRuntime.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : DCloudUniappRuntime.ResponseSerializer
  public init<Serializer>(_ request: DCloudUniappRuntime.DataRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : DCloudUniappRuntime.DataResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, DCloudUniappRuntime.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, DCloudUniappRuntime.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == DCloudUniappRuntime.DataResponse<Value, DCloudUniappRuntime.AFError>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension DCloudUniappRuntime.DataResponsePublisher where Value == Foundation.Data? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: DCloudUniappRuntime.DataRequest, queue: Dispatch.DispatchQueue)
}
extension DCloudUniappRuntime.DataRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DataResponsePublisher<T> where Serializer : DCloudUniappRuntime.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DataResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DataResponsePublisher<Foundation.Data?>
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DataStreamPublisher<Value> : Combine.Publisher {
  public typealias Output = DCloudUniappRuntime.DataStreamRequest.Stream<Value, DCloudUniappRuntime.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: DCloudUniappRuntime.DataStreamRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : DCloudUniappRuntime.DataStreamSerializer
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, DCloudUniappRuntime.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, DCloudUniappRuntime.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == DCloudUniappRuntime.DataStreamRequest.Stream<Value, DCloudUniappRuntime.AFError>
}
extension DCloudUniappRuntime.DataStreamRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishStream<Serializer>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DataStreamPublisher<Serializer.SerializedObject> where Serializer : DCloudUniappRuntime.DataStreamSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishData(queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DataStreamPublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishString(queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DataStreamPublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  final public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), preprocessor: any DCloudUniappRuntime.DataPreprocessor = PassthroughPreprocessor()) -> DCloudUniappRuntime.DataStreamPublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
public struct DownloadResponsePublisher<Value> : Combine.Publisher {
  public typealias Output = DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError>
  public typealias Failure = Swift.Never
  public init<Serializer>(_ request: DCloudUniappRuntime.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : DCloudUniappRuntime.ResponseSerializer
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init<Serializer>(_ request: DCloudUniappRuntime.DownloadRequest, queue: Dispatch.DispatchQueue, serializer: Serializer) where Value == Serializer.SerializedObject, Serializer : DCloudUniappRuntime.DownloadResponseSerializerProtocol
  public func result() -> Combine.AnyPublisher<Swift.Result<Value, DCloudUniappRuntime.AFError>, Swift.Never>
  public func value() -> Combine.AnyPublisher<Value, DCloudUniappRuntime.AFError>
  public func receive<S>(subscriber: S) where S : Combine.Subscriber, S.Failure == Swift.Never, S.Input == DCloudUniappRuntime.DownloadResponse<Value, DCloudUniappRuntime.AFError>
}
extension DCloudUniappRuntime.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DownloadResponsePublisher<T> where Serializer : DCloudUniappRuntime.ResponseSerializer, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishResponse<Serializer, T>(using serializer: Serializer, on queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DownloadResponsePublisher<T> where Serializer : DCloudUniappRuntime.DownloadResponseSerializerProtocol, T == Serializer.SerializedObject
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishURL(queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DownloadResponsePublisher<Foundation.URL>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishData(queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DataResponseSerializer.defaultDataPreprocessor, emptyResponseCodes: Swift.Set<Swift.Int> = DataResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DataResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadResponsePublisher<Foundation.Data>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishString(queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = StringResponseSerializer.defaultDataPreprocessor, encoding: Swift.String.Encoding? = nil, emptyResponseCodes: Swift.Set<Swift.Int> = StringResponseSerializer.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = StringResponseSerializer.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadResponsePublisher<Swift.String>
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  @available(*, deprecated, message: "Renamed publishDecodable(type:queue:preprocessor:decoder:emptyResponseCodes:emptyRequestMethods).")
  @_disfavoredOverload public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyResponseMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadResponsePublisher<T> where T : Swift.Decodable
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishDecodable<T>(type: T.Type = T.self, queue: Dispatch.DispatchQueue = .main, preprocessor: any DCloudUniappRuntime.DataPreprocessor = DecodableResponseSerializer<T>.defaultDataPreprocessor, decoder: any DCloudUniappRuntime.DataDecoder = JSONDecoder(), emptyResponseCodes: Swift.Set<Swift.Int> = DecodableResponseSerializer<T>.defaultEmptyResponseCodes, emptyRequestMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = DecodableResponseSerializer<T>.defaultEmptyRequestMethods) -> DCloudUniappRuntime.DownloadResponsePublisher<T> where T : Swift.Decodable
}
@available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
extension DCloudUniappRuntime.DownloadResponsePublisher where Value == Foundation.URL? {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public init(_ request: DCloudUniappRuntime.DownloadRequest, queue: Dispatch.DispatchQueue)
}
extension DCloudUniappRuntime.DownloadRequest {
  @available(macOS 10.15, iOS 13, watchOS 6, tvOS 13, *)
  public func publishUnserialized(on queue: Dispatch.DispatchQueue = .main) -> DCloudUniappRuntime.DownloadResponsePublisher<Foundation.URL?>
}
public protocol INodeData {
  var id: Swift.String { get }
  var name: Swift.String { get }
  var attrs: Swift.Dictionary<Swift.String, Any> { get }
  var style: Swift.Dictionary<Swift.String, Any> { get }
  static func formDictionary(_ dict: Swift.Dictionary<Swift.String, Any>) -> any DCloudUniappRuntime.INodeData
}
public protocol IUniAppDelegate {
  static func shared() -> any DCloudUniappRuntime.IUniAppDelegate
  var appConfig: any DCloudUniappRuntime.AppConfig { get set }
  func onCreate(port: any DCloudUniappRuntime.UniApp)
  func onDestroy()
}
@_hasMissingDesignatedInitializers public class UniAppManager {
  public func getCurretApp() -> DCloudUniappRuntime.UniAppImpl?
  public func create()
  public func destroy()
  public func visit(_ visitor: (any DCloudUniappRuntime.UniApp) -> Swift.Void)
  @discardableResult
  public func createApp(appid: Swift.String) -> (any DCloudUniappRuntime.UniApp)?
  public func destroy(withAppId appId: Swift.String)
  public func restart(withAppId appId: Swift.String)
  public func foreground(withAppId appId: Swift.String)
  public func destroyApp(_ app: any DCloudUniappRuntime.UniApp)
  public func foregroundApp(_ app: any DCloudUniappRuntime.UniApp)
  public func getAppById(_ appid: Swift.String) -> (any DCloudUniappRuntime.UniApp)?
  @objc deinit
}
public protocol AuthenticationCredential {
  var requiresRefresh: Swift.Bool { get }
}
public protocol Authenticator : AnyObject {
  associatedtype Credential : DCloudUniappRuntime.AuthenticationCredential
  func apply(_ credential: Self.Credential, to urlRequest: inout Foundation.URLRequest)
  func refresh(_ credential: Self.Credential, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Self.Credential, any Swift.Error>) -> Swift.Void)
  func didRequest(_ urlRequest: Foundation.URLRequest, with response: Foundation.HTTPURLResponse, failDueToAuthenticationError error: any Swift.Error) -> Swift.Bool
  func isRequest(_ urlRequest: Foundation.URLRequest, authenticatedWith credential: Self.Credential) -> Swift.Bool
}
public enum AuthenticationError : Swift.Error {
  case missingCredential
  case excessiveRefresh
  public static func == (a: DCloudUniappRuntime.AuthenticationError, b: DCloudUniappRuntime.AuthenticationError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class AuthenticationInterceptor<AuthenticatorType> : DCloudUniappRuntime.RequestInterceptor where AuthenticatorType : DCloudUniappRuntime.Authenticator {
  public typealias Credential = AuthenticatorType.Credential
  public struct RefreshWindow {
    public let interval: Foundation.TimeInterval
    public let maximumAttempts: Swift.Int
    public init(interval: Foundation.TimeInterval = 30.0, maximumAttempts: Swift.Int = 5)
  }
  public var credential: DCloudUniappRuntime.AuthenticationInterceptor<AuthenticatorType>.Credential? {
    get
    set
  }
  public init(authenticator: AuthenticatorType, credential: DCloudUniappRuntime.AuthenticationInterceptor<AuthenticatorType>.Credential? = nil, refreshWindow: DCloudUniappRuntime.AuthenticationInterceptor<AuthenticatorType>.RefreshWindow? = RefreshWindow())
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
  public func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class UTSiOS : ObjectiveC.NSObject {
  public class func getCurrentViewController() -> UIKit.UIViewController
  public class func getKeyWindow() -> UIKit.UIWindow
  public class func colorWithString(_ value: Swift.String) -> UIKit.UIColor
  public class func getResourcePath(_ resourceName: Swift.String) -> Swift.String
  public class func isSimulator() -> Swift.Bool
  public class func getDeviceId() -> Swift.String
  public class func getModel() -> Swift.String
  public class func getUserAgent() -> Swift.String
  public class func getAppId() -> Swift.String
  public class func getDataPath() -> Swift.String
  public class func isUniAppX() -> Swift.Bool
  public class func isUniMp() -> Swift.Bool
  public class func getAppName() -> Swift.String
  public class func getAppVersion() -> Swift.String
  public class func getAppVersionCode() -> Swift.String
  public class func getOsLanguage() -> Swift.String
  public class func getAppWgtVersion() -> Swift.String
  public class func getHostLanguage() -> Swift.String
  public class func getHostVersion() -> Swift.String
  public class func getHostName() -> Swift.String
  public class func getHostPackageName() -> Swift.String
  public class func getHostTheme() -> Swift.String
  public class func getInnerVersion() -> Swift.String
  public class func getSystemSetting() -> [Swift.String : Any]
  public class func getAppAuthorizeSetting() -> [Swift.String : Any]
  public class func getRuntimeVersion() -> Swift.String
  public class func getCompileVersion() -> Swift.String
  public class func getStatusBarHeight() -> Foundation.NSNumber
  public class func getSafeAreaInsets() -> [Swift.String : Any]
  public class func getWindowInfo() -> [Swift.String : Any]
  public class func isRoot() -> Swift.Bool
  public class func getGgbs() -> Swift.String
  public class func convertString(_ value: Any) -> Swift.String
  public class func convertBool(_ value: Any) -> Swift.Bool
  public class func convertNumber(_ value: Any) -> Foundation.NSNumber
  public class func convertDouble(_ value: Any) -> Swift.Double
  public class func convertFloat(_ value: Any) -> Swift.Float
  public class func convertInt(_ value: Any) -> Swift.Int
  public class func convertArray(_ value: Any) -> [Any]
  public class func convertDictionary(_ value: Any) -> [Swift.String : Any]
  public class func dc_AESDecrypt(data: Foundation.Data, key: Swift.String) -> Foundation.Data?
  public class func getCookieString(_ url: Foundation.URL) -> Swift.String
  public class func lockScreen()
  public class func unlockScreen()
  public class func isScreenLocked() -> Swift.Bool
  public class func setFullScreen(_ fullScreen: Swift.Bool)
  public class func setHomeIndicatorAutoHidden(_ isHidden: Swift.Bool)
  public class func setTempOrientation(_ orientation: UIKit.UIInterfaceOrientationMask)
  public class func configSupportOrientation(_ orientation: UIKit.UIInterfaceOrientation) -> Swift.Bool
  public class func setDeviceInterfaceOrientation(_ orientation: UIKit.UIInterfaceOrientation)
  public class func loadImage(_ url: Swift.String, _ complete: @escaping (UIKit.UIImage) -> Swift.Void)
  public class func getResourceAbsolutePath(_ h5Path: Swift.String, _ basePath: Swift.String?) -> Swift.String
  public class func getWorkRootPath() -> Swift.String
  public class func isBaseIpa() -> Swift.Bool
  public class func getMediaCacheDir() -> Swift.String
  public class func typeof(_ value: Any?) -> Swift.String
  public class func instanceof<T>(_ value: Any?, _ type: T.Type) -> Swift.Bool
  public class func consoleDebugError<T>(_ res: T?, _ info: Swift.String) -> T?
  public static func getVideoCacheDir() -> Swift.String
  public static func convert2AbsFullPath(_ path: Swift.String) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension DCloudUniappRuntime.UniKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public var toolbar: DCloudUniappRuntime.UniIQToolbar {
    get
  }
  @_Concurrency.MainActor public var hidePlaceholder: Swift.Bool {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var placeholder: Swift.String? {
    get
    set(newValue)
  }
  @_Concurrency.MainActor public var drawingPlaceholder: Swift.String? {
    get
  }
  @_Concurrency.MainActor public func addToolbar(target: Swift.AnyObject?, previousConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, nextConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, rightConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addDone(target: Swift.AnyObject?, action: ObjectiveC.Selector, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addDone(target: Swift.AnyObject?, action: ObjectiveC.Selector, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightButton(target: Swift.AnyObject?, configuration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightButton(target: Swift.AnyObject?, configuration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightLeft(target: Swift.AnyObject?, rightConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, leftConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addRightLeft(target: Swift.AnyObject?, rightConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, leftConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextRight(target: Swift.AnyObject?, previousConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, nextConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, rightConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextRight(target: Swift.AnyObject?, previousConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, nextConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration? = nil, rightConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextDone(target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, showPlaceholder: Swift.Bool = false, titleAccessibilityLabel: Swift.String? = nil)
  @_Concurrency.MainActor public func addPreviousNextDone(target: Swift.AnyObject?, previousAction: ObjectiveC.Selector, nextAction: ObjectiveC.Selector, doneAction: ObjectiveC.Selector, title: Swift.String?, titleAccessibilityLabel: Swift.String? = nil)
}
@objc public protocol DrawableContext : JavaScriptCore.JSExport {
  @objc var fillStyle: Swift.String? { get set }
  @objc var font: Any { get set }
  @objc var lineCap: Swift.String? { get set }
  @objc var lineDashOffset: CoreFoundation.CGFloat { get set }
  @objc var lineJoin: Swift.String? { get set }
  @objc var lineWidth: Any { get set }
  @objc var strokeStyle: Swift.String? { get set }
  @objc var textAlign: Swift.String? { get set }
  @objc func reset()
  @objc func update()
  @objc func beginPath()
  @objc func moveTo(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  @objc func lineTo(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  @objc func arc(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ radius: CoreFoundation.CGFloat, _ startAngle: CoreFoundation.CGFloat, _ endAngle: CoreFoundation.CGFloat, _ counterclockwise: Swift.Bool)
  @objc func arcTo(_ x1: CoreFoundation.CGFloat, _ y1: CoreFoundation.CGFloat, _ x2: CoreFoundation.CGFloat, _ y2: CoreFoundation.CGFloat, _ radius: CoreFoundation.CGFloat)
  @objc func closePath()
  @objc func fill(_ fillRule: Swift.String)
  @objc func fillRect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc func fillText(_ text: Swift.String, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ maxWidth: CoreFoundation.CGFloat)
  @objc func rect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc func setLineDash(_ lengths: [CoreFoundation.CGFloat])
  @objc func stroke()
  @objc func strokeRect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc func strokeText(_ text: Swift.String, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ maxWidth: CoreFoundation.CGFloat)
  @objc func bezierCurveTo(_ x1: CoreFoundation.CGFloat, _ y1: CoreFoundation.CGFloat, _ x2: CoreFoundation.CGFloat, _ y2: CoreFoundation.CGFloat, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public protocol UniIQPlaceholderable : AnyObject {
  @_Concurrency.MainActor var placeholder: Swift.String? { get set }
  @_Concurrency.MainActor var attributedPlaceholder: Foundation.NSAttributedString? { get set }
}
@available(iOSApplicationExtension, unavailable)
extension UIKit.UITextField : DCloudUniappRuntime.UniIQPlaceholderable {
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextView : DCloudUniappRuntime.UniIQPlaceholderable {
}
@_hasMissingDesignatedInitializers public class UniDeviceInfo {
  public static let shared: DCloudUniappRuntime.UniDeviceInfo
  public var deviceModel: Swift.String {
    get
  }
  public var deviceId: Swift.String {
    get
  }
  public var systemLanguage: Swift.String {
    get
  }
  public var systemVersion: Swift.String {
    get
  }
  @objc deinit
}
public enum UniLogLevel : Swift.UInt {
  case off
  case error
  case warning
  case info
  case log
  case debug
  case all
  public init?(rawValue: Swift.UInt)
  public typealias RawValue = Swift.UInt
  public var rawValue: Swift.UInt {
    get
  }
}
public func UNISetLogLevel(_ level: DCloudUniappRuntime.UniLogLevel)
public func UNILog(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
public func UNILogDebug(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
public func UNILogInfo(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
public func UNILogWarning(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
public func UNILogError(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
public func UNILogPrint(_ msg: Swift.String, _ file: Swift.String? = nil, _ line: Swift.UInt? = #line)
@_hasMissingDesignatedInitializers public class UniEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniKeyEvent : DCloudUniappRuntime.UniEvent {
  public var keyCode: Swift.Int
  public var keyType: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniTouchEvent : DCloudUniappRuntime.UniEvent {
  public static let TOUCH_START: Swift.String
  public static let TOUCH_MOVE: Swift.String
  public static let TOUCH_END: Swift.String
  public static let TOUCH_CANCEL: Swift.String
  public static let LONG_PRESS: Swift.String
  @_hasMissingDesignatedInitializers public class Touch {
    @objc deinit
  }
  public var changedTouches: Swift.Array<DCloudUniappRuntime.UniTouchEvent.Touch>?
  public var touches: Swift.Array<DCloudUniappRuntime.UniTouchEvent.Touch>?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniMouseEvent : DCloudUniappRuntime.UniEvent {
  public static let ONCLICK: Swift.String
  public var x: Swift.Float
  public var y: Swift.Float
  public var clientX: Swift.Float
  public var clientY: Swift.Float
  public var pageX: Swift.Float
  public var pageY: Swift.Float
  public var screenX: Swift.Float
  public var screenY: Swift.Float
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPointerEvent : DCloudUniappRuntime.UniMouseEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPageEvent : DCloudUniappRuntime.UniEvent {
  public static let ON_READY: Swift.String
  public static let ON_UNLOAD: Swift.String
  public static let ON_HIDE: Swift.String
  public static let ON_SHOW: Swift.String
  public static let ON_RESIZE: Swift.String
  public static let ON_REACH_BOTTOM: Swift.String
  public static let PopGestrue: Swift.String
  public static let EVENT_ON_WEBVIEW_SERVICE_MESSAGE: Swift.String
  public static let ON_PULL_DOWN_REFRESH: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniAppEvent : DCloudUniappRuntime.UniEvent {
  public static let BACK: Swift.String
  public static let ON_SHOW: Swift.String
  public static let ON_HIDE: Swift.String
  public static let ON_EXIT: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniResizeEvent : DCloudUniappRuntime.UniPageEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniPageScrollEvent : DCloudUniappRuntime.UniPageEvent {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniWebViewServiceMessageEvent : DCloudUniappRuntime.UniPageEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniNativeToJSEvent : DCloudUniappRuntime.UniEvent {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniSubmitEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniResetEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @objc deinit
}
extension Foundation.URLRequest {
  public var method: DCloudUniappRuntime.HTTPMethod? {
    get
    set
  }
  public func validate() throws
}
@_inheritsConvenienceInitializers public class UniRequestFail : DCloudUTSFoundation.UniError {
  @objc override public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil)
  @objc override dynamic public init()
  @objc deinit
}
public struct UniRequestSuccess {
}
public struct UniRequestOptions {
}
@_hasMissingDesignatedInitializers public class UniNetManager {
  @objc deinit
}
extension DCloudUniappRuntime.UniNetManager {
  public static func request(options: DCloudUniappRuntime.UniRequestOptions, completeHandler: @escaping (DCloudUniappRuntime.UniRequestSuccess?, DCloudUniappRuntime.UniRequestFail?) -> Swift.Void)
}
public struct UniUploadFileOptionsFiles {
}
public struct UniUploadFileOptions {
}
public struct UniUploadFileSuccess {
}
@_inheritsConvenienceInitializers public class UniUploadFileFail : DCloudUTSFoundation.UniError {
  @objc override public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil)
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUniappRuntime.UniNetManager {
  public static func uploadFile(options: DCloudUniappRuntime.UniUploadFileOptions, progressHandler: ((Swift.Double) -> Swift.Void)?, completeHandler: @escaping (DCloudUniappRuntime.UniUploadFileSuccess?, DCloudUniappRuntime.UniUploadFileFail?) -> Swift.Void)
}
public struct UniDownloadFileOptions {
}
public protocol UniDocument : DCloudUniappRuntime.UniElement {
  var body: any DCloudUniappRuntime.UniElement { get }
  func getRealDomNodeById<T>(_ tag: Swift.String) -> T?
  func startRender()
  func startRender(_ callback: (() -> Swift.Void)?)
  func createElement(_ tagName: Swift.String) -> any DCloudUniappRuntime.UniElement
  func createElement(_ data: any DCloudUniappRuntime.INodeData) -> any DCloudUniappRuntime.UniElement
  func createComment(_ data: Swift.String) -> any DCloudUniappRuntime.UniCommentElement
  func notifyLayout()
  func runAsyncDomTask(_ fn: @escaping () -> (Any?), _ callback: @escaping (_ value: Any?) -> Swift.Void)
  func waitNativeRender(_ callback: @escaping () -> Swift.Void)
  func getElementById(_ id: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
}
public typealias IDocument = DCloudUniappRuntime.UniDocument
@_hasMissingDesignatedInitializers public class UniInputBlurEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class InputBlurEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniInputBlurEvent.InputBlurEventDetail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniInputFocusEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class InputFocusEventDetail {
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniInputFocusEvent.InputFocusEventDetail
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UniDrawable) @objcMembers public class UniDrawable : ObjectiveC.NSObject, DCloudUniappRuntime.DrawableContext {
  @objc public var fillStyle: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var font: Any
  @objc public var lineCap: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lineDashOffset: CoreFoundation.CGFloat
  @objc public var lineJoin: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var lineWidth: Any {
    @objc get
    @objc set
  }
  @objc public var strokeStyle: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var textAlign: Swift.String? {
    @objc get
    @objc set
  }
  @objc public func reset()
  @objc public func update()
  @objc public func beginPath()
  @objc public func moveTo(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  @objc public func lineTo(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  @objc public func arc(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ radius: CoreFoundation.CGFloat, _ startAngle: CoreFoundation.CGFloat, _ endAngle: CoreFoundation.CGFloat, _ counterclockwise: Swift.Bool = false)
  @objc public func arcTo(_ x1: CoreFoundation.CGFloat, _ y1: CoreFoundation.CGFloat, _ x2: CoreFoundation.CGFloat, _ y2: CoreFoundation.CGFloat, _ radius: CoreFoundation.CGFloat)
  @objc public func closePath()
  @objc public func fill(_ fillRule: Swift.String = "nonzero")
  @objc public func fillRect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc public func fillText(_ text: Swift.String, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ maxWidth: CoreFoundation.CGFloat = CGFloat.infinity)
  @objc public func strokeText(_ text: Swift.String, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ maxWidth: CoreFoundation.CGFloat = CGFloat.infinity)
  @objc public func rect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc public func setLineDash(_ lengths: [CoreFoundation.CGFloat])
  @objc public func stroke()
  @objc public func strokeRect(_ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat, _ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  @objc public func bezierCurveTo(_ x1: CoreFoundation.CGFloat, _ y1: CoreFoundation.CGFloat, _ x2: CoreFoundation.CGFloat, _ y2: CoreFoundation.CGFloat, _ x: CoreFoundation.CGFloat, _ y: CoreFoundation.CGFloat)
  @objc override dynamic public init()
  @objc deinit
}
public struct DOMRect : Swift.Equatable {
  public var x: Swift.Float
  public var y: Swift.Float
  public var width: Swift.Float
  public var height: Swift.Float
  public var top: Swift.Float {
    get
  }
  public var right: Swift.Float {
    get
  }
  public var bottom: Swift.Float {
    get
  }
  public var left: Swift.Float {
    get
  }
  public static func == (a: DCloudUniappRuntime.DOMRect, b: DCloudUniappRuntime.DOMRect) -> Swift.Bool
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public class UniIQTextFieldViewListener {
  @_Concurrency.MainActor public var textFieldView: UIKit.UIView? {
    get
  }
  @_Concurrency.MainActor public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewListener {
  public typealias TextFieldViewCompletion = (_ info: DCloudUniappRuntime.UniIQTextFieldViewInfo) -> Swift.Void
  @_Concurrency.MainActor public func registerTextFieldViewChange(identifier: Swift.AnyHashable, changeHandler: @escaping DCloudUniappRuntime.UniIQTextFieldViewListener.TextFieldViewCompletion)
  @_Concurrency.MainActor public func unregisterSizeChange(identifier: Swift.AnyHashable)
}
@_hasMissingDesignatedInitializers public class UniSDKEngine {
  public static let shared: DCloudUniappRuntime.UniSDKEngine
  public var deviceSize: (Swift.Float, Swift.Float)
  public func create()
  public func destroy()
  public func render(toView view: UIKit.UIView)
  public func getAppManager() -> DCloudUniappRuntime.UniAppManager?
  public func getContainerView() -> UIKit.UIView
  @discardableResult
  public func registerJsModule(name: Swift.String, cls: any JavaScriptCore.JSExport.Type) -> Swift.Bool
  @discardableResult
  public func registerUniComponent(type: Swift.String, nodeClazz: DCloudUniappRuntime.UniDomNodeConstructor?, componentCls: DCloudUniappRuntime.UniComponent.Type?) -> Swift.Bool
  @discardableResult
  public func registerExtComponent(type: Swift.String) -> Swift.Bool
  @objc deinit
}
extension DCloudUniappRuntime.UniSDKEngine {
  public class func getAppManager() -> DCloudUniappRuntime.UniAppManager
  public static func runOnDomQueue(runable: @escaping DCloudUniappRuntime.UniQueuerunable)
  public static func runOnMainQueue(runable: @escaping DCloudUniappRuntime.UniQueuerunable)
  public static func runOnJsQueue(runable: @escaping DCloudUniappRuntime.UniQueuerunable)
  public static func isDomQueue() -> Swift.Bool
  public static func isJsQueue() -> Swift.Bool
  public static func isMainQueue() -> Swift.Bool
  public static func runOnMainAsyncAfter(delayInSeconds: Swift.Double, runable: @escaping () -> Swift.Void)
  public static func getJSElementById(_ elementId: Swift.String, _ pageId: Swift.String? = nil) -> (any JavaScriptCore.JSExport)?
}
extension DCloudUniappRuntime.UniSDKEngine {
  public static func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?)
  public static func didFailToRegisterForRemoteNotifications(_ error: (any Swift.Error)?)
  public static func didRegisterForRemoteNotifications(_ deviceToken: Foundation.Data?)
  public static func applicationOpenURLOptions(_ application: UIKit.UIApplication?, _ url: Foundation.URL, _ options: [UIKit.UIApplication.OpenURLOptionsKey : Any]?)
  public static func applicationWillResignActive(_ application: UIKit.UIApplication?)
  public static func applicationDidBecomeActive(_ application: UIKit.UIApplication?)
  public static func applicationDidEnterBackground(_ application: UIKit.UIApplication?)
  public static func applicationWillEnterForeground(_ application: UIKit.UIApplication?)
  public static func applicationContinueUserActivityRestorationHandler(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: @escaping ([any UIKit.UIUserActivityRestoring]?) -> Swift.Void)
}
@_hasMissingDesignatedInitializers public class UniAppResource {
  @objc deinit
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc open class UniIQTextView : UIKit.UITextView {
  @_Concurrency.MainActor @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor @objc override dynamic public init(frame: CoreFoundation.CGRect, textContainer: UIKit.NSTextContainer?)
  @_Concurrency.MainActor @objc override dynamic open func awakeFromNib()
  @objc @IBInspectable @_Concurrency.MainActor open var placeholderTextColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor open var placeholder: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  @_Concurrency.MainActor @objc override dynamic open func layoutSubviews()
  @_Concurrency.MainActor @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override weak dynamic open var delegate: (any UIKit.UITextViewDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @objc override dynamic open var intrinsicContentSize: CoreFoundation.CGSize {
    @objc get
  }
  @_Concurrency.MainActor @objc override dynamic open func caretRect(for position: UIKit.UITextPosition) -> CoreFoundation.CGRect
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQKeyboardReturnKeyHandler : UIKit.UITextFieldDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldBeginEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldDidEndEditing(_ textField: UIKit.UITextField, reason: UIKit.UITextField.DidEndEditingReason)
  @_Concurrency.MainActor(unsafe) @objc final public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldClear(_ textField: UIKit.UITextField) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
extension DCloudUniappRuntime.Request {
  public typealias ValidationResult = Swift.Result<Swift.Void, any Swift.Error>
}
extension DCloudUniappRuntime.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> DCloudUniappRuntime.DataRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension DCloudUniappRuntime.DataStreamRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse) -> DCloudUniappRuntime.DataStreamRequest.ValidationResult
  @discardableResult
  final public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  final public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  final public func validate() -> Self
}
extension DCloudUniappRuntime.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ fileURL: Foundation.URL?) -> DCloudUniappRuntime.DownloadRequest.ValidationResult
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: @autoclosure @escaping () -> S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
@objc public protocol UTSiOSHookProxy {
  @objc optional func onCreate()
  @objc optional func applicationDidFinishLaunchingWithOptions(_ application: UIKit.UIApplication?, _ launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]?) -> Swift.Bool
  @objc optional func didRegisterForRemoteNotifications(_ deviceToken: Foundation.Data?)
  @objc optional func didFailToRegisterForRemoteNotifications(_ error: (any Swift.Error)?)
  @objc optional func applicationOpenURLOptions(_ application: UIKit.UIApplication?, _ url: Foundation.URL, _ options: [UIKit.UIApplication.OpenURLOptionsKey : Any]?) -> Swift.Bool
  @objc optional func applicationWillResignActive(_ application: UIKit.UIApplication?)
  @objc optional func applicationDidBecomeActive(_ application: UIKit.UIApplication?)
  @objc optional func applicationDidEnterBackground(_ application: UIKit.UIApplication?)
  @objc optional func applicationWillEnterForeground(_ application: UIKit.UIApplication?)
  @objc optional func applicationContinueUserActivityRestorationHandler(_ application: UIKit.UIApplication?, _ userActivity: Foundation.NSUserActivity?, _ restorationHandler: @escaping ([any UIKit.UIUserActivityRestoring]?) -> Swift.Void) -> Swift.Bool
}
@_inheritsConvenienceInitializers @objc(UTSiOSHookProxyManager) @objcMembers public class UTSiOSHookProxyManager : ObjectiveC.NSObject {
  @objc public static func addProxy(_ proxy: any DCloudUniappRuntime.UTSiOSHookProxy)
  @objc override dynamic public init()
  @objc deinit
}
public protocol AppConfig {
  var name: Swift.String { get set }
  var appid: Swift.String { get set }
  var versionName: Swift.String { get set }
  var versionCode: Swift.String { get set }
  var innerVersion: Swift.String { get set }
  var compilerVersion: Swift.String { get set }
  var allowsInlineMediaPlayback: Swift.Bool { get set }
  var mediaPlaybackRequiresUserAction: Swift.Bool { get set }
  var allowFileAccessFromFileURLs: Swift.Bool { get set }
  var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask { get set }
  var tempOrientation: UIKit.UIInterfaceOrientationMask { get set }
  var lockScreen: Swift.Bool { get set }
  var statusBarStyle: UIKit.UIStatusBarStyle { get set }
  func setStatusBarStyle(style: UIKit.UIStatusBarStyle)
  func parseManifest(path: Swift.String)
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @available(*, unavailable, renamed: "resignOnTouchOutside")
  @objc @_Concurrency.MainActor final public var shouldResignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "playInputClicks")
  @objc @_Concurrency.MainActor final public var shouldPlayInputClicks: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This feature has been removed due to few compatibility problems")
  @objc @_Concurrency.MainActor final public func registerTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
  @available(*, unavailable, message: "This feature has been removed due to few compatibility problems")
  @objc @_Concurrency.MainActor final public func unregisterTextFieldViewClass(_ aClass: UIKit.UIView.Type, didBeginEditingNotificationName: Swift.String, didEndEditingNotificationName: Swift.String)
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.manageBehavior")
  @objc @_Concurrency.MainActor final public var toolbarManageBehaviour: DCloudUniappRuntime.UniIQAutoToolbarManageBehavior {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.useTextFieldTintColor")
  @objc @_Concurrency.MainActor final public var shouldToolbarUsesTextFieldTintColor: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.tintColor")
  @objc @_Concurrency.MainActor final public var toolbarTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.barTintColor")
  @objc @_Concurrency.MainActor final public var toolbarBarTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousNextDisplayMode")
  @objc @_Concurrency.MainActor final public var previousNextDisplayMode: DCloudUniappRuntime.UniIQPreviousNextDisplayMode {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.previousBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.previousBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarPreviousBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.nextBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.nextBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarNextBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.image", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.title", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.doneBarButtonConfiguration.accessibilityLabel", message: "To change, please assign a new toolbarConfiguration.doneBarButtonConfiguration")
  @objc @_Concurrency.MainActor final public var toolbarDoneBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.accessibilityLabel")
  @objc @_Concurrency.MainActor final public var toolbarTitlBarButtonItemAccessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.showPlaceholder")
  @objc @_Concurrency.MainActor final public var shouldShowToolbarPlaceholder: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.font")
  @objc @_Concurrency.MainActor final public var placeholderFont: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.color")
  @objc @_Concurrency.MainActor final public var placeholderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "toolbarConfiguration.placeholderConfiguration.buttonColor")
  @objc @_Concurrency.MainActor final public var placeholderButtonColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @available(*, unavailable, renamed: "keyboardConfiguration.overrideAppearance")
  @objc @_Concurrency.MainActor final public var overrideKeyboardAppearance: Swift.Bool {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "keyboardConfiguration.appearance")
  @objc @_Concurrency.MainActor final public var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
    @objc set
  }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  public typealias SizeBlock = (_ size: CoreFoundation.CGSize) -> Swift.Void
  @available(*, unavailable, message: "This feature has been moved to UniKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public func registerKeyboardSizeChange(identifier: Swift.AnyHashable, sizeHandler: @escaping DCloudUniappRuntime.UniKeyboardManager.SizeBlock)
  @available(*, unavailable, message: "This feature has been moved to UniKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public func unregisterKeyboardSizeChange(identifier: Swift.AnyHashable)
  @available(*, unavailable, message: "This feature has been moved to UniKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public var keyboardShowing: Swift.Bool {
    @objc get
  }
  @available(*, unavailable, message: "This feature has been moved to UniKeyboardListener, use it directly by creating new instance")
  @objc @_Concurrency.MainActor final public var keyboardFrame: CoreFoundation.CGRect {
    @objc get
  }
}
@_inheritsConvenienceInitializers @objc(UTSDomNode) @objcMembers public class UTSDomNode : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(UniElementImpl) @objcMembers open class UniElementImpl : DCloudUniappRuntime.UniElementPropsNode, DCloudUniappRuntime.UniElement {
  @objc public var id: Swift.String
  @objc public var tagType: Swift.String
  @objc public var attributes: [Swift.String : Any]
  public var style: DCloudUniappRuntime.CSSStyleDeclaration
  @objc public var component: DCloudUniappRuntime.UniComponent?
  public static func constructor(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData) -> DCloudUniappRuntime.UniElementImpl
  @objc deinit
  required public init(context: any DCloudUniappRuntime.IPageContext, data: any DCloudUniappRuntime.INodeData)
  public func appendChild(_ child: any DCloudUniappRuntime.UniElement)
  public func insertBefore(_ child: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  public func insertBefore(_ child: any DCloudUniappRuntime.UniElement, _ anchor: (any DCloudUniappRuntime.UniElement)?) -> (any DCloudUniappRuntime.UniElement)?
  public func removeChild(_ child: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  public func cloneNode() -> any DCloudUniappRuntime.UniElement
  public func contains(_ otherNode: any DCloudUniappRuntime.UniElement) -> Swift.Bool
  @objc public func hasChildNodes() -> Swift.Bool
  public func isEqualNode(_ otherNode: any DCloudUniappRuntime.UniElement) -> Swift.Bool
  public func replaceChild(_ newChild: any DCloudUniappRuntime.UniElement, _ oldChild: any DCloudUniappRuntime.UniElement) -> (any DCloudUniappRuntime.UniElement)?
  @objc public func getAttribute(_ attributeName: Swift.String) -> Swift.String?
  @objc public func getAttributeNames() -> Swift.Array<Swift.String>
  public func getBoundingClientRect() -> DCloudUniappRuntime.DOMRect
  @objc public func hasAttribute(_ attName: Swift.String) -> Swift.Bool
  @objc public func removeAttribute(_ attrName: Swift.String)
  @discardableResult
  public func addEventListener<T>(_ type: Swift.String, _ listener: @escaping DCloudUniappRuntime.UniEventListenerCallback<T>) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  public func removeEventListener(_ type: Swift.String, _ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  public func dispatchEvent<T>(_ type: Swift.String, _ value: T) where T : DCloudUniappRuntime.UniEvent
  @discardableResult
  public func addTouchEventListener<T>(_ type: Swift.String, _ listener: @escaping DCloudUniappRuntime.UniEventListenerCallback<T>) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  @discardableResult
  public func addClickEventListener<T>(_ listener: @escaping DCloudUniappRuntime.UniEventListenerCallback<T>) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  public func removeEventListener(_ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  @objc public func removeEventListener(_ type: Swift.String)
  @objc public func removeEventListener(identify: Swift.String)
  @objc public func setAttribute(_ key: Swift.String, _ value: Swift.String)
  @objc public func blur()
  @objc public func click()
  @objc public func focus()
  @objc public func syncStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  @objc public func updateAttrs(_ attrs: Swift.Dictionary<Swift.String, Any>)
  @objc public func updateStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  @objc public var tagName: Swift.String {
    @objc get
  }
  @objc public var nodeName: Swift.String? {
    @objc get
  }
  public var childNodes: [any DCloudUniappRuntime.UniElement] {
    get
  }
  public var firstChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var lastChild: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  @objc public var isConnected: Swift.Bool {
    @objc get
  }
  public var parentNode: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  @objc public var clientLeft: Swift.Float {
    @objc get
  }
  @objc public var clientTop: Swift.Float {
    @objc get
  }
  @objc public var clientWidth: Swift.Float {
    @objc get
  }
  @objc public var clientHeight: Swift.Float {
    @objc get
  }
  @objc public var innerHTML: Swift.String?
  public var nextElementSibling: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var previousElementSibling: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var previousSibling: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var nextSibling: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  @objc public func remove()
  @objc public var lazy: Swift.Bool
  @objc public func getNodeId() -> Swift.String
  public func getStyleMap() -> Swift.Dictionary<Swift.String, Any?>
  @objc public func getAttributeMap() -> Swift.Dictionary<Swift.String, Any>
  @objc public func syncUpdateStyle(_ style: Swift.Dictionary<Swift.String, Any>)
  public func getChildNodeAt(_ position: Swift.Int) -> (any DCloudUniappRuntime.UniElement)?
  @objc public func getChildCount() -> Swift.Int
  @objc public func getWidth() -> Swift.Float
  @objc public func getHeight() -> Swift.Float
  @objc public func getX() -> Swift.Float
  @objc public func getY() -> Swift.Float
  public func invoke(_ method: Swift.String, _ arguments: Any...) -> Any?
  @objc public func getDrawableContext() -> (any DCloudUniappRuntime.DrawableContext)?
  @objc public func setNeedLayout()
  @objc override dynamic public func dirty()
  @objc public var classList: [Swift.String]
  public var ext: [Swift.String : Any?]
  public var dataset: DCloudUniappRuntime.UniStringOptionAnyMap
  public var parentElement: (any DCloudUniappRuntime.UniElement)? {
    get
  }
  public var children: [any DCloudUniappRuntime.UniElement] {
    get
  }
  @objc public var scrollWidth: Foundation.NSNumber {
    @objc get
  }
  @objc public var scrollHeight: Foundation.NSNumber {
    @objc get
  }
  @objc public var scrollLeft: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var scrollTop: Foundation.NSNumber {
    @objc get
    @objc set(value)
  }
  @objc public var offsetLeft: Foundation.NSNumber {
    @objc get
  }
  @objc public var offsetTop: Foundation.NSNumber {
    @objc get
  }
  @objc public var offsetWidth: Foundation.NSNumber {
    @objc get
  }
  @objc public var offsetHeight: Foundation.NSNumber {
    @objc get
  }
  @objc public func setAnyAttribute(_ key: Swift.String, _ value: Any)
  @objc public func getAnyAttribute(_ key: Swift.String) -> Any?
  public func addEventListener<T, R>(_ type: Swift.String, _ callback: @escaping (T) -> R) -> DCloudUniappRuntime.UniCallbackWrapper where T : DCloudUniappRuntime.UniEvent
  @objc public func scrollTo(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  @objc public func scrollBy(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber)
  public func querySelector(_ selector: Swift.String) -> (any DCloudUniappRuntime.UniElement)?
  public func querySelectorAll(_ selector: Swift.String) -> [any DCloudUniappRuntime.UniElement]?
  public func takeSnapshot(_ options: DCloudUniappRuntime.TakeSnapshotOptions)
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniIQToolbarConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var useTextFieldTintColor: Swift.Bool
  @objc @_Concurrency.MainActor final public var tintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var barTintColor: UIKit.UIColor?
  @objc @_Concurrency.MainActor final public var previousNextDisplayMode: DCloudUniappRuntime.UniIQPreviousNextDisplayMode
  @objc @_Concurrency.MainActor final public var manageBehavior: DCloudUniappRuntime.UniIQAutoToolbarManageBehavior
  @objc @_Concurrency.MainActor final public var previousBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public var nextBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public var doneBarButtonConfiguration: DCloudUniappRuntime.UniIQBarButtonItemConfiguration?
  @objc @_Concurrency.MainActor final public let placeholderConfiguration: DCloudUniappRuntime.UniIQToolbarPlaceholderConfiguration
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
@objc public enum UniIQAutoToolbarManageBehavior : Swift.Int {
  case bySubviews
  case byTag
  case byPosition
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum UniIQPreviousNextDisplayMode : Swift.Int {
  case `default`
  case alwaysHide
  case alwaysShow
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
@objc public enum UniIQEnableMode : Swift.Int {
  case `default`
  case enabled
  case disabled
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @_Concurrency.MainActor final public var movedDistance: CoreFoundation.CGFloat {
    get
  }
  @objc @_Concurrency.MainActor final public var movedDistanceChanged: ((CoreFoundation.CGFloat) -> Swift.Void)? {
    @objc get
    @objc set(newValue)
  }
}
@_hasMissingDesignatedInitializers public class ViewToTempFilePathSuccess {
  public func toJsObject() -> [Swift.String : Any]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ViewToTempFilePathFail {
  public func toJsObject() -> [Swift.String : Any]
  @objc deinit
}
public struct ViewToTempFilePathOptions {
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniKeyboardManager : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public static let shared: DCloudUniappRuntime.UniKeyboardManager
  @objc @_Concurrency.MainActor final public var enable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public var keyboardDistanceFromTextField: CoreFoundation.CGFloat
  @objc @_Concurrency.MainActor final public var enableAutoToolbar: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public let toolbarConfiguration: DCloudUniappRuntime.UniIQToolbarConfiguration
  @objc @_Concurrency.MainActor final public let keyboardConfiguration: DCloudUniappRuntime.UniKeyboardConfiguration
  @objc @_Concurrency.MainActor final public var resignOnTouchOutside: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor final public var resignFirstResponderGesture: UIKit.UITapGestureRecognizer {
    @objc get
    @objc set
  }
  @discardableResult
  @objc @_Concurrency.MainActor final public func resignFirstResponder() -> Swift.Bool
  @objc @_Concurrency.MainActor final public var playInputClicks: Swift.Bool
  @objc @_Concurrency.MainActor final public var layoutIfNeededOnUpdate: Swift.Bool
  @objc @_Concurrency.MainActor final public var disabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledDistanceHandlingClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var disabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledToolbarClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var toolbarPreviousNextAllowedClasses: [UIKit.UIView.Type]
  @objc @_Concurrency.MainActor final public var disabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var enabledTouchResignedClasses: [UIKit.UIViewController.Type]
  @objc @_Concurrency.MainActor final public var touchResignedGestureIgnoreClasses: [UIKit.UIView.Type]
  @objc deinit
  @objc @_Concurrency.MainActor final public func reloadLayoutIfNeeded()
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol UniPage : AnyObject {
  var pageUrl: Swift.String { get }
  var pageId: Swift.String { get }
  var document: any DCloudUniappRuntime.UniDocument { get }
  func startRender()
  func startRender(_ callback: (() -> Swift.Void)?)
  func show(_ options: Swift.Dictionary<Swift.String, Any?>?, _ callback: (() -> Swift.Void)?)
  func show(_ options: Swift.Dictionary<Swift.String, Any?>?)
  func close(_ options: Swift.Dictionary<Swift.String, Any?>?, _ callback: (() -> Swift.Void)?)
  func close(_ options: Swift.Dictionary<Swift.String, Any?>?)
  func updateStyle(_ style: Swift.Dictionary<Swift.String, Any?>)
  func createDocument(_ documentData: any DCloudUniappRuntime.INodeData) -> any DCloudUniappRuntime.UniDocument
  func addPageEventListener(_ type: Swift.String, _ callback: @escaping (_ event: DCloudUniappRuntime.UniPageEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  func addPageScrollEventListener(_ callback: @escaping (_ event: DCloudUniappRuntime.UniPageScrollEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  func viewToTempFilePath(_ options: DCloudUniappRuntime.ViewToTempFilePathOptions)
  func loadFontFace(_ options: DCloudUniappRuntime.NativeLoadFontFaceOptions)
  func startPullDownRefresh(_ options: DCloudUniappRuntime.PullDownRefreshOptions)
  func stopPullDownRefresh(_ options: DCloudUniappRuntime.PullDownRefreshOptions)
  func setEnablePullDownRefresh(_ enable: Swift.Bool)
  func getPageRenderDuration() -> Foundation.NSNumber
  func getPageLayoutDuration() -> Foundation.NSNumber
  func getPageRenderCount() -> Foundation.NSNumber
  func getPageLayoutCount() -> Foundation.NSNumber
  func getFirstRenderStartTime() -> Foundation.NSNumber
  func getFirstLayoutStartTime() -> Foundation.NSNumber
  func getFirstPageRenderDuration() -> Foundation.NSNumber
  func getFirstPageLayoutDuration() -> Foundation.NSNumber
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public class UniKeyboardListener {
  @_Concurrency.MainActor public var keyboardShowing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public var frame: CoreFoundation.CGRect {
    get
  }
  @_Concurrency.MainActor public init()
  @_Concurrency.MainActor public func animate(alongsideTransition transition: @escaping () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardListener {
  public typealias SizeCompletion = (_ name: DCloudUniappRuntime.UniKeyboardInfo.Name, _ size: CoreFoundation.CGSize) -> Swift.Void
  @_Concurrency.MainActor public func registerSizeChange(identifier: Swift.AnyHashable, changeHandler: @escaping DCloudUniappRuntime.UniKeyboardListener.SizeCompletion)
  @_Concurrency.MainActor public func unregisterSizeChange(identifier: Swift.AnyHashable)
}
@_hasMissingDesignatedInitializers public class UniSwitchChangeEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var value: Swift.Bool
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniSwitchChangeEvent.Detail
  @objc deinit
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
public struct DeflateRequestCompressor : DCloudUniappRuntime.RequestInterceptor {
  public enum DuplicateHeaderBehavior {
    case error
    case replace
    case skip
    public static func == (a: DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior, b: DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct DuplicateHeaderError : Swift.Error {
  }
  public let duplicateHeaderBehavior: DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior
  public let shouldCompressBodyData: (_ bodyData: Foundation.Data) -> Swift.Bool
  public init(duplicateHeaderBehavior: DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior = .error, shouldCompressBodyData: @escaping (_ bodyData: Foundation.Data) -> Swift.Bool = { _ in true })
  public func adapt(_ urlRequest: Foundation.URLRequest, for session: DCloudUniappRuntime.Session, completion: @escaping (Swift.Result<Foundation.URLRequest, any Swift.Error>) -> Swift.Void)
}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.RequestInterceptor where Self == DCloudUniappRuntime.DeflateRequestCompressor {
  public static var deflateCompressor: DCloudUniappRuntime.DeflateRequestCompressor {
    get
  }
  public static func deflateCompressor(duplicateHeaderBehavior: DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior = .error, shouldCompressBodyData: @escaping (_ bodyData: Foundation.Data) -> Swift.Bool = { _ in true }) -> DCloudUniappRuntime.DeflateRequestCompressor
}
@_inheritsConvenienceInitializers @objc(ComponentPublicInstance) @objcMembers public class ComponentPublicInstance : ObjectiveC.NSObject {
  @objc public var nodeId: Swift.String
  @objc public var pageId: Swift.String
  @objc public func __$$el(_ id: Swift.String) -> (any JavaScriptCore.JSExport)?
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  @objc deinit
}
open class RetryPolicy : DCloudUniappRuntime.RequestInterceptor {
  public static let defaultRetryLimit: Swift.UInt
  public static let defaultExponentialBackoffBase: Swift.UInt
  public static let defaultExponentialBackoffScale: Swift.Double
  public static let defaultRetryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  public static let defaultRetryableHTTPStatusCodes: Swift.Set<Swift.Int>
  public static let defaultRetryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  final public let retryLimit: Swift.UInt
  final public let exponentialBackoffBase: Swift.UInt
  final public let exponentialBackoffScale: Swift.Double
  final public let retryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod>
  final public let retryableHTTPStatusCodes: Swift.Set<Swift.Int>
  final public let retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code>
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes)
  open func retry(_ request: DCloudUniappRuntime.Request, for session: DCloudUniappRuntime.Session, dueTo error: any Swift.Error, completion: @escaping (DCloudUniappRuntime.RetryResult) -> Swift.Void)
  open func shouldRetry(request: DCloudUniappRuntime.Request, dueTo error: any Swift.Error) -> Swift.Bool
  @objc deinit
}
extension DCloudUniappRuntime.RequestInterceptor where Self == DCloudUniappRuntime.RetryPolicy {
  public static var retryPolicy: DCloudUniappRuntime.RetryPolicy {
    get
  }
  public static func retryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods, retryableHTTPStatusCodes: Swift.Set<Swift.Int> = RetryPolicy.defaultRetryableHTTPStatusCodes, retryableURLErrorCodes: Swift.Set<Foundation.URLError.Code> = RetryPolicy.defaultRetryableURLErrorCodes) -> DCloudUniappRuntime.RetryPolicy
}
open class ConnectionLostRetryPolicy : DCloudUniappRuntime.RetryPolicy {
  public init(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods)
  @objc deinit
}
extension DCloudUniappRuntime.RequestInterceptor where Self == DCloudUniappRuntime.ConnectionLostRetryPolicy {
  public static var connectionLostRetryPolicy: DCloudUniappRuntime.ConnectionLostRetryPolicy {
    get
  }
  public static func connectionLostRetryPolicy(retryLimit: Swift.UInt = RetryPolicy.defaultRetryLimit, exponentialBackoffBase: Swift.UInt = RetryPolicy.defaultExponentialBackoffBase, exponentialBackoffScale: Swift.Double = RetryPolicy.defaultExponentialBackoffScale, retryableHTTPMethods: Swift.Set<DCloudUniappRuntime.HTTPMethod> = RetryPolicy.defaultRetryableHTTPMethods) -> DCloudUniappRuntime.ConnectionLostRetryPolicy
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniIQBarButtonItemConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor public init(systemItem: UIKit.UIBarButtonItem.SystemItem, action: ObjectiveC.Selector? = nil)
  @objc @_Concurrency.MainActor public init(image: UIKit.UIImage, action: ObjectiveC.Selector? = nil)
  @objc @_Concurrency.MainActor public init(title: Swift.String, action: ObjectiveC.Selector? = nil)
  @_Concurrency.MainActor final public let systemItem: UIKit.UIBarButtonItem.SystemItem?
  @objc @_Concurrency.MainActor final public let image: UIKit.UIImage?
  @objc @_Concurrency.MainActor final public let title: Swift.String?
  @objc @_Concurrency.MainActor final public var action: ObjectiveC.Selector?
  @_Concurrency.MainActor @objc override final public var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
}
extension DCloudUniappRuntime.UniView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
}
@_hasMissingDesignatedInitializers public class UniPageImpl : DCloudUniappRuntime.UniPage {
  public static let STYLE_KEY_NAV_BAR: Swift.String
  public var pageUrl: Swift.String
  public var styles: [Swift.String : Any?]
  public var pageId: Swift.String
  public var navigationBar: (any DCloudUniappRuntime.INavigationBar)?
  public func create()
  @objc deinit
  public func getId() -> Swift.String
  public func addEventListener(_ eventType: Swift.String, _ listener: @escaping (DCloudUniappRuntime.UniPageEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  public func removeEventListener(_ eventType: Swift.String, _ listener: DCloudUniappRuntime.UniCallbackWrapper)
  public func removeEventListener(identify: Swift.String)
  public func dispatchEvent(_ type: Swift.String, _ value: DCloudUniappRuntime.UniPageEvent)
  public func dispatchEvent(_ event: DCloudUniappRuntime.UniPageEvent)
  public func startRender(_ callback: (() -> Swift.Void)? = nil)
  public func getContainerView() -> UIKit.UIView
  public func destroy()
  public func reload()
  public func updateStyle(_ style: Swift.Dictionary<Swift.String, Any?>)
  public func getDocument() -> any DCloudUniappRuntime.UniDocument
  public func createDocument(_ documentData: any DCloudUniappRuntime.INodeData) -> any DCloudUniappRuntime.UniDocument
  public func createDocument(_ documentData: Swift.Dictionary<Swift.String, Any?>) -> any DCloudUniappRuntime.UniDocument
  public var document: any DCloudUniappRuntime.UniDocument {
    get
  }
  public func startRender()
  public func show(_ options: Swift.Dictionary<Swift.String, Any?>?, _ callback: (() -> Swift.Void)?)
  public func show(_ options: Swift.Dictionary<Swift.String, Any?>?)
  public func close(_ options: Swift.Dictionary<Swift.String, Any?>?, _ callback: (() -> Swift.Void)?)
  public func close(_ options: Swift.Dictionary<Swift.String, Any?>?)
  public func addPageEventListener(_ type: Swift.String, _ callback: @escaping (DCloudUniappRuntime.UniPageEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  public func loadFontFace(_ options: DCloudUniappRuntime.NativeLoadFontFaceOptions)
  public func startPullDownRefresh(_ options: DCloudUniappRuntime.PullDownRefreshOptions)
  public func stopPullDownRefresh(_ options: DCloudUniappRuntime.PullDownRefreshOptions)
  public func setEnablePullDownRefresh(_ enable: Swift.Bool)
  public func getPageRenderDuration() -> Foundation.NSNumber
  public func getPageLayoutDuration() -> Foundation.NSNumber
  public func getPageRenderCount() -> Foundation.NSNumber
  public func getPageLayoutCount() -> Foundation.NSNumber
  public func getFirstRenderStartTime() -> Foundation.NSNumber
  public func getFirstLayoutStartTime() -> Foundation.NSNumber
  public func getFirstPageRenderDuration() -> Foundation.NSNumber
  public func getFirstPageLayoutDuration() -> Foundation.NSNumber
  public func addPageScrollEventListener(_ callback: @escaping (DCloudUniappRuntime.UniPageScrollEvent) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  public func viewToTempFilePath(_ options: DCloudUniappRuntime.ViewToTempFilePathOptions)
}
@_hasMissingDesignatedInitializers public class Page {
  @objc deinit
}
public func getCurrentPages() -> [DCloudUniappRuntime.Page]
public func UniEnsureDirExist(_ path: Swift.String)
extension DCloudUniappRuntime.UniConvert {
  public static func getBOOL(_ item: Any) -> Swift.Bool
  public static func getCGFloat(_ item: Any) -> CoreFoundation.CGFloat
  public static func getFloat(_ item: Any) -> Swift.Float
  public static func getUInteger(_ item: Any) -> Swift.UInt
  public static func getInteger(_ item: Any) -> Swift.Int
  public static func getString(_ item: Any) -> Swift.String?
  public static func getUIColor(_ item: Any) -> UIKit.UIColor?
  public static func getCGColor(_ item: Any) -> Swift.Unmanaged<CoreGraphics.CGColor>
  public static func getNSTextAlignment(_ item: Any) -> UIKit.NSTextAlignment
}
open class ServerTrustManager {
  final public let allHostsMustBeEvaluated: Swift.Bool
  final public let evaluators: [Swift.String : any DCloudUniappRuntime.ServerTrustEvaluating]
  public init(allHostsMustBeEvaluated: Swift.Bool = true, evaluators: [Swift.String : any DCloudUniappRuntime.ServerTrustEvaluating])
  open func serverTrustEvaluator(forHost host: Swift.String) throws -> (any DCloudUniappRuntime.ServerTrustEvaluating)?
  @objc deinit
}
public protocol ServerTrustEvaluating {
  func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
final public class DefaultTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public init(validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
final public class RevocationTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public struct Options : Swift.OptionSet {
    public static let crl: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public static let networkAccessDisabled: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public static let ocsp: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public static let preferCRL: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public static let requirePositiveResponse: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public static let any: DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public let rawValue: CoreFoundation.CFOptionFlags
    public init(rawValue: CoreFoundation.CFOptionFlags)
    public typealias ArrayLiteralElement = DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public typealias Element = DCloudUniappRuntime.RevocationTrustEvaluator.Options
    public typealias RawValue = CoreFoundation.CFOptionFlags
  }
  public init(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: DCloudUniappRuntime.RevocationTrustEvaluator.Options = .any)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension DCloudUniappRuntime.ServerTrustEvaluating where Self == DCloudUniappRuntime.RevocationTrustEvaluator {
  public static var revocationChecking: DCloudUniappRuntime.RevocationTrustEvaluator {
    get
  }
  public static func revocationChecking(performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true, options: DCloudUniappRuntime.RevocationTrustEvaluator.Options = .any) -> DCloudUniappRuntime.RevocationTrustEvaluator
}
final public class PinnedCertificatesTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public init(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension DCloudUniappRuntime.ServerTrustEvaluating where Self == DCloudUniappRuntime.PinnedCertificatesTrustEvaluator {
  public static var pinnedCertificates: DCloudUniappRuntime.PinnedCertificatesTrustEvaluator {
    get
  }
  public static func pinnedCertificates(certificates: [Security.SecCertificate] = Bundle.main.af.certificates, acceptSelfSignedCertificates: Swift.Bool = false, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> DCloudUniappRuntime.PinnedCertificatesTrustEvaluator
}
final public class PublicKeysTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public init(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true)
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension DCloudUniappRuntime.ServerTrustEvaluating where Self == DCloudUniappRuntime.PublicKeysTrustEvaluator {
  public static var publicKeys: DCloudUniappRuntime.PublicKeysTrustEvaluator {
    get
  }
  public static func publicKeys(keys: [Security.SecKey] = Bundle.main.af.publicKeys, performDefaultValidation: Swift.Bool = true, validateHost: Swift.Bool = true) -> DCloudUniappRuntime.PublicKeysTrustEvaluator
}
final public class CompositeTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public init(evaluators: [any DCloudUniappRuntime.ServerTrustEvaluating])
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension DCloudUniappRuntime.ServerTrustEvaluating where Self == DCloudUniappRuntime.CompositeTrustEvaluator {
  public static func composite(evaluators: [any DCloudUniappRuntime.ServerTrustEvaluating]) -> DCloudUniappRuntime.CompositeTrustEvaluator
}
@available(*, deprecated, renamed: "DisabledTrustEvaluator", message: "DisabledEvaluator has been renamed DisabledTrustEvaluator.")
public typealias DisabledEvaluator = DCloudUniappRuntime.DisabledTrustEvaluator
final public class DisabledTrustEvaluator : DCloudUniappRuntime.ServerTrustEvaluating {
  public init()
  final public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
  @objc deinit
}
extension Swift.Array where Element == any DCloudUniappRuntime.ServerTrustEvaluating {
  public func evaluate(_ trust: Security.SecTrust, forHost host: Swift.String) throws
}
extension Foundation.Bundle : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Foundation.Bundle
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType : Foundation.Bundle {
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
  public func paths(forResourcesOfTypes types: [Swift.String]) -> [Swift.String]
}
extension Security.SecTrust : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrust
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == Security.SecTrust {
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate(afterApplying policy: Security.SecPolicy) throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate(afterApplying:)")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate(afterApplying:)")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate(afterApplying:)")
  public func validate(policy: Security.SecPolicy, errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> any Swift.Error) throws
  public func apply(policy: Security.SecPolicy) throws -> Security.SecTrust
  @available(iOS 12, macOS 10.14, tvOS 12, watchOS 5, *)
  public func evaluate() throws
  @available(iOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(macOS, introduced: 10.12, deprecated: 10.14, renamed: "evaluate()")
  @available(tvOS, introduced: 10, deprecated: 12, renamed: "evaluate()")
  @available(watchOS, introduced: 3, deprecated: 5, renamed: "evaluate()")
  public func validate(errorProducer: (_ status: Darwin.OSStatus, _ result: Security.SecTrustResultType) -> any Swift.Error) throws
  public func setAnchorCertificates(_ certificates: [Security.SecCertificate]) throws
  public var publicKeys: [Security.SecKey] {
    get
  }
  public var certificates: [Security.SecCertificate] {
    get
  }
  public var certificateData: [Foundation.Data] {
    get
  }
  public func performDefaultValidation(forHost host: Swift.String) throws
  public func performValidation(forHost host: Swift.String) throws
}
extension Security.SecPolicy : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Security.SecPolicy
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == Security.SecPolicy {
  public static let `default`: Security.SecPolicy
  public static func hostname(_ hostname: Swift.String) -> Security.SecPolicy
  public static func revocation(options: DCloudUniappRuntime.RevocationTrustEvaluator.Options) throws -> Security.SecPolicy
}
extension Swift.Array : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Swift.Array<Element>
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == [Security.SecCertificate] {
  public var data: [Foundation.Data] {
    get
  }
  public var publicKeys: [Security.SecKey] {
    get
  }
}
extension Security.SecCertificate : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Security.SecCertificate
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == Security.SecCertificate {
  public var publicKey: Security.SecKey? {
    get
  }
}
extension Swift.Int32 : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Swift.Int32
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == Swift.Int32 {
  public var isSuccess: Swift.Bool {
    get
  }
}
extension Security.SecTrustResultType : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Security.SecTrustResultType
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType == Security.SecTrustResultType {
  public var isSuccess: Swift.Bool {
    get
  }
}
@_inheritsConvenienceInitializers @available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor @objc final public class UniKeyboardConfiguration : ObjectiveC.NSObject {
  @objc @_Concurrency.MainActor final public var overrideAppearance: Swift.Bool
  @objc @_Concurrency.MainActor final public var appearance: UIKit.UIKeyboardAppearance
  @_Concurrency.MainActor @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class UniDomManager : DCloudUniappRuntime.UniDocumentImpl {
  override public func create()
  @objc deinit
  override public func destory()
  override public func notifyLayout()
  override public func waitNativeRender(_ callback: @escaping () -> Swift.Void)
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public struct UniIQTextFieldViewInfo : Swift.Equatable {
  nonisolated public static func == (lhs: DCloudUniappRuntime.UniIQTextFieldViewInfo, rhs: DCloudUniappRuntime.UniIQTextFieldViewInfo) -> Swift.Bool
  @_Concurrency.MainActor @objc public enum Name : Swift.Int {
    case beginEditing
    case endEditing
    nonisolated public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    nonisolated public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public let name: DCloudUniappRuntime.UniIQTextFieldViewInfo.Name
  @_Concurrency.MainActor public let textFieldView: UIKit.UIView
  @_Concurrency.MainActor public init?(notification: Foundation.Notification?, name: DCloudUniappRuntime.UniIQTextFieldViewInfo.Name)
}
public protocol RedirectHandler {
  func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
public struct Redirector {
  public enum Behavior {
    case follow
    case doNotFollow
    case modify((Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?)
  }
  public static let follow: DCloudUniappRuntime.Redirector
  public static let doNotFollow: DCloudUniappRuntime.Redirector
  public let behavior: DCloudUniappRuntime.Redirector.Behavior
  public init(behavior: DCloudUniappRuntime.Redirector.Behavior)
}
extension DCloudUniappRuntime.Redirector : DCloudUniappRuntime.RedirectHandler {
  public func task(_ task: Foundation.URLSessionTask, willBeRedirectedTo request: Foundation.URLRequest, for response: Foundation.HTTPURLResponse, completion: @escaping (Foundation.URLRequest?) -> Swift.Void)
}
extension DCloudUniappRuntime.RedirectHandler where Self == DCloudUniappRuntime.Redirector {
  public static var follow: DCloudUniappRuntime.Redirector {
    get
  }
  public static var doNotFollow: DCloudUniappRuntime.Redirector {
    get
  }
  public static func modify(using closure: @escaping (Foundation.URLSessionTask, Foundation.URLRequest, Foundation.HTTPURLResponse) -> Foundation.URLRequest?) -> DCloudUniappRuntime.Redirector
}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager {
  @objc @_Concurrency.MainActor final public var enableDebugging: Swift.Bool {
    @objc get
    @objc set(newValue)
  }
  @_Concurrency.MainActor public struct Static {
  }
}
@_hasMissingDesignatedInitializers @objc(UniElementFlexNode) @objcMembers open class UniElementFlexNode : DCloudUniappRuntime.UniLayoutFlexNode, DCloudUniappRuntime.UniLayoutFlexMeasureDelegate {
  @objc deinit
  @objc public func onSizeMeasureFuncWidth(_ width: Swift.Float, mode widthMode: Swift.Int32, height: Swift.Float, mode heightMode: Swift.Int32) -> CoreFoundation.CGSize
  @objc override dynamic open func getContentWidth() -> Swift.Float
  @objc override dynamic open func getContentHeight() -> Swift.Float
  @objc override dynamic open func setStyleWidthPercent(_ percent: Swift.Float)
  @objc override dynamic open func setStyleWidth(_ styleWidth: Swift.Float)
  @objc override dynamic open func setStyleHeightPercent(_ percent: Swift.Float)
  @objc override dynamic open func setStyleHeight(_ styleHeight: Swift.Float)
  @objc override dynamic open func reset()
}
@objc public protocol Console : JavaScriptCore.JSExport {
  @objc static func log()
  @objc static func debug()
  @objc static func info()
  @objc static func error()
  @objc static func warn()
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UniConsole : ObjectiveC.NSObject, DCloudUniappRuntime.Console {
  @objc public static func debug()
  @objc public static func info()
  @objc public static func error()
  @objc public static func warn()
  @objc public static func log()
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUniappRuntime.UniKeyboardManager {
  @_Concurrency.MainActor final public func create()
}
public class UniDomNodeData : DCloudUniappRuntime.INodeData {
  public var id: Swift.String
  public var name: Swift.String
  public var attrs: Swift.Dictionary<Swift.String, Any>
  public var style: Swift.Dictionary<Swift.String, Any>
  public init(id: Swift.String, name: Swift.String, attrs: Swift.Dictionary<Swift.String, Any>, style: Swift.Dictionary<Swift.String, Any>)
  convenience public init(name: Swift.String)
  convenience public init(id: Swift.String, name: Swift.String)
  public static func formDictionary(_ dict: Swift.Dictionary<Swift.String, Any>) -> any DCloudUniappRuntime.INodeData
  @objc deinit
}
public struct NativeLoadFontFaceOptions {
}
extension Foundation.URLSessionConfiguration : DCloudUniappRuntime.AlamofireExtended {
  public typealias ExtendedType = Foundation.URLSessionConfiguration
}
extension DCloudUniappRuntime.AlamofireExtension where ExtendedType : Foundation.URLSessionConfiguration {
  public static var `default`: Foundation.URLSessionConfiguration {
    get
  }
  public static var ephemeral: Foundation.URLSessionConfiguration {
    get
  }
}
public let AF: DCloudUniappRuntime.Session
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQKeyboardReturnKeyHandler : UIKit.UITextViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChange(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange) -> Swift.Bool
  @available(iOS, deprecated: 10.0)
  @_Concurrency.MainActor(unsafe) @objc final public func textView(_ aTextView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange) -> Swift.Bool
}
@available(iOS 16.0, *)
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQKeyboardReturnKeyHandler {
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, editMenuForTextIn range: Foundation.NSRange, suggestedActions: [UIKit.UIMenuElement]) -> UIKit.UIMenu?
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, willPresentEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, willDismissEditMenuWith animator: any UIKit.UIEditMenuInteractionAnimating)
}
@available(iOS 17.0, *)
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQKeyboardReturnKeyHandler {
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, primaryActionFor textItem: UIKit.UITextItem, defaultAction: UIKit.UIAction) -> UIKit.UIAction?
  @_Concurrency.MainActor @objc final public func textView(_ aTextView: UIKit.UITextView, menuConfigurationFor textItem: UIKit.UITextItem, defaultMenu: UIKit.UIMenu) -> UIKit.UITextItem.MenuConfiguration?
  @_Concurrency.MainActor @objc final public func textView(_ textView: UIKit.UITextView, textItemMenuWillDisplayFor textItem: UIKit.UITextItem, animator: any UIKit.UIContextMenuInteractionAnimating)
  @_Concurrency.MainActor @objc final public func textView(_ textView: UIKit.UITextView, textItemMenuWillEndFor textItem: UIKit.UITextItem, animator: any UIKit.UIContextMenuInteractionAnimating)
}
public protocol UniApp : AnyObject {
  var appid: Swift.String { get }
  var pageManager: any DCloudUniappRuntime.UniPageManager { get }
  func onEvent(_ event: Swift.String)
  func addEventListener<T>(_ event: Swift.String, _ callback: @escaping (_ event: T) -> Swift.Void) -> DCloudUniappRuntime.UniCallbackWrapper
  func removeEventListener(_ event: Swift.String, _ callbackWrapper: DCloudUniappRuntime.UniCallbackWrapper)
  func addKeyEventListener(_ event: Swift.String, _ callback: @escaping (_ event: DCloudUniappRuntime.UniKeyEvent) -> Swift.Bool)
  func quit()
  func getAppStartDuration() -> Foundation.NSNumber
  func loadFontFace(_ options: DCloudUniappRuntime.NativeLoadFontFaceOptions)
  func getRedirectInfo() -> Swift.Dictionary<Swift.String, Any?>
}
public typealias UniQueuerunable = () -> Swift.Void
open class MultipartFormData {
  public static let encodingMemoryThreshold: Swift.UInt64
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  final public let boundary: Swift.String
  public init(fileManager: Foundation.FileManager = .default, boundary: Swift.String? = nil)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String? = nil, mimeType: Swift.String? = nil)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: DCloudUniappRuntime.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
public typealias AFResult<Success> = Swift.Result<Success, DCloudUniappRuntime.AFError>
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor extension DCloudUniappRuntime.UniKeyboardManagerWrapper where Base : UIKit.UIView {
  @_Concurrency.MainActor public func viewContainingController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func topMostController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func parentContainerViewController() -> UIKit.UIViewController?
  @_Concurrency.MainActor public func superviewOf<T>(type classType: T.Type, belowView: UIKit.UIView? = nil) -> T? where T : UIKit.UIView
}
@available(iOSApplicationExtension, unavailable)
@objc extension UIKit.UIView {
  @objc @available(*, unavailable, renamed: "iq.viewContainingController()")
  @_Concurrency.MainActor(unsafe) dynamic public func viewContainingController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.topMostController()")
  @_Concurrency.MainActor(unsafe) dynamic public func topMostController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.parentContainerViewController()")
  @_Concurrency.MainActor(unsafe) dynamic public func parentContainerViewController() -> UIKit.UIViewController?
  @objc @available(*, unavailable, renamed: "iq.superviewOf(type:belowView:)")
  @_Concurrency.MainActor(unsafe) dynamic public func superviewOfClassType(_ classType: UIKit.UIView.Type, belowView: UIKit.UIView? = nil) -> UIKit.UIView?
}
final public class URLEncodedFormEncoder {
  public enum ArrayEncoding {
    case brackets
    case noBrackets
    case indexInBrackets
    case custom((_ key: Swift.String, _ index: Swift.Int) -> Swift.String)
  }
  public enum BoolEncoding {
    case numeric
    case literal
    public static func == (a: DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding, b: DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum DataEncoding {
    case deferredToData
    case base64
    case custom((Foundation.Data) throws -> Swift.String)
  }
  public enum DateEncoding {
    case deferredToDate
    case secondsSince1970
    case millisecondsSince1970
    case iso8601
    case formatted(Foundation.DateFormatter)
    case custom((Foundation.Date) throws -> Swift.String)
  }
  public enum KeyEncoding {
    case useDefaultKeys
    case convertToSnakeCase
    case convertToKebabCase
    case capitalized
    case uppercased
    case lowercased
    case custom((Swift.String) -> Swift.String)
  }
  public struct KeyPathEncoding {
    public static let brackets: DCloudUniappRuntime.URLEncodedFormEncoder.KeyPathEncoding
    public static let dots: DCloudUniappRuntime.URLEncodedFormEncoder.KeyPathEncoding
    public init(encoding: @escaping (_ subkey: Swift.String) -> Swift.String)
  }
  public struct NilEncoding {
    public static let dropKey: DCloudUniappRuntime.URLEncodedFormEncoder.NilEncoding
    public static let dropValue: DCloudUniappRuntime.URLEncodedFormEncoder.NilEncoding
    public static let null: DCloudUniappRuntime.URLEncodedFormEncoder.NilEncoding
    public init(encoding: @escaping () -> Swift.String?)
  }
  public enum SpaceEncoding {
    case percentEscaped
    case plusReplaced
    public static func == (a: DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding, b: DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Error : Swift.Error {
    case invalidRootObject(Swift.String)
  }
  final public let alphabetizeKeyValuePairs: Swift.Bool
  final public let arrayEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.ArrayEncoding
  final public let boolEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding
  final public let dataEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.DataEncoding
  final public let dateEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.DateEncoding
  final public let keyEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.KeyEncoding
  final public let keyPathEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.KeyPathEncoding
  final public let nilEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.NilEncoding
  final public let spaceEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding
  final public var allowedCharacters: Foundation.CharacterSet
  public init(alphabetizeKeyValuePairs: Swift.Bool = true, arrayEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.ArrayEncoding = .brackets, boolEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding = .numeric, dataEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.DataEncoding = .base64, dateEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.DateEncoding = .deferredToDate, keyEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.KeyEncoding = .useDefaultKeys, keyPathEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.KeyPathEncoding = .brackets, nilEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.NilEncoding = .dropKey, spaceEncoding: DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding = .percentEscaped, allowedCharacters: Foundation.CharacterSet = .afURLQueryAllowed)
  final public func encode(_ value: any Swift.Encodable) throws -> Swift.String
  final public func encode(_ value: any Swift.Encodable) throws -> Foundation.Data
  @objc deinit
}
extension Foundation.CharacterSet {
  public static let afURLQueryAllowed: Foundation.CharacterSet
}
public protocol UniPageManager {
  func createPage(_ pageUrl: Swift.String, _ pageId: Swift.String, _ pageStyle: Swift.Dictionary<Swift.String, Any?>) -> any DCloudUniappRuntime.UniPage
  func findPageById(_ pageId: Swift.String) -> (any DCloudUniappRuntime.UniPage)?
}
@available(iOSApplicationExtension, unavailable)
@_Concurrency.MainActor public struct UniKeyboardInfo : Swift.Equatable {
  nonisolated public static func == (lhs: DCloudUniappRuntime.UniKeyboardInfo, rhs: DCloudUniappRuntime.UniKeyboardInfo) -> Swift.Bool
  @objc public enum Name : Swift.Int {
    case willShow
    case didShow
    case willHide
    case didHide
    case willChangeFrame
    case didChangeFrame
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor public let name: DCloudUniappRuntime.UniKeyboardInfo.Name
  @_Concurrency.MainActor public let frame: CoreFoundation.CGRect
  @_Concurrency.MainActor public let animationDuration: Foundation.TimeInterval
  @_Concurrency.MainActor public let animationCurve: UIKit.UIView.AnimationCurve
  @_Concurrency.MainActor public var keyboardShowing: Swift.Bool {
    get
  }
  @_Concurrency.MainActor public init(notification: Foundation.Notification?, name: DCloudUniappRuntime.UniKeyboardInfo.Name)
  @_Concurrency.MainActor public func animate(alongsideTransition transition: @escaping () -> Swift.Void, completion: (() -> Swift.Void)? = nil)
}
@_hasMissingDesignatedInitializers public class UniWebViewLoadingEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var url: Swift.String
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniWebViewLoadingEvent.Detail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniWebViewLoadedEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var url: Swift.String
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniWebViewLoadedEvent.Detail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniWebViewMessageEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var data: [Swift.String : Any]
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniWebViewMessageEvent.Detail
  @objc deinit
}
@_hasMissingDesignatedInitializers public class UniWebViewDownloadEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var url: Swift.String
    public var userAgnet: Swift.String
    public var contentDisposition: Swift.String
    public var mimetype: Swift.String
    public var contentLength: Foundation.NSNumber
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniWebViewDownloadEvent.Detail
  @objc deinit
}
public enum WebViewErrorType : Swift.Int {
  case ssl
  case page
  case http
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class UniWebViewErrorEvent : DCloudUniappRuntime.UniEvent {
  public static let eventName: Swift.String
  @_hasMissingDesignatedInitializers public class Detail {
    public var errMsg: Swift.String
    public var errCode: Foundation.NSNumber
    public var errSubject: Swift.String
    @objc deinit
  }
  public var detail: DCloudUniappRuntime.UniWebViewErrorEvent.Detail
  @objc deinit
}
public typealias UniEventListenerCallback<T> = (T) -> Any? where T : DCloudUniappRuntime.UniEvent
public class UniEventCallbackWrapper {
  convenience public init(_ callback: @escaping DCloudUniappRuntime.UniEventListenerCallback<DCloudUniappRuntime.UniEvent>)
  public init(_ callback: @escaping DCloudUniappRuntime.UniEventListenerCallback<DCloudUniappRuntime.UniEvent>, identify: Swift.String)
  @objc deinit
}
public typealias UniCallbackWrapper = DCloudUniappRuntime.UniEventCallbackWrapper
extension DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination : Swift.Equatable {}
extension DCloudUniappRuntime.URLEncodedFormParameterEncoder.Destination : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQToolbarPlaceholderConfiguration : Swift.Sendable {}
extension DCloudUniappRuntime.UniFlexMeasureMode : Swift.Equatable {}
extension DCloudUniappRuntime.UniFlexMeasureMode : Swift.Hashable {}
extension DCloudUniappRuntime.UniFlexMeasureMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQInvocation : Swift.Sendable {}
extension DCloudUniappRuntime.URLEncoding.Destination : Swift.Equatable {}
extension DCloudUniappRuntime.URLEncoding.Destination : Swift.Hashable {}
extension DCloudUniappRuntime.URLEncoding.BoolEncoding : Swift.Equatable {}
extension DCloudUniappRuntime.URLEncoding.BoolEncoding : Swift.Hashable {}
extension DCloudUniappRuntime.JSONEncoding.Error : Swift.Equatable {}
extension DCloudUniappRuntime.JSONEncoding.Error : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQKeyboardReturnKeyHandler : Swift.Sendable {}
extension DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Equatable {}
extension DCloudUniappRuntime.NetworkReachabilityManager.NetworkReachabilityStatus.ConnectionType : Swift.Hashable {}
extension DCloudUniappRuntime.Request.State : Swift.Equatable {}
extension DCloudUniappRuntime.Request.State : Swift.Hashable {}
extension DCloudUniappRuntime.Request.ResponseDisposition : Swift.Equatable {}
extension DCloudUniappRuntime.Request.ResponseDisposition : Swift.Hashable {}
extension DCloudUniappRuntime.AuthenticationError : Swift.Equatable {}
extension DCloudUniappRuntime.AuthenticationError : Swift.Hashable {}
extension DCloudUniappRuntime.UniLogLevel : Swift.Equatable {}
extension DCloudUniappRuntime.UniLogLevel : Swift.Hashable {}
extension DCloudUniappRuntime.UniLogLevel : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewListener : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQToolbarConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQAutoToolbarManageBehavior : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQAutoToolbarManageBehavior : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQAutoToolbarManageBehavior : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQPreviousNextDisplayMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQPreviousNextDisplayMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQPreviousNextDisplayMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQEnableMode : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQEnableMode : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQEnableMode : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardListener : Swift.Sendable {}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior : Swift.Equatable {}
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DCloudUniappRuntime.DeflateRequestCompressor.DuplicateHeaderBehavior : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQBarButtonItemConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardConfiguration : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewInfo : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewInfo.Name : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewInfo.Name : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewInfo.Name : Swift.RawRepresentable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniIQTextFieldViewInfo.Name : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardManager.Static : Swift.Sendable {}
extension DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding : Swift.Equatable {}
extension DCloudUniappRuntime.URLEncodedFormEncoder.BoolEncoding : Swift.Hashable {}
extension DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding : Swift.Equatable {}
extension DCloudUniappRuntime.URLEncodedFormEncoder.SpaceEncoding : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardInfo : Swift.Sendable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardInfo.Name : Swift.Equatable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardInfo.Name : Swift.Hashable {}
@available(iOSApplicationExtension, unavailable)
extension DCloudUniappRuntime.UniKeyboardInfo.Name : Swift.RawRepresentable {}
extension DCloudUniappRuntime.WebViewErrorType : Swift.Equatable {}
extension DCloudUniappRuntime.WebViewErrorType : Swift.Hashable {}
extension DCloudUniappRuntime.WebViewErrorType : Swift.RawRepresentable {}
