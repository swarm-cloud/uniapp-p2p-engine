// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name unimoduleXtfSwarmcloud
import DCloudUTSFoundation
import DCloudUniappRuntime
import SwarmCloudKit
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import unimoduleXtfSwarmcloud
public var logArr: [SwarmCloudKit.LogLevel]
public var zoneArr: [SwarmCloudKit.TrackerZone]
@_inheritsConvenienceInitializers @objc(UTSSDKModulesXtfSwarmcloudConfigOptions) @objcMembers public class ConfigOptions : ObjectiveC.NSObject, DCloudUTSFoundation.UTSObject {
  @objc public var logEnabled: Swift.Bool
  @objc public var logLevel: Foundation.NSNumber?
  @objc public var trackerZone: Foundation.NSNumber?
  @objc public var downloadTimeout: Foundation.NSNumber?
  @objc public var localPortHls: Foundation.NSNumber?
  @objc public var localPortDash: Foundation.NSNumber?
  @objc public var diskCacheLimit: Foundation.NSNumber?
  @objc public var memoryCacheCountLimit: Foundation.NSNumber?
  @objc public var maxPeerConnections: Foundation.NSNumber?
  @objc public var useHttpRange: Swift.Bool
  @objc public var httpHeadersForHls: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var httpHeadersForDash: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var httpLoadTime: Foundation.NSNumber?
  @objc public var sharePlaylist: Swift.Bool
  @objc public var insertTimeOffsetTag: Foundation.NSNumber?
  @objc public var mediaFileSeparator: Swift.String?
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc public init(_ obj: DCloudUTSFoundation.UTSJSONObject)
  public typealias Element = DCloudUTSFoundation.DCUniIterator.Element
  public typealias Iterator = DCloudUTSFoundation.DCUniIterator
  @objc deinit
}
public func initP2p(_ token: Swift.String, _ configOptions: unimoduleXtfSwarmcloud.ConfigOptions? = nil)
public func getP2pUrl(_ url: Swift.String, _ videoId: Swift.String? = nil) -> Swift.String
public func getP2pEngineVersion() -> Swift.String
public func p2pIsConnected() -> Swift.Bool
public func stopP2p()
public func restartP2p() -> Swift.Bool
public func peerId() -> Swift.String
public func disableP2p()
public func enableP2p()
public func shutdownP2p()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesXtfSwarmcloudConfigOptionsJSONObject) @objcMembers public class ConfigOptionsJSONObject : ObjectiveC.NSObject {
  @objc public var logEnabled: Swift.Bool
  @objc public var logLevel: Foundation.NSNumber?
  @objc public var trackerZone: Foundation.NSNumber?
  @objc public var downloadTimeout: Foundation.NSNumber?
  @objc public var localPortHls: Foundation.NSNumber?
  @objc public var localPortDash: Foundation.NSNumber?
  @objc public var diskCacheLimit: Foundation.NSNumber?
  @objc public var memoryCacheCountLimit: Foundation.NSNumber?
  @objc public var maxPeerConnections: Foundation.NSNumber?
  @objc public var useHttpRange: Swift.Bool
  @objc public var httpHeadersForHls: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var httpHeadersForDash: Swift.Dictionary<Swift.String, Swift.String>?
  @objc public var httpLoadTime: Foundation.NSNumber?
  @objc public var sharePlaylist: Swift.Bool
  @objc public var insertTimeOffsetTag: Foundation.NSNumber?
  @objc public var mediaFileSeparator: Swift.String?
  @objc override dynamic public init()
  @objc deinit
}
public func initP2pByJs(_ token: Swift.String, _ configOptions: unimoduleXtfSwarmcloud.ConfigOptionsJSONObject? = nil)
public func getP2pUrlByJs(_ url: Swift.String, _ videoId: Swift.String? = nil) -> Swift.String
public func getP2pEngineVersionByJs() -> Swift.String
public func p2pIsConnectedByJs() -> Swift.Bool
public func stopP2pByJs()
public func restartP2pByJs() -> Swift.Bool
public func peerIdByJs() -> Swift.String
public func disableP2pByJs()
public func enableP2pByJs()
public func shutdownP2pByJs()
@_inheritsConvenienceInitializers @objc(UTSSDKModulesXtfSwarmcloudIndexSwift) @objcMembers public class UTSSDKModulesXtfSwarmcloudIndexSwift : ObjectiveC.NSObject {
  @objc public static func s_initP2pByJs(_ token: Swift.String, _ configOptions: unimoduleXtfSwarmcloud.ConfigOptionsJSONObject? = nil)
  @objc public static func s_getP2pUrlByJs(_ url: Swift.String, _ videoId: Swift.String? = nil) -> Swift.String
  @objc public static func s_getP2pEngineVersionByJs() -> Swift.String
  @objc public static func s_p2pIsConnectedByJs() -> Swift.Bool
  @objc public static func s_stopP2pByJs()
  @objc public static func s_restartP2pByJs() -> Swift.Bool
  @objc public static func s_peerIdByJs() -> Swift.String
  @objc public static func s_disableP2pByJs()
  @objc public static func s_enableP2pByJs()
  @objc public static func s_shutdownP2pByJs()
  @objc override dynamic public init()
  @objc deinit
}
