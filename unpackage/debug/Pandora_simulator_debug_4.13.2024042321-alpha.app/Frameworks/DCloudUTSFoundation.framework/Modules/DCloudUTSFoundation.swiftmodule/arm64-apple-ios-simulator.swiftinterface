// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DCloudUTSFoundation
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import DCloudUTSFoundation
import Foundation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_hasMissingDesignatedInitializers public class UTSRegExp : Foundation.NSRegularExpression {
  public var lastIndex: Foundation.NSNumber
  public var matchFlag: Swift.String
  public var dotAll: Swift.Bool {
    get
  }
  public var flags: Swift.String {
    get
  }
  public var global: Swift.Bool {
    get
  }
  public var hasIndices: Swift.Bool {
    get
  }
  public var ignoreCase: Swift.Bool {
    get
  }
  public var sticky: Swift.Bool {
    get
  }
  public var unicode: Swift.Bool {
    get
  }
  public var multiline: Swift.Bool {
    get
  }
  public var source: Swift.String {
    get
  }
  public init(_ patternStr: Swift.String? = "", _ flag: Swift.String = "")
  @discardableResult
  public func exec(_ string: Swift.String) -> DCloudUTSFoundation.RegExpExecArray?
  public func test(_ string: Swift.String) -> Swift.Bool
  public func replace(_ str: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replaceAll(_ str: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String]) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ str: Swift.String, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String, _ groups: DCloudUTSFoundation.UTSJSONObject) -> Swift.String)?) -> Swift.String
  public func replaceAll(_ str: Swift.String, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func split(_ str: Swift.String) -> [Swift.String]
  public func split(_ str: Swift.String, _ limit: Swift.Int?) -> [Swift.String]
  public func split(_ str: Swift.String, _ limit: Foundation.NSNumber?) -> [Swift.String]
  public func search(_ str: Swift.String) -> Foundation.NSNumber
  public func firstMatch(_ str: Swift.String) -> Swift.String?
  public func indexOf(_ string: Swift.String) -> Swift.Int
  @objc deinit
}
public typealias RegExpExecArray = Foundation.NSMutableArray
public typealias RegExpMatchArray = DCloudUTSFoundation.RegExpExecArray
extension Foundation.NSMutableArray {
  public var index: Foundation.NSNumber {
    get
    set
  }
  public var input: Swift.String {
    get
    set
  }
  public var groups: DCloudUTSFoundation.UTSJSONObject {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class Math {
  public static var E: Foundation.NSNumber {
    get
  }
  public static var LN10: Foundation.NSNumber {
    get
  }
  public static var LN2: Foundation.NSNumber {
    get
  }
  public static var LOG10E: Foundation.NSNumber {
    get
  }
  public static var LOG2E: Foundation.NSNumber {
    get
  }
  public static var PI: Foundation.NSNumber {
    get
  }
  public static var SQRT1_2: Foundation.NSNumber {
    get
  }
  public static var SQRT2: Foundation.NSNumber {
    get
  }
  public static func abs(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func acos(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func acosh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func asin(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func asinh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atan(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atan2(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func atanh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cbrt(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ceil(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cos(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func cosh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sin(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sinh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func tan(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func tanh(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func exp(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func expm1(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func floor(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func hypot(_ numbers: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func max(_ x: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func min(_ x: Foundation.NSNumber...) -> Foundation.NSNumber
  public static func log(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log10(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log1p(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func log2(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func pow(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sqrt(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func random() -> Foundation.NSNumber
  public static func round(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func sign(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func trunc(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func imul(_ x: Foundation.NSNumber, _ y: Foundation.NSNumber) -> Foundation.NSNumber
  public static func clz32(_ x: Any? = nil) -> Foundation.NSNumber
  public static func fround(_ x: Foundation.NSNumber) -> Foundation.NSNumber
  public static func fround(_ number: Swift.Double) -> Swift.Double
  @objc deinit
}
open class UniCallbackWrapper<R, P> : ObjectiveC.NSObject {
  public init(_ callback: (() -> R)?)
  public init(_ callback1: ((P) -> R)?)
  public func callAsFunction() -> R?
  public func callAsFunction(_ p: P) -> R?
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSCallback) @objcMembers open class UTSCallback : ObjectiveC.NSObject {
  @objc public var wxCallabck: DCloudUTSFoundation.DCUTSBlock?
  @objc public var callbackId: Swift.Int
  @objc public var callbackName: Swift.String
  @objc override dynamic public init()
  public func callAsFunction(_ args: Any...)
  @objc deinit
}
public typealias Map = Swift.Dictionary
extension Swift.Dictionary {
  public var size: Swift.Int {
    get
  }
  public init(_ array: [[Any]])
  @discardableResult
  public mutating func set(_ key: Key, _ value: Value) -> Swift.Dictionary<Key, Value>
  public func get(_ key: Key) -> Value?
  public mutating func clear()
  public mutating func delete(_ key: Key) -> Swift.Bool
  public func has(_ key: Key) -> Swift.Bool
  public func forEach(_ action: (_ value: Value) -> Swift.Void)
  public func forEach(_ action: (_ value: Value, _ key: Key) -> Swift.Void)
  public func forEach(_ action: (_ value: Value, _ key: Key, _ map: Swift.Dictionary<Key, Value>) -> Swift.Void)
}
extension Foundation.NSNumber {
  @discardableResult
  prefix public static func - (item: Foundation.NSNumber) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  convenience public init(_ item: Swift.CChar)
  convenience public init(_ item: Swift.Int16)
  convenience public init(_ item: Swift.Int32)
  convenience public init(_ item: Swift.Int64)
  convenience public init(_ item: Swift.UInt8)
  convenience public init(_ item: Swift.UInt16)
  convenience public init(_ item: Swift.UInt32)
  convenience public init(_ item: Swift.UInt64)
  convenience public init(_ item: Swift.Float)
  convenience public init(_ item: Swift.Double)
  convenience public init(_ item: Swift.Bool)
  convenience public init(_ item: Swift.Int)
}
extension Foundation.NSNumber {
  public static func from(_ value: Swift.Int) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int64) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int32) -> Foundation.NSNumber
  public static func from(_ value: Swift.Int16) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt64) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt32) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt16) -> Foundation.NSNumber
  public static func from(_ value: Swift.UInt8) -> Foundation.NSNumber
  public static func from(_ value: Swift.Float) -> Foundation.NSNumber
  public static func from(_ value: Swift.Double) -> Foundation.NSNumber
  public static func from(_ value: Swift.Bool) -> Foundation.NSNumber
  public static func from(_ value: Swift.CChar) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  public static func + (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Swift.Float) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Swift.Double) -> Foundation.NSNumber
  public static func + (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func - (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func * (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func / (left: Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func += (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func -= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func *= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  public static func /= (left: inout Foundation.NSNumber, right: Foundation.NSNumber) -> Foundation.NSNumber
  postfix public static func ++ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  postfix public static func -- (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  prefix public static func ++ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  prefix public static func -- (item: inout Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>> (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>> (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func >>>= (l: inout Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >>>= (l: inout Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func << (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func << (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func >> (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func >> (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: any Swift.BinaryFloatingPoint) -> Foundation.NSNumber
  public static func % (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: any Swift.BinaryInteger) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: any Swift.BinaryFloatingPoint) -> Foundation.NSNumber
  public static func %= (l: inout Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func & (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func & (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func & (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func &= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func | (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func | (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func | (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func |= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func ^ (l: Foundation.NSNumber, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ^ (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  public static func ^ (l: Swift.Int, r: Foundation.NSNumber) -> Foundation.NSNumber
  public static func ^= (l: Foundation.NSNumber, r: Swift.Int) -> Foundation.NSNumber
  prefix public static func ~ (item: inout Foundation.NSNumber) -> Foundation.NSNumber
}
extension Foundation.NSNumber {
  public static func > (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func > (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func > (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func < (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func < (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func == (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func == (r: Any, l: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func === (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func === (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func != (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func != (r: Any, l: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func !== (l: Swift.Int, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.Float, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.Double, r: Foundation.NSNumber) -> Swift.Bool
  public static func !== (l: Swift.UInt, r: Foundation.NSNumber) -> Swift.Bool
  public static func >= (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func >= (r: Swift.Int, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.Float, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.Double, l: Foundation.NSNumber) -> Swift.Bool
  public static func >= (r: Swift.UInt, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (l: Foundation.NSNumber, r: Any) -> Swift.Bool
  public static func <= (r: Swift.Int, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.Float, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.Double, l: Foundation.NSNumber) -> Swift.Bool
  public static func <= (r: Swift.UInt, l: Foundation.NSNumber) -> Swift.Bool
}
extension Foundation.NSNumber {
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.String
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public static func parseInt(_ value: Swift.String) -> Foundation.NSNumber
  public static func parseInt(_ value: Swift.String, _ radix: Foundation.NSNumber) -> Foundation.NSNumber
  public static func parseInt(_ value: Swift.String, _ radix: Swift.Int) -> Foundation.NSNumber
  public static func parseFloat(_ str: Swift.String) -> Foundation.NSNumber
  public func toInt() -> Swift.Int
  public func toFloat() -> Swift.Float
  public func toDouble() -> Swift.Double
  public func toInt64() -> Swift.Int64
  public func toInt32() -> Swift.Int32
  public func toInt16() -> Swift.Int16
  public func toInt8() -> Swift.Int8
  public func toUInt() -> Swift.UInt
  public func toUInt64() -> Swift.UInt64
  public func toUInt32() -> Swift.UInt32
  public func toUInt16() -> Swift.UInt16
  public func toUInt8() -> Swift.UInt8
  public static func isNaN(_ value: Foundation.NSNumber) -> Swift.Bool
  public static func isFinite(_ value: Any) -> Swift.Bool
  public static func isInteger(_ value: Any) -> Swift.Bool
}
public func setTimeout(_ task: @escaping () -> Swift.Void, _ delay: Swift.Int = 0) -> Foundation.NSNumber
public func clearTimeout(_ timeoutID: Foundation.NSNumber)
public func setInterval(_ task: @escaping () -> Swift.Void, _ delay: Swift.Int = 0) -> Foundation.NSNumber
public func clearInterval(_ timeoutID: Foundation.NSNumber)
extension Foundation.Date {
  public var calendar: Foundation.Calendar {
    get
  }
  public init(_ params: Any...)
  public mutating func mutiParmas(year: Swift.Int, month: Swift.Int, day: Swift.Int? = 1, hour: Swift.Int? = 0, minute: Swift.Int? = 0, second: Swift.Int? = 0, milliseconds: Swift.Int? = 0)
  public static func stringParse(_ string: Swift.String) -> Foundation.DateFormatter?
  public mutating func dateStringParse(string: Swift.String)
  public mutating func unixTimestamp(unixTimestamp: Swift.Int)
  public static func now() -> Foundation.NSNumber
  public func getDate() -> Foundation.NSNumber
  public mutating func setDate(_ newDay: Swift.Int)
  public mutating func setDate(_ newDay: Foundation.NSNumber)
  public func getDay() -> Foundation.NSNumber
  public mutating func setDay(_ weekday: Swift.Int)
  public mutating func setDay(_ weekday: Foundation.NSNumber)
  public func getFullYear() -> Foundation.NSNumber
  public mutating func setFullYear(_ year: Swift.Int)
  public mutating func setFullYear(_ year: Foundation.NSNumber)
  public func getHours() -> Foundation.NSNumber
  public mutating func setHours(_ hour: Swift.Int)
  public mutating func setHours(_ hour: Foundation.NSNumber)
  public func getMilliseconds() -> Foundation.NSNumber
  public mutating func setMilliseconds(_ milliseconds: Swift.Int)
  public mutating func setMilliseconds(_ milliseconds: Foundation.NSNumber)
  public func getMinutes() -> Foundation.NSNumber
  public mutating func setMinutes(_ minutes: Swift.Int)
  public mutating func setMinutes(_ minutes: Foundation.NSNumber)
  public func getMonth() -> Foundation.NSNumber
  public mutating func setMonth(_ month: Swift.Int)
  public mutating func setMonth(_ month: Foundation.NSNumber)
  public func getSeconds() -> Foundation.NSNumber
  public mutating func setSeconds(_ seconds: Swift.Int)
  public mutating func setSeconds(_ seconds: Foundation.NSNumber)
  public func getTime() -> Foundation.NSNumber
  public mutating func setTime(_ timeInterval: Swift.Int)
  public mutating func setTime(_ timeInterval: Foundation.NSNumber)
  public func valueOf() -> Foundation.NSNumber
  public func toUTCString() -> Swift.String
  public func dateTimeString() -> Swift.String
  public var utsDateDescription: Swift.String {
    get
  }
  public func toString() -> Swift.String
  public func toTimeString() -> Swift.String
  public func toDateString() -> Swift.String
  public static func parse(_ dateString: Swift.String) -> Foundation.NSNumber
}
extension Swift.Array {
  public init(elements: Element...)
}
extension Swift.Array where Element == Any {
  public subscript(key: Foundation.NSNumber) -> Any {
    get
    set
  }
}
extension Swift.Array where Element == Any? {
  public subscript(key: Foundation.NSNumber) -> Any {
    get
    set
  }
  public static func isArray(_ value: Any?) -> Swift.Bool
}
extension Swift.Array where Element == Swift.String {
  public func join(_ separator: Swift.String = ",") -> Swift.String
}
extension Swift.Array where Element : Swift.Equatable {
  public func includes(_ searchElement: Element) -> Swift.Bool
  public func includes(_ searchElement: Element, _ fromIndex: Swift.Int = 0) -> Swift.Bool
  public func includes(_ searchElement: Element, _ fromIndex: Foundation.NSNumber = 0) -> Swift.Bool
  public func indexOf(_ searchElement: Element) -> Foundation.NSNumber
  public func indexOf(_ searchElement: Element, _ fromIndex: Swift.Int) -> Swift.Int
  public func indexOf(_ searchElement: Element, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
  public func lastIndexOf(_ searchElement: Element) -> Foundation.NSNumber
  public func lastIndexOf(_ searchElement: Element, _ fromIndex: Swift.Int) -> Swift.Int
  public func lastIndexOf(_ searchElement: Element, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
}
extension Swift.Array {
  public var length: Swift.Int {
    get
    set
  }
  public mutating func add(_ value: Element)
  public subscript(index: Foundation.NSNumber) -> Element {
    get
    set
  }
  public func concat(_ elements: [Element]...) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int, _ start: Swift.Int) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber, _ start: Foundation.NSNumber) -> [Element]
  public mutating func copyWithin(_ target: Swift.Int, _ start: Swift.Int, _ end: Swift.Int? = nil) -> [Element]
  public mutating func copyWithin(_ target: Foundation.NSNumber, _ start: Foundation.NSNumber = 0, _ end: Foundation.NSNumber) -> [Element]
  public func every(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public func every(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func fill(_ value: Element) -> [Element]
  public mutating func fill(_ value: Element, _ start: Swift.Int?) -> [Element]
  public mutating func fill(_ value: Element, _ start: Foundation.NSNumber) -> [Element]
  public mutating func fill(_ value: Element, _ start: Swift.Int, _ end: Swift.Int) -> [Element]
  public mutating func fill(_ value: Element, _ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> [Element]
  public func filter(_ callback: (_ value: Element) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> [Element]
  public func filter(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> [Element]
  public func find(_ callback: (_ value: Element) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Element?
  public func find(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Element?
  public func findIndex(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element) -> Swift.Bool) -> Foundation.NSNumber
  public func findIndex(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Foundation.NSNumber
  public func findIndex(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Int
  public func findIndex(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Foundation.NSNumber
  public func flat() -> [Any]
  public func flat(_ depth: Swift.Int) -> [Any]
  public func flat(_ depth: Foundation.NSNumber) -> [Any]
  public func flatMap(_ callback: (_ value: Element) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> [Any]) -> [Any]
  public func flatMap(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> [Any]) -> [Any]
  public func forEach(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Void)
  public func forEach(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Void)
  public func forEach(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Void)
  public func map<R>(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> R) -> [R]
  public func map<R>(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> R) -> [R]
  public func map<R>(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> R) -> [R]
  public func keys() -> Swift.IndexingIterator<[Swift.Int]>
  public mutating func pop() -> Element
  public mutating func push(_ items: Element...) -> Swift.Int
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduce(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element) -> Element?
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Swift.Int, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reduceRight(_ callback: (_ previousValue: Element, _ currentValue: Element, _ currentIndex: Foundation.NSNumber, _ array: [Element]) -> Element, _ initialValue: Element) -> Element
  public func reverse() -> [Element]
  public mutating func shift() -> Element
  public func slice() -> [Element]
  public func slice(_ start: Swift.Int) -> Swift.Array<Element>
  public func slice(_ start: Foundation.NSNumber) -> Swift.Array<Element>
  public func slice(_ start: Foundation.NSNumber, _ end: Foundation.NSNumber) -> Swift.Array<Element>
  public func slice(_ start: Swift.Int, _ end: Swift.Int) -> [Element]
  public func some(_ callback: (_ value: Element) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Swift.Int) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Foundation.NSNumber) -> Swift.Bool) -> Swift.Bool
  public func some(_ callback: (_ value: Element, _ index: Swift.Int, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func some(_ callback: (_ value: Element, _ index: Foundation.NSNumber, _ array: [Element]) -> Swift.Bool) -> Swift.Bool
  public mutating func sort()
  public mutating func sort(_ callback: (_ lhs: Element, _ rhs: Element) -> Foundation.NSNumber)
  public mutating func sort(_ callback: (_ lhs: Element, _ rhs: Element) -> Swift.Int)
  @discardableResult
  public mutating func splice(_ start: Swift.Int) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber) -> [Element]
  public mutating func splice(_ start: Swift.Int, _ deleteCount: Swift.Int) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber, _ deleteCount: Foundation.NSNumber) -> [Element]
  public mutating func splice(_ start: Swift.Int, _ deleteCount: Swift.Int, items: Element...) -> [Element]
  public mutating func splice(_ start: Foundation.NSNumber, _ deleteCount: Foundation.NSNumber, _ items: Element...) -> [Element]
  public mutating func unshift(_ items: Element...) -> Swift.Int
  public func toString() -> Swift.String
}
extension Swift.Bool {
  public func toString() -> Swift.String
  public func valueOf() -> Swift.Bool
}
public protocol IJsonStringify {
  func toJson() -> Any?
}
@_hasMissingDesignatedInitializers public class JSON {
  public static func parse(_ text: Swift.String) -> Any?
  public static func parse(_ text: Swift.String, _ def: Any) -> Any
  public static func parse<T>(_ text: Swift.String, _ type: T.Type) -> T?
  public static func parse<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T
  public static func parse<T>(_ text: Swift.String, _ type: T.Type) -> T? where T : Swift.Decodable
  public static func parse<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T where T : Swift.Decodable
  public static func parseObject(_ text: Swift.String) -> DCloudUTSFoundation.UTSJSONObject?
  public static func parseObject(_ text: Swift.String, _ def: DCloudUTSFoundation.UTSJSONObject) -> DCloudUTSFoundation.UTSJSONObject
  public static func parseObject<T>(_ text: Swift.String, _ type: T.Type) -> T?
  public static func parseObject<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T
  public static func parseObject<T>(_ text: Swift.String, _ type: T.Type) -> T? where T : Swift.Decodable
  public static func parseObject<T>(_ text: Swift.String, _ def: T, _ type: T.Type) -> T where T : Swift.Decodable
  public static func parseArray(_ text: Swift.String) -> Swift.Array<Any>?
  public static func parseArray(_ text: Swift.String, _ def: [Any]) -> Swift.Array<Any>
  public static func parseArray<T>(_ text: Swift.String, _ type: T.Type) -> [T]?
  public static func parseArray<T>(_ text: Swift.String, _ def: [T], _ type: T.Type) -> [T]
  public static func parseArray<T>(_ text: Swift.String, _ type: T.Type) -> [T]? where T : Swift.Decodable
  public static func parseArray<T>(_ text: Swift.String, _ def: [T], _ type: T.Type) -> [T] where T : Swift.Decodable
  public static func stringify(_ value: Any?) -> Swift.String?
  public static func stringify<T>(_ value: T?) -> Swift.String? where T : Swift.Encodable
  @objc deinit
}
public let dc_storage_aes_key: Swift.String
public let dc_storage_path_component: Swift.String
public let dc_storage_old_path_component: Swift.String
extension CoreFoundation.CGSize {
  public init(_ width: CoreFoundation.CGFloat, _ height: CoreFoundation.CGFloat)
  public init(_ width: Swift.Int, _ height: Swift.Int)
  public init(_ width: Swift.Double, _ height: Swift.Double)
}
extension Swift.Float {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  postfix public static func -- (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  prefix public static func ++ (item: inout Swift.Float) -> Swift.Float
  @discardableResult
  prefix public static func -- (item: inout Swift.Float) -> Swift.Float
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Float
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
}
extension Swift.String {
  public var length: Swift.Int {
    get
  }
  public func at(_ pos: Swift.Int) -> Swift.String?
  public func at(_ pos: Foundation.NSNumber) -> Swift.String?
  public func charAt(_ pos: Swift.Int) -> Swift.String
  public func charAt(_ pos: Foundation.NSNumber) -> Swift.String
  public func charCodeAt(_ index: Swift.Int) -> Foundation.NSNumber
  public func charCodeAt(_ index: Foundation.NSNumber) -> Foundation.NSNumber
  public func codePointAt(_ pos: Swift.Int) -> Foundation.NSNumber?
  public func codePointAt(_ pos: Foundation.NSNumber) -> Foundation.NSNumber?
  public func concat(_ strings: Swift.String...) -> Swift.String
  public func endsWith(_ searchString: Swift.String) -> Swift.Bool
  public func endsWith(_ searchString: Swift.String, _ endPosition: Swift.Int?) -> Swift.Bool
  public func endsWith(_ searchString: Swift.String, _ endPosition: Foundation.NSNumber?) -> Swift.Bool
  public func includes(_ searchString: Swift.String) -> Swift.Bool
  public func includes(_ searchString: Swift.String, _ position: Swift.Int?) -> Swift.Bool
  public func includes(_ searchString: Swift.String, _ position: Foundation.NSNumber?) -> Swift.Bool
  public func indexOf(_ searchString: Swift.String) -> Swift.Int
  public func indexOf(_ searchString: Swift.String, _ position: Swift.Int?) -> Swift.Int
  public func indexOf(_ searchString: Swift.String, _ position: Foundation.NSNumber?) -> Foundation.NSNumber
  public func padStart(_ length: Swift.Int, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padStart(_ length: Foundation.NSNumber, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padEnd(_ length: Swift.Int, _ fillStr: Swift.String? = nil) -> Swift.String
  public func padEnd(_ length: Foundation.NSNumber, _ fillStr: Swift.String? = nil) -> Swift.String
  public func `repeat`(_ count: Swift.Int) -> Swift.String
  public func `repeat`(_ count: Foundation.NSNumber) -> Swift.String
  public func slice() -> Swift.String
  public func slice(_ start: Swift.Int?, _ end: Swift.Int? = nil) -> Swift.String
  public func slice(_ start: Foundation.NSNumber?, _ end: Foundation.NSNumber? = nil) -> Swift.String
  public func toLowerCase() -> Swift.String
  public func toUpperCase() -> Swift.String
  public func replaceAll(_ pattern: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func replace(_ pattern: Swift.String, _ replacement: Swift.String) -> Swift.String
  public func split(_ separator: Swift.String) -> [Swift.String]
  public func split(_ separator: Swift.String, _ limit: Swift.Int) -> [Swift.String]
  public func split(_ separator: Swift.String, _ limit: Foundation.NSNumber) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp, _ limit: Swift.Int?) -> [Swift.String]
  public func split(_ regex: DCloudUTSFoundation.UTSRegExp, _ limit: Foundation.NSNumber?) -> [Swift.String]
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replaceValue: Swift.String) -> Swift.String
  public func replaceAll(_ regex: DCloudUTSFoundation.UTSRegExp, _ replaceValue: Swift.String) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String]) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String) -> Swift.String)?) -> Swift.String
  public func replace(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String, _ p: [Swift.String], _ offset: Foundation.NSNumber, _ string: Swift.String, _ groups: DCloudUTSFoundation.UTSJSONObject) -> Swift.String)?) -> Swift.String
  public func replaceAll(_ regex: DCloudUTSFoundation.UTSRegExp, _ replacer: ((_ match: Swift.String) -> Swift.String)?) -> Swift.String
  public func search(_ regex: DCloudUTSFoundation.UTSRegExp) -> Swift.Int
  public func search(_ regex: DCloudUTSFoundation.UTSRegExp) -> Foundation.NSNumber
  public func match(_ regex: DCloudUTSFoundation.UTSRegExp? = nil) -> DCloudUTSFoundation.RegExpMatchArray?
  public func matchAll(_ regex: DCloudUTSFoundation.UTSRegExp? = nil) -> DCloudUTSFoundation.RegExpMatchArray?
  public func startsWith(_ searchString: Swift.String) -> Swift.Bool
  public func startsWith(_ searchString: Swift.String, _ position: Swift.Int) -> Swift.Bool
  public func startsWith(_ searchString: Swift.String, _ position: Foundation.NSNumber) -> Swift.Bool
  public func substring(_ indexStart: Swift.Int) -> Swift.String
  public func substring(_ indexStart: Swift.Int, _ indexEnd: Swift.Int) -> Swift.String
  public func substring(_ indexStart: Foundation.NSNumber, _ indexEnd: Foundation.NSNumber) -> Swift.String
  public func trim() -> Swift.String
  public func trimStart() -> Swift.String
  public func trimEnd() -> Swift.String
  public func toString() -> Swift.String
  public func valueOf() -> Swift.String
  public func lastIndexOf(_ searchValue: Swift.String) -> Foundation.NSNumber
  public func lastIndexOf(_ searchValue: Swift.String, _ fromIndex: Swift.Int) -> Swift.Int
  public func lastIndexOf(_ searchValue: Swift.String, _ fromIndex: Foundation.NSNumber) -> Foundation.NSNumber
  public static func fromCharCode(_ code: Foundation.NSNumber...) -> Swift.String
  public static func fromCodePoint(_ code: Foundation.NSNumber...) -> Swift.String
}
public protocol IUTSObject {
}
public protocol UTSObject : DCloudUTSFoundation.DCUTSSequence, DCloudUTSFoundation.IUTSObject {
}
public struct DCUniIterator : Swift.IteratorProtocol {
  public mutating func next() -> Swift.String?
  public typealias Element = Swift.String
}
public protocol DCUTSSequence : Swift.Sequence {
}
extension DCloudUTSFoundation.DCUTSSequence {
  public func makeIterator() -> DCloudUTSFoundation.DCUniIterator
}
extension DCloudUTSFoundation.DCUTSSequence {
  public func utsSubscriptGetValue(_ key: Swift.String) -> Any?
  public func utsSubscriptCheckValue<T>(_ value: Any?) throws -> T
  public func utsSubscriptCheckValueIfPresent<T>(_ value: Any?) throws -> T?
}
public let NaN: Foundation.NSNumber
public let Infinity: Foundation.NSNumber
public var DCUTSApiErrorInfo: [Swift.String : Swift.String]
public func isNaN(_ value: Foundation.NSNumber) -> Swift.Bool
public func isFinite(_ value: Any) -> Swift.Bool
public func parseInt(_ value: Swift.String) -> Foundation.NSNumber
public func parseInt(_ value: Swift.String, _ radix: Foundation.NSNumber) -> Foundation.NSNumber
public func parseInt(_ value: Swift.String, _ radix: Swift.Int) -> Foundation.NSNumber
public func parseFloat(_ str: Swift.String) -> Foundation.NSNumber
public func decodeURI(_ encodedURI: Swift.String) -> Swift.String?
public func decodeURIComponent(_ encodedURI: Swift.String) -> Swift.String?
public func encodeURI(_ string: Swift.String) -> Swift.String?
public func encodeURIComponent(_ string: Swift.String) -> Swift.String?
public func UTSTrycatch(_ task: () throws -> Swift.Void, _ cb: (DCloudUTSFoundation.UTSError) -> Swift.Void)
@objc @_inheritsConvenienceInitializers open class UTSError : ObjectiveC.NSObject, Swift.Error {
  public var domain: Swift.String
  public var userInfo: [Swift.String : Any]
  public var code: Swift.Int
  public var message: Swift.String
  public var name: Swift.String
  public var cause: DCloudUTSFoundation.UTSError?
  public var stack: Swift.String {
    get
  }
  @objc override dynamic public init()
  convenience public init(_ message: Swift.String)
  convenience public init(_ error: any Swift.Error)
  public func toString() -> Swift.String
  @objc deinit
}
public protocol AsyncApiResult {
  var errMsg: Swift.String { get set }
}
public protocol IUniError : DCloudUTSFoundation.AsyncApiResult {
  var errCode: Foundation.NSNumber { get set }
  var errSubject: Swift.String { get set }
  var data: Any? { get set }
  var cause: DCloudUTSFoundation.UTSError? { get set }
}
@_inheritsConvenienceInitializers @objc(UniError) @objcMembers open class UniError : DCloudUTSFoundation.UTSError, DCloudUTSFoundation.IUniError {
  @objc open var errSubject: Swift.String
  @objc open var errCode: Foundation.NSNumber
  @objc open var errMsg: Swift.String
  @objc open var data: Any?
  @objc public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil)
  @objc override dynamic public init()
  @objc public func toJsObject() -> [Swift.String : Any]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SourceError) @objcMembers public class SourceError : DCloudUTSFoundation.UTSError {
  @objc override dynamic public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(AggregateError) @objcMembers public class AggregateError : DCloudUTSFoundation.UTSError {
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc(UniAggregateError) @objcMembers public class UniAggregateError : DCloudUTSFoundation.SourceError {
  @objc public var errors: Swift.Array<DCloudUTSFoundation.UTSError>?
  @objc public init(_ errors: [DCloudUTSFoundation.UTSError])
  @objc public init(_ errors: [DCloudUTSFoundation.UTSError], _ message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(SyntaxError) @objcMembers public class SyntaxError : DCloudUTSFoundation.UTSError {
  @objc override dynamic public init()
  @objc deinit
}
extension DCloudUTSFoundation.UTSError {
  convenience public init(_ message: Swift.String, _ options: DCloudUTSFoundation.UTSJSONObject)
}
extension DCloudUTSFoundation.UniError {
  @objc convenience dynamic public init(_ errSubject: Swift.String, _ errCode: Foundation.NSNumber, _ errMsg: Swift.String, _ data: Any? = nil, _ options: DCloudUTSFoundation.UTSJSONObject? = nil)
}
extension DCloudUTSFoundation.UniAggregateError {
  @objc convenience dynamic public init(_ errors: [DCloudUTSFoundation.UTSError], _ message: Swift.String, _ options: DCloudUTSFoundation.UTSJSONObject)
}
extension Swift.Double {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  postfix public static func -- (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  prefix public static func ++ (item: inout Swift.Double) -> Swift.Double
  @discardableResult
  prefix public static func -- (item: inout Swift.Double) -> Swift.Double
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Double
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
}
public typealias UTSSet = Foundation.NSMutableSet
extension Foundation.NSMutableSet {
  public var size: Foundation.NSNumber {
    get
  }
  convenience public init(_ item: [Any])
  public func delete(_ value: Any)
  public func clear()
  public func has(_ value: Any) -> Swift.Bool
  public func forEach(_ callback: (_ value: Any, _ key: Any, _ set: Foundation.NSMutableSet) -> Swift.Void)
  public func forEach(_ callback: (_ value: Any, _ key: Any) -> Swift.Void)
  public func forEach(_ callback: (_ value: Any) -> Swift.Void)
}
extension Swift.KeyedEncodingContainer {
  public mutating func encode<T>(_ value: T, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws
  public mutating func encode<T>(_ value: T, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws where T : Swift.Encodable
  public mutating func encodeIfPresent<T>(_ value: T?, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws
  public mutating func encodeIfPresent<T>(_ value: T?, forKey key: Swift.KeyedEncodingContainer<K>.Key, _ encoder: any Swift.Encoder) throws where T : Swift.Encodable
}
infix operator >>> : BitwiseShiftPrecedence
infix operator >>>= : AssignmentPrecedence
postfix operator ++
prefix operator --
public func toSliceIndex(_ value: Swift.Int, _ length: Swift.Int) -> Swift.Int
public func toSliceIndex(_ value: Foundation.NSNumber, _ length: Foundation.NSNumber) -> Foundation.NSNumber
extension Swift.Int {
  @discardableResult
  postfix public static func ++ (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  postfix public static func -- (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  prefix public static func ++ (item: inout Swift.Int) -> Swift.Int
  @discardableResult
  prefix public static func -- (item: inout Swift.Int) -> Swift.Int
  public static func >>> (l: Swift.Int, r: Swift.Int) -> Swift.Int
  public static func >>>= (l: inout Swift.Int, r: Swift.Int) -> Swift.Int
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Int
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
}
extension Swift.UInt {
  public init(item: Foundation.NSNumber)
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.UInt
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
}
extension Swift.Int32 {
  public static func >>> (l: Swift.Int32, r: Swift.Int32) -> Swift.Int32
  public static func >>>= (l: inout Swift.Int32, r: Swift.Int32) -> Swift.Int32
  public func toFixed(_ fractionDigits: Swift.Int) -> Swift.String
  public func toFixed(_ fractionDigits: Foundation.NSNumber) -> Swift.String
  public func toString() -> Swift.String
  public func toString(_ base: Swift.Int) -> Swift.String
  public func toString(_ base: Foundation.NSNumber) -> Swift.String
  public func valueOf() -> Swift.Int32
  public func toPrecision() -> Swift.String
  public func toPrecision(_ precision: Swift.Int) -> Swift.String
  public func toPrecision(_ precision: Foundation.NSNumber) -> Swift.String
  public func toExponential() -> Swift.String
  public func toExponential(_ fractionDigits: Swift.Int) -> Swift.String
  public func toExponential(_ fractionDigits: Foundation.NSNumber) -> Swift.String
}
@_hasMissingDesignatedInitializers public class IPATypeBridge {
  public static var baseIpa: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers @objcMembers public class DCUTSCommitLogBridge {
  @objc public static var handler: ((Swift.String, Swift.String) -> Swift.Void)? {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @objcMembers public class UTSBridge : ObjectiveC.NSObject {
  @objc public class func registerJavaScriptClassInstance(_ obj: Swift.AnyObject) -> Swift.Int
  @objc public static func getInstanceId() -> Swift.Int
  @objc public static func storeInstance(obj: Swift.AnyObject) -> Swift.Int
  @objc public static func getInstanceById(_ instanceId: Swift.String) -> Any?
  @objc override dynamic public init()
  @objc deinit
}
extension Swift.KeyedDecodingContainer {
  public func decode<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T
  public func decode<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T where T : Swift.Decodable
  public func decodeIfPresent<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T?
  public func getDecoderError<T>(_ type: T.Type, _ key: Swift.KeyedDecodingContainer<K>.Key) -> Swift.DecodingError
  public func decodeIfPresent<T>(_ type: T.Type, forKey key: Swift.KeyedDecodingContainer<K>.Key, _ decoder: any Swift.Decoder) throws -> T? where T : Swift.Decodable
}
public protocol LogSelf {
  func toLog() -> Any?
}
@_hasMissingDesignatedInitializers public class console {
  public static func log(_ items: Any?...)
  public static func debug(_ items: Any?...)
  public static func info(_ items: Any?...)
  public static func error(_ items: Any?...)
  public static func warn(_ items: Any?...)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(UTSJSONObject) @objcMembers public class UTSJSONObject : ObjectiveC.NSObject, Swift.Sequence {
  @objc public var __utsJsonObjectMap: [Swift.String : Any]
  @objc override dynamic public init()
  @objc public init(dictionary: [Swift.String : Any])
  public init(_ item: [Swift.String : Any?])
  @objc convenience public init(_ item: Any)
  @objc public subscript(key: Swift.String) -> Any? {
    @objc get
    @objc set
  }
  @objc public func set(_ key: Swift.String, _ value: Any?)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc public func toMap() -> [Swift.String : Any]
  @objc public func toString() -> Swift.String
  public func makeIterator() -> DCloudUTSFoundation.DCUTSJSONObjectIterator
  public typealias Element = Swift.String
  public typealias Iterator = DCloudUTSFoundation.DCUTSJSONObjectIterator
  @objc deinit
}
extension DCloudUTSFoundation.UTSJSONObject {
  @objc dynamic public func getString(_ keyPath: Swift.String) -> Swift.String?
  @objc dynamic public func getString(_ keyPath: Swift.String, _ def: Swift.String) -> Swift.String
  @objc dynamic public func getNumber(_ keyPath: Swift.String) -> Foundation.NSNumber?
  @objc dynamic public func getNumber(_ keyPath: Swift.String, _ def: Foundation.NSNumber) -> Foundation.NSNumber
  public func getBoolean(_ keyPath: Swift.String) -> Swift.Bool?
  @objc dynamic public func getBoolean(_ keyPath: Swift.String, _ def: Swift.Bool) -> Swift.Bool
  @objc dynamic public func getJSON(_ keyPath: Swift.String) -> DCloudUTSFoundation.UTSJSONObject?
  @objc dynamic public func getJSON(_ keyPath: Swift.String, _ def: DCloudUTSFoundation.UTSJSONObject) -> DCloudUTSFoundation.UTSJSONObject
  @objc dynamic public func getAny(_ keyPath: Swift.String) -> Any?
  @objc dynamic public func getAny(_ keyPath: Swift.String, _ def: Any) -> Any
  @objc dynamic public func getArray(_ keyPath: Swift.String) -> [Any]?
  @objc dynamic public func getArrayDef(_ keyPath: Swift.String, _ def: [Any]) -> [Any]
  public func getArray<E>(_ key: Swift.String) -> [E]?
  public func getArray<E>(_ keyPath: Swift.String, _ def: [E]) -> [E]
  public func getArray<E>(_ key: Swift.String) -> [E]? where E : Swift.Decodable
  public func getArray<E>(_ keyPath: Swift.String, _ def: [E]) -> [E] where E : Swift.Decodable
  @objc dynamic public func hasOwnProperty(_ key: Swift.String) -> Swift.Bool
}
public struct DCUTSJSONObjectIterator : Swift.IteratorProtocol {
  public mutating func next() -> Swift.String?
  public typealias Element = Swift.String
}
