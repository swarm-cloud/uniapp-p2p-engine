{"version":3,"sources":["main.uts","App.uvue","uni_modules/cdnbye-swarmcloud/utssdk/app-ios/index.uts"],"sourcesContent":["import App from './App.uvue'\r\n\r\nimport { createSSRApp } from 'vue'\r\nexport function createApp() {\r\n\tconst app = createSSRApp(App)\r\n\treturn {\r\n\t\tapp\r\n\t}\r\n}\nexport function main(app: IApp) {\n    definePageRoutes();\n    defineAppConfig();\n    \n    (createApp()['app'] as VueApp).mount(app);\n}\n\nimport { AppConfig } from \"io.dcloud.uniapp.appframe\"\nexport class UniAppConfig extends AppConfig {\n    override name: string = \"swarmcloudP2p\"\n    override appid: string = \"__UNI__1EF92C5\"\n    override versionName: string = \"1.0.0\"\n    override versionCode: string = \"100\"\n    override uniCompileVersion: string = \"4.13\"\n    \n    constructor() {}\n}\n\nimport GenPagesIndexIndexClass from './pages/index/index.uvue?type=page'\nfunction definePageRoutes() {\n__uniRoutes.push({ path: \"pages/index/index\", component: GenPagesIndexIndexClass, meta: { isQuit: true } as PageMeta, style: utsMapOf([[\"navigationBarTitleText\",\"uni-app x\"]]) } as PageRoute)\n}\nconst __uniTabBar: Map<string, any | null> | null = null\nconst __uniLaunchPage: Map<string, any | null> = utsMapOf([[\"url\",\"pages/index/index\"],[\"style\",utsMapOf([[\"navigationBarTitleText\",\"uni-app x\"]])]])\n@Suppress(\"UNCHECKED_CAST\")\nfunction defineAppConfig(){\n  __uniConfig.entryPagePath = '/pages/index/index'\n  __uniConfig.globalStyle = utsMapOf([[\"navigationBarTextStyle\",\"black\"],[\"navigationBarTitleText\",\"uni-app x\"],[\"navigationBarBackgroundColor\",\"#F8F8F8\"],[\"backgroundColor\",\"#F8F8F8\"]])\n  __uniConfig.tabBar = __uniTabBar as Map<string, any> | null\n  __uniConfig.conditionUrl = ''\n  __uniConfig.uniIdRouter = utsMapOf()\n  __uniConfig.ready = true\n}\n","\r\n\tlet firstBackTime = 0\r\n\texport default {\r\n\t\tonLaunch: function () {\r\n\t\t\tconsole.log('App Launch', \" at App.uvue:5\")\r\n\t\t},\r\n\t\tonShow: function () {\r\n\t\t\tconsole.log('App Show', \" at App.uvue:8\")\r\n\t\t},\r\n\t\tonHide: function () {\r\n\t\t\tconsole.log('App Hide', \" at App.uvue:11\")\r\n\t\t},\r\n\r\n\t\tonLastPageBackPress: function () {\r\n\t\t\tconsole.log('App LastPageBackPress', \" at App.uvue:15\")\r\n\t\t\tif (firstBackTime == 0) {\r\n\t\t\t\tuni.showToast({\r\n\t\t\t\t\ttitle: '再按一次退出应用',\r\n\t\t\t\t\tposition: 'bottom',\r\n\t\t\t\t})\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tsetTimeout(() => {\r\n\t\t\t\t\tfirstBackTime = 0\r\n\t\t\t\t}, 2000)\r\n\t\t\t} else if (Date.now() - firstBackTime < 2000) {\r\n\t\t\t\tfirstBackTime = Date.now()\r\n\t\t\t\tuni.exit()\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonExit: function () {\r\n\t\t\tconsole.log('App Exit', \" at App.uvue:32\")\r\n\t\t},\r\n\t}\r\n\n\nconst GenAppStyles = [utsMapOf([[\"uni-row\", padStyleMapOf(utsMapOf([[\"flexDirection\", \"row\"]]))], [\"uni-column\", padStyleMapOf(utsMapOf([[\"flexDirection\", \"column\"]]))]])]\n","/**\r\n * 引用 iOS 系统库，示例如下：\r\n * import { UIDevice } from \"UIKit\";\r\n * [可选实现，按需引入]\r\n */\n// 从 DCloudUTSFoundation 依赖库中导入 UTSiOS 类\n/* import { UTSiOS } from \"DCloudUTSFoundation\";\nimport { UIDevice } from \"UIKit\"; */\n\nimport { P2pConfig,P2pEngine,TrackerZone,LogLevel } from \"SwarmCloudKit\";\nimport { Double } from 'Swift';\n\r\nlet logArr = [LogLevel.VERBOSE,LogLevel.DEBUG,LogLevel.INFO,LogLevel.WARN,LogLevel.ERROR];\nlet zoneArr = [TrackerZone.Europe,TrackerZone.HongKong,TrackerZone.USA];\r\nexport type ConfigOptions = {\n  p2pEnabled?: boolean,// 开启或关闭p2p engine 默认true\n  useStrictHlsSegmentId?: boolean,//使用基于url的SegmentId，替代默认基于序列号的 默认false\n  isSetTopBox?: boolean,// 如果运行于机顶盒请设置成true 默认false 安卓有 ios没有\r\n  logEnabled?: boolean,// 是否打印日志 默认false\n  logLevel?: number,// 打印日志的级别0:VERBOSE,1:DEBUG,2:INFO,3:WARN,4:ERROR 默认3\n  trackerZone?:number,// tracker服务器地址所在国家的枚举，分为0:Europe,1:HongKong,2:USA 默认0\n  downloadTimeout?:number,// HTTP下载ts文件超时时间  默认30000ms 安卓有 ios没有\n  localPortHls?:number,// HLS本地代理服务器的端口号(默认随机端口)\n  localPortDash?:number,// DASH本地代理服务器的端口号(默认随机端口) 安卓有 ios没有\n  diskCacheLimit?:number,// 点播模式下P2P在磁盘缓存的最大数据量(设为0可以禁用磁盘缓存) 默认2000*1024*1024\n  memoryCacheCountLimit?:number,// P2P在内存缓存的最大数据量，用ts文件个数表示 默认15\n  maxPeerConnections?:number,// 最大连接节点数量 默认25\n  useHttpRange?:boolean,// 在可能的情况下使用Http Range请求来补足p2p下载超时的剩余部分数据 默认true\n  httpHeadersForHls?:Map<string,string>,// 设置请求ts和m3u8时的HTTP请求头 默认null\n  httpHeadersForDash?:Map<string,string>,// 设置请求Dash文件时的HTTP请求头 默认null 安卓有 ios没有\n  httpLoadTime?:number,// P2P下载超时后留给HTTP下载的时间 默认3s\n  sharePlaylist?:boolean,// 是否允许m3u8文件的P2P传输 默认false\n  insertTimeOffsetTag?:number,// 仅在直播模式生效，在m3u8文件中插入 \"#EXT-X-START:TIME-OFFSET=[timeOffset]\"，强制播放器从某个位置开始加载，其中 [timeOffset] 是在播放列表的偏移量，如果为负则从播放列表结尾往前偏移（单位：秒）\r\n  mediaFileSeparator?:string,// 媒体文件后缀分隔符 默认“.”\n}\r\n//初始化 \r\nexport  function initP2p (token:string,configOptions:ConfigOptions|null=null):void {\n\n\t\n\tif(configOptions!=null){\n\t\tlet config = P2pConfig();\n\t\t\tif(configOptions!.p2pEnabled!=null){\n\t\t\t\tconfig.p2pEnabled=configOptions!.p2pEnabled as boolean;\n\t\t\t}\n\t\t\tif(configOptions!.useStrictHlsSegmentId!=null){\n\t\t\t\tconfig.useStrictHlsSegmentId=configOptions!.useStrictHlsSegmentId as boolean;\n\t\t\t}\n\t\t\tif(configOptions!.trackerZone!=null){\n\t\t\t\tconfig.trackerZone=zoneArr[configOptions!.trackerZone as number];\n\t\t\t}\n\t\t\tif(configOptions!.logEnabled!=null){\n\t\t\t\tconfig.debug=configOptions!.logEnabled  as boolean;\n\t\t\t}\n\t\t\tif(configOptions!.logLevel!=null){\n\t\t\t\tconfig.logLevel=logArr[configOptions!.logLevel as number];\n\t\t\t}\n\t\t\tif(configOptions!.localPortHls!=null){\n\t\t\t\tconfig.localPortHls=(configOptions!.localPortHls as number).toUInt();\n\t\t\t}\n\t\t\tif(configOptions!.diskCacheLimit!=null){\n\t\t\t\tconfig.diskCacheLimit=(configOptions!.diskCacheLimit as number).toUInt();\n\t\t\t}\n\t\t\tif(configOptions!.memoryCacheCountLimit!=null){\n\t\t\t\tconfig.memoryCacheCountLimit=(configOptions!.memoryCacheCountLimit as number).toUInt();\n\t\t\t}\n\t\t\tif(configOptions!.maxPeerConnections!=null){\n\t\t\t\tconfig.maxPeerConnections=(configOptions!.maxPeerConnections as number).toInt();\n\t\t\t}\n\t\t\tif(configOptions!.useHttpRange!=null){\n\t\t\t\tconfig.useHttpRange=configOptions!.useHttpRange as boolean;\n\t\t\t}\n\t\t\tif(configOptions!.httpHeadersForHls!=null){\n\t\t\t\tconfig.httpHeadersHls=configOptions!.httpHeadersForHls;\n\t\t\t}\n\t\t\tif(configOptions!.httpLoadTime!=null){\n\t\t\t\tconfig.httpLoadTime=(configOptions!.httpLoadTime as number).toDouble();\n\t\t\t}\n\t\t\tif(configOptions!.sharePlaylist!=null){\n\t\t\t\tconfig.sharePlaylist=configOptions!.sharePlaylist as boolean;\n\t\t\t}\n\t\t\tif(configOptions!.insertTimeOffsetTag!=null){\n\t\t\t\tconfig.playlistTimeOffset=(configOptions!.insertTimeOffsetTag as number).toDouble();\n\t\t\t}\n\t\t\tif(configOptions!.mediaFileSeparator!=null){\n\t\t\t\tconfig.mediaFileSeparator=configOptions!.mediaFileSeparator as string;\n\t\t\t}\n\t\t\n\t\n\t\t\n\t\tP2pEngine.setup(token=token, config=config)\n\t}else{\n\t\tP2pEngine.setup(token=token) \n\t}\n\tconsole.log(\"初始化完成\")\n\t\n\t\n\t\r\n\n}\n//将url转换成p2pUrl\n//除了原始播放地址(m3u8/mpd)，同时传入videoId用以构造channelId\nexport function  getP2pUrl(url : string,videoId:string|null=null) : string {\n\tlet parseUrl:string;\n\t\n\tif(videoId!=null){\n\t\t\n\t\tparseUrl= P2pEngine.shared.parseStreamUrl(url,videoId=videoId);\n\t\t\n\t\t\n\t}else{\n\t\tparseUrl=P2pEngine.shared.parseStreamUrl(url);\n\t\t\n\t}\r\n    return  parseUrl;\r\n}\n//当前插件的版本号。\nexport function getP2pEngineVersion():string{\n\t\n\treturn P2pEngine.VERSION;\n}\n//是否已与CDNBye后台建立连接。\nexport function p2pIsConnected():boolean{\n\treturn P2pEngine.shared.isConnected;\n}\n//立即停止P2P加速并释放资源，一般只需要在退出APP的时候调用即可。SDK采用\"懒释放\"的策略，只有在重启p2p的时候才释放资源。对于性能较差的设备起播耗时可能比较明显，建议在视频播放之前提前调用 engine.stopP2p() 。\nexport function stopP2p():void{\n\t P2pEngine.shared.stopP2p();\n}\n\n//重启P2P加速服务，一般不需要调用。\nexport function restartP2p():boolean{\n\treturn P2pEngine.shared.restartP2p();\n}\n\n//获取对等连接的id。\nexport function peerId():string{\n\treturn P2pEngine.shared.peerId;\n}\n\n\n//运行时动态关闭P2P，在播放下一个媒体文件时才生效。\nexport function disableP2p():void{\n\t P2pEngine.shared.disableP2p();\n}\n\n\n//运行时动态开启P2P，在播放下一个媒体文件时才生效。\nexport function enableP2p():void{\n\t P2pEngine.shared.enableP2p();\n}\n\n//停止P2P并关闭代理服务器。\nexport function shutdownP2p():void{\n\t P2pEngine.shared.shutdown();\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAgBA,iCAAS;+BCUD;+BAVA;AAfP,IAAI,wBAAgB,CAAC;;;iBAEV,wBAAY;YACrB,QAAQ,GAAG,CAAC,cAAc;QAC3B;;kBACQ,sBAAY;YACnB,QAAQ,GAAG,CAAC,YAAY;QACzB;;eACQ,MAAY;YACnB,QAAQ,GAAG,CAAC,YAAY;QACzB;;4BAEqB,MAAY;YAChC,QAAQ,GAAG,CAAC,yBAAyB;YACrC,IAAI,iBAAiB,CAAC,EAAE;gBACvB,+BACC,QAAO,YACP,WAAU;gBAEX,gBAAgB,KAAK,GAAG;gBACxB,WAAW,KAAM;oBAChB,gBAAgB,CAAC;gBAClB,GAAG,IAAI;YACR,OAAO,IAAI,KAAK,GAAG,KAAK,gBAAgB,IAAI,EAAE;gBAC7C,gBAAgB,KAAK,GAAG;gBACxB;YACD;QACD;;eAEQ,MAAY;YACnB,QAAQ,GAAG,CAAC,YAAY;QACzB;;;;;;;;;;;;uBAIoB,SAAW,aAAW,cAAc,SAAW,mBAAiB,SAAa,gBAAc,cAAc,SAAW,mBAAiB;;;;;;;;;;;;;;;;;;ADjCpJ,IAAS,2BAAY;IAC3B,IAAM,MAAM;IACZ,OAAO;QACN,IAAA,MAAA;KACA;AACF;AACO,IAAS,KAAK,KAAK,IAAI,EAAE;IAC5B;IACA;IAEA,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,CAAC;AACzC;AAGO,WAAM,eAAqB;IAC9B,aAAS,MAAM,MAAM,GAAG,gBAAe;IACvC,aAAS,OAAO,MAAM,GAAG,iBAAgB;IACzC,aAAS,aAAa,MAAM,GAAG,QAAO;IACtC,aAAS,aAAa,MAAM,GAAG,MAAK;IACpC,aAAS,mBAAmB,MAAM,GAAG,OAAM;IAE3C,aAAc,CAAC;AACnB;AAGA,IAAS,mBAAmB;IAC5B,YAAY,IAAI,WAAG,OAAM,qBAAqB,qCAAoC,gBAAQ,SAAQ,IAAI,GAAgB,QAAO,SAAW,4BAAyB;AACjK;AACA,IAAM,aAAa,IAAI,MAAM,EAAE,GAAG,MAAkB,IAAI;AACxD,IAAM,iBAAiB,IAAI,MAAM,EAAE,GAAG,KAAW,SAAW,SAAM,qBAAsB,WAAQ,SAAW,4BAAyB;AACpI,CAAC,SAAS;AAAiB,IAClB,kBAAiB;IACxB,YAAY,aAAa,GAAG;IAC5B,YAAY,WAAW,GAAG,SAAW,4BAAyB,SAAU,4BAAyB,aAAc,kCAA+B,WAAY,qBAAkB;IAC5K,YAAY,MAAM,GAAG,YAAY,EAAE,CAAC,IAAI,MAAM,EAAE,GAAG;IACnD,YAAY,YAAY,GAAG;IAC3B,YAAY,WAAW,GAAG;IAC1B,YAAY,KAAK,GAAG,IAAI;AAC1B;;wBEzCA,EAAE"}