import P2pConfig from 'com.p2pengine.core.p2p.P2pConfig';
import P2pEngine from 'com.p2pengine.sdk.P2pEngine';
import TrackerZone from 'com.p2pengine.core.tracking.TrackerZone';
import LogLevel from 'com.p2pengine.core.utils.LogLevel';
import P2pStatisticsListener from 'com.p2pengine.core.p2p.P2pStatisticsListener';
import StrictHlsSegmentIdGenerator from 'com.p2pengine.core.segment.StrictHlsSegmentIdGenerator';
import MimeType from 'com.p2pengine.sdk.MimeType';
import TimeUnit from 'java.util.concurrent.TimeUnit';
import { ConfigOptions, onStatsCallback, StatsObject } from '../interface.uts';

/**
 * UTSAndroid 为平台内置对象，不需要 import 可直接调用其API，[详见](https://uniapp.dcloud.net.cn/uts/utsandroid.html#utsandroid)
 */
let logArr = [LogLevel.VERBOSE,LogLevel.DEBUG,LogLevel.INFO,LogLevel.WARN,LogLevel.ERROR];
let zoneArr = [TrackerZone.Europe,TrackerZone.HongKong,TrackerZone.USA,TrackerZone.China];


//初始化 
export  function initP2p (token:string,configOptions:ConfigOptions|null=null):void {
	
	let configBuilder = P2pConfig.Builder();
	if(configOptions!=null){
		if(configOptions.p2pDisabled!=null){
			configBuilder=configBuilder.p2pEnabled(!(configOptions.p2pDisabled as boolean));
		}
		if(configOptions.useStrictHlsSegmentId!=null){
			configBuilder=configBuilder.useStrictHlsSegmentId(configOptions.useStrictHlsSegmentId as boolean);
		}
		if(configOptions.isSetTopBox!=null){
			configBuilder=configBuilder.isSetTopBox(configOptions.isSetTopBox as boolean);
		}
		if(configOptions.logEnabled!=null){
			configBuilder=configBuilder.logEnabled(configOptions.logEnabled as boolean);
		}
		if(configOptions.logLevel!=null){
		
			configBuilder=configBuilder.logLevel(logArr[configOptions.logLevel as number]);
		}
		if(configOptions.trackerZone!=null){
			configBuilder=configBuilder.trackerZone(zoneArr[configOptions.trackerZone as number]);
		}
		if(configOptions.downloadTimeout!=null){
			configBuilder=configBuilder.downloadTimeout((configOptions.downloadTimeout as number).toInt(),TimeUnit.MILLISECONDS);
		}
		if(configOptions.localPortHls!=null){
		
			configBuilder=configBuilder.localPortHls((configOptions.localPortHls as number).toInt());
		}
		if(configOptions.localPortDash!=null){
		
			configBuilder=configBuilder.localPortDash((configOptions.localPortDash as number).toInt());
		}
		if(configOptions.diskCacheLimit!=null){
		
			configBuilder=configBuilder.diskCacheLimit((configOptions.diskCacheLimit as number).toLong());
		}
		if(configOptions.memoryCacheCountLimit!=null){
		
			configBuilder=configBuilder.memoryCacheCountLimit((configOptions.memoryCacheCountLimit as number).toInt());
		}
		if(configOptions.startFromSegmentOffset!=null){
		
			configBuilder=configBuilder.startFromSegmentOffset((configOptions.startFromSegmentOffset as number).toInt());
		}
		if(configOptions.maxPeerConnections!=null){
		
			configBuilder=configBuilder.maxPeerConnections((configOptions.maxPeerConnections as number).toInt());
		}
		if(configOptions.useHttpRange!=null){
		
			configBuilder=configBuilder.useHttpRange(configOptions.useHttpRange as boolean);
		}
		if(configOptions.httpHeadersForHls!=null){
		
			configBuilder=configBuilder.httpHeadersForHls(configOptions.httpHeadersForHls as Map<string,string>);
		}
		if(configOptions.httpHeadersForDash!=null){
		
			configBuilder=configBuilder.httpHeadersForDash(configOptions.httpHeadersForDash as Map<string,string>);
		}
		if(configOptions.sharePlaylist!=null){
		
			configBuilder=configBuilder.sharePlaylist(configOptions.sharePlaylist as boolean);
		}
		if(configOptions.prefetchOnly!=null){
		
			configBuilder=configBuilder.prefetchOnly(configOptions.prefetchOnly as boolean);
		}
		if(configOptions.downloadOnly!=null){
		
			configBuilder=configBuilder.downloadOnly(configOptions.downloadOnly as boolean);
		}
		if(configOptions.insertTimeOffsetTag!=null){
		
			configBuilder=configBuilder.insertTimeOffsetTag((configOptions.insertTimeOffsetTag as number).toDouble());
		}
		if(configOptions.announce!=null){
		
			configBuilder=configBuilder.announce(configOptions.announce as string);
		}
		if(configOptions.signalConfig!=null){
		
			configBuilder=configBuilder.signalConfig(configOptions.signalConfig as string, null);
		}
		if(configOptions.dashMediaFiles!=null){
		
			configBuilder=configBuilder.dashMediaFiles(configOptions.dashMediaFiles as Array<string>);
		}
		if(configOptions.tag!=null){
		
			configBuilder=configBuilder.withTag(configOptions.tag as string);
		} else {
			configBuilder=configBuilder.withTag("uniapp");
		}
	}
	
	let config=configBuilder.build();
	P2pEngine.init(UTSAndroid.getAppContext()!, token, config);
	

}
//如果媒体文件是由多个服务器生成的，为避免冲突，请调用此函数：
export function setHlsSegmentIdGenerator():void{
	
	P2pEngine.instance?.setHlsSegmentIdGenerator(new StrictHlsSegmentIdGenerator());
	
}

//将url转换成p2pUrl
//除了原始播放地址(m3u8/mpd)，同时传入videoId用以构造channelId
//除了原始播放地址(m3u8/mpd)以及videoId，同时传入mimeType（目前支持MimeType.APPLICATION_M3U8和MimeType.APPLICATION_MPD），用于无".m3u8"或".mpd"后缀的url。
export function  getP2pUrl(url : string,videoId:string|null=null,mimeType:string|null=null) : string {
	let parseUrl:string;
	
	if(videoId!=null){
		if(mimeType!=null){
			switch(mimeType){
				case 'm3u8':
					parseUrl= P2pEngine.instance!.parseStreamUrl(url,videoId,MimeType.APPLICATION_M3U8);
					break;
				case 'mpd':
					parseUrl= P2pEngine.instance!.parseStreamUrl(url,videoId,MimeType.APPLICATION_MPD);
					break;
				default:
					parseUrl= P2pEngine.instance!.parseStreamUrl(url,videoId);
			}
			
		}else{
			parseUrl= P2pEngine.instance!.parseStreamUrl(url,videoId);
		}
		
	}else{
		parseUrl=P2pEngine.instance!.parseStreamUrl(url);
		
	}
    return  parseUrl;
}
//当前插件的版本号。
export function getP2pEngineVersion():string{
	return P2pEngine.version;
}
//是否已与CDNBye后台建立连接。
export function p2pIsConnected():boolean{
	return P2pEngine.instance!.isConnected;
}

//立即停止P2P加速并释放资源，一般只需要在退出APP的时候调用即可。SDK采用"懒释放"的策略，只有在重启p2p的时候才释放资源。对于性能较差的设备起播耗时可能比较明显，建议在视频播放之前提前调用 engine.stopP2p() 。
export function stopP2p():void{
	 P2pEngine.instance!.stopP2p();
}

export function notifyPlaybackStalled():void{
	 P2pEngine.instance!.notifyPlaybackStalled();
}

//重启P2P加速服务，一般不需要调用。
export function restartP2p():boolean{
	return P2pEngine.instance!.restartP2p(null);
}

//获取对等连接的id。
export function peerId():string{
	return P2pEngine.instance!.peerId;
}


//动态设置请求ts和m3u8时的HTTP请求头。
export function setHttpHeadersForHls(headers: Map<string, string>):void{
	 P2pEngine.instance!.setHttpHeadersForHls(headers);
}


//动态设置请求Dash文件时的HTTP请求头。
export function setHttpHeadersForDash(headers: Map<string, string>):void{
	 P2pEngine.instance!.setHttpHeadersForDash(headers);
}

//运行时动态关闭P2P，在播放下一个媒体文件时才生效。
export function disableP2p():void{
	 P2pEngine.instance!.disableP2p();
}


//运行时动态开启P2P，在播放下一个媒体文件时才生效。
export function enableP2p():void{
	 P2pEngine.instance!.enableP2p();
}

//停止P2P并关闭代理服务器。
export function shutdownP2p():void{
	 P2pEngine.instance!.shutdown();
}

export function onP2pStats(callback: onStatsCallback):void{
	class MyP2pStatisticsListener implements P2pStatisticsListener {
		
		override onHttpDownloaded(value: Int) {
			callback({
				httpDownloaded: value as number,
			} as StatsObject)
		}
		override onP2pDownloaded(value: Int, speed: Int) {
			callback({
				p2pDownloaded: value as number,
				p2pDownloadSpeed: speed as number,
			} as StatsObject)
		}
		override onP2pUploaded(value: Int, speed: Int) {
			callback({
				p2pUploaded: value as number,
			} as StatsObject)
		}
		override onPeers(peers: List<string>) {
			callback({
				peers: peers.size,
			} as StatsObject)
		}
		override onServerConnected(connected: boolean) {
			callback({
				serverConnected: connected, 
			} as StatsObject)
		}
	}
	P2pEngine.instance?.addP2pStatisticsListener(new MyP2pStatisticsListener())
}





