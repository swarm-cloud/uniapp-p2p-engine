/**
 * 引用 iOS 系统库，示例如下：
 * import { UIDevice } from "UIKit";
 * [可选实现，按需引入]
 */
// 从 DCloudUTSFoundation 依赖库中导入 UTSiOS 类
/* import { UTSiOS } from "DCloudUTSFoundation";
import { UIDevice } from "UIKit"; */

import { P2pConfig,P2pEngine,TrackerZone,LogLevel } from "SwarmCloudKit";
import { Double } from 'Swift';

let logArr = [LogLevel.VERBOSE,LogLevel.DEBUG,LogLevel.INFO,LogLevel.WARN,LogLevel.ERROR];
let zoneArr = [TrackerZone.Europe,TrackerZone.HongKong,TrackerZone.USA];
export type ConfigOptions = {
  p2pEnabled?: boolean,// 开启或关闭p2p engine 默认true
  useStrictHlsSegmentId?: boolean,//使用基于url的SegmentId，替代默认基于序列号的 默认false
  isSetTopBox?: boolean,// 如果运行于机顶盒请设置成true 默认false 安卓有 ios没有
  logEnabled?: boolean,// 是否打印日志 默认false
  logLevel?: number,// 打印日志的级别0:VERBOSE,1:DEBUG,2:INFO,3:WARN,4:ERROR 默认3
  trackerZone?:number,// tracker服务器地址所在国家的枚举，分为0:Europe,1:HongKong,2:USA 默认0
  downloadTimeout?:number,// HTTP下载ts文件超时时间  默认30000ms 安卓有 ios没有
  localPortHls?:number,// HLS本地代理服务器的端口号(默认随机端口)
  localPortDash?:number,// DASH本地代理服务器的端口号(默认随机端口) 安卓有 ios没有
  diskCacheLimit?:number,// 点播模式下P2P在磁盘缓存的最大数据量(设为0可以禁用磁盘缓存) 默认2000*1024*1024
  memoryCacheCountLimit?:number,// P2P在内存缓存的最大数据量，用ts文件个数表示 默认15
  maxPeerConnections?:number,// 最大连接节点数量 默认25
  useHttpRange?:boolean,// 在可能的情况下使用Http Range请求来补足p2p下载超时的剩余部分数据 默认true
  httpHeadersForHls?:Map<string,string>,// 设置请求ts和m3u8时的HTTP请求头 默认null
  httpHeadersForDash?:Map<string,string>,// 设置请求Dash文件时的HTTP请求头 默认null 安卓有 ios没有
  httpLoadTime?:number,// P2P下载超时后留给HTTP下载的时间 默认3s
  sharePlaylist?:boolean,// 是否允许m3u8文件的P2P传输 默认false
  insertTimeOffsetTag?:number,// 仅在直播模式生效，在m3u8文件中插入 "#EXT-X-START:TIME-OFFSET=[timeOffset]"，强制播放器从某个位置开始加载，其中 [timeOffset] 是在播放列表的偏移量，如果为负则从播放列表结尾往前偏移（单位：秒）
  mediaFileSeparator?:string,// 媒体文件后缀分隔符 默认“.”
}
//初始化 
export  function initP2p (token:string,configOptions:ConfigOptions|null=null):void {

	
	if(configOptions!=null){
		let config = P2pConfig();
			if(configOptions!.p2pEnabled!=null){
				config.p2pEnabled=configOptions!.p2pEnabled as boolean;
			}
			if(configOptions!.useStrictHlsSegmentId!=null){
				config.useStrictHlsSegmentId=configOptions!.useStrictHlsSegmentId as boolean;
			}
			if(configOptions!.trackerZone!=null){
				config.trackerZone=zoneArr[configOptions!.trackerZone as number];
			}
			if(configOptions!.logEnabled!=null){
				config.debug=configOptions!.logEnabled  as boolean;
			}
			if(configOptions!.logLevel!=null){
				config.logLevel=logArr[configOptions!.logLevel as number];
			}
			if(configOptions!.localPortHls!=null){
				config.localPortHls=(configOptions!.localPortHls as number).toUInt();
			}
			if(configOptions!.diskCacheLimit!=null){
				config.diskCacheLimit=(configOptions!.diskCacheLimit as number).toUInt();
			}
			if(configOptions!.memoryCacheCountLimit!=null){
				config.memoryCacheCountLimit=(configOptions!.memoryCacheCountLimit as number).toUInt();
			}
			if(configOptions!.maxPeerConnections!=null){
				config.maxPeerConnections=(configOptions!.maxPeerConnections as number).toInt();
			}
			if(configOptions!.useHttpRange!=null){
				config.useHttpRange=configOptions!.useHttpRange as boolean;
			}
			if(configOptions!.httpHeadersForHls!=null){
				config.httpHeadersHls=configOptions!.httpHeadersForHls;
			}
			if(configOptions!.httpLoadTime!=null){
				config.httpLoadTime=(configOptions!.httpLoadTime as number).toDouble();
			}
			if(configOptions!.sharePlaylist!=null){
				config.sharePlaylist=configOptions!.sharePlaylist as boolean;
			}
			if(configOptions!.insertTimeOffsetTag!=null){
				config.playlistTimeOffset=(configOptions!.insertTimeOffsetTag as number).toDouble();
			}
			if(configOptions!.mediaFileSeparator!=null){
				config.mediaFileSeparator=configOptions!.mediaFileSeparator as string;
			}
		
	
		
		P2pEngine.setup(token=token, config=config)
	}else{
		P2pEngine.setup(token=token) 
	}
	console.log("初始化完成")
	
	
	

}
//将url转换成p2pUrl
//除了原始播放地址(m3u8/mpd)，同时传入videoId用以构造channelId
export function  getP2pUrl(url : string,videoId:string|null=null) : string {
	let parseUrl:string;
	
	if(videoId!=null){
		
		parseUrl= P2pEngine.shared.parseStreamUrl(url,videoId=videoId);
		
		
	}else{
		parseUrl=P2pEngine.shared.parseStreamUrl(url);
		
	}
    return  parseUrl;
}
//当前插件的版本号。
export function getP2pEngineVersion():string{
	
	return P2pEngine.VERSION;
}
//是否已与CDNBye后台建立连接。
export function p2pIsConnected():boolean{
	return P2pEngine.shared.isConnected;
}
//立即停止P2P加速并释放资源，一般只需要在退出APP的时候调用即可。SDK采用"懒释放"的策略，只有在重启p2p的时候才释放资源。对于性能较差的设备起播耗时可能比较明显，建议在视频播放之前提前调用 engine.stopP2p() 。
export function stopP2p():void{
	 P2pEngine.shared.stopP2p();
}

//重启P2P加速服务，一般不需要调用。
export function restartP2p():boolean{
	return P2pEngine.shared.restartP2p();
}

//获取对等连接的id。
export function peerId():string{
	return P2pEngine.shared.peerId;
}


//运行时动态关闭P2P，在播放下一个媒体文件时才生效。
export function disableP2p():void{
	 P2pEngine.shared.disableP2p();
}


//运行时动态开启P2P，在播放下一个媒体文件时才生效。
export function enableP2p():void{
	 P2pEngine.shared.enableP2p();
}

//停止P2P并关闭代理服务器。
export function shutdownP2p():void{
	 P2pEngine.shared.shutdown();
}
//动态设置请求ts和m3u8时的HTTP请求头。
export function setHttpHeadersForHls(headers: Map<string, string>):void{
	 P2pEngine.shared.setHttpHeadersForHls(headers);
}