
import { P2pConfig,P2pEngine,TrackerZone,LogLevel,SignalConfig,P2pStatisticsMonitor } from "SwarmCloudKit";
import { Double } from 'Swift';
import { ConfigOptions, onStatsCallback, StatsObject } from '../interface.uts';

let logArr = [LogLevel.VERBOSE,LogLevel.DEBUG,LogLevel.INFO,LogLevel.WARN,LogLevel.ERROR];
let zoneArr = [TrackerZone.Europe,TrackerZone.HongKong,TrackerZone.USA,TrackerZone.China];

export { ConfigOptions, StatsObject }

//初始化 
export function initP2p (token:string,configOptions:ConfigOptions|null=null):void {
	
	if(configOptions!=null){
		let config = P2pConfig(trackerZone=TrackerZone.Europe);
			if(configOptions!.p2pEnabled!=null){
				config.p2pEnabled=configOptions!.p2pEnabled as boolean;
			}
			if(configOptions!.useStrictHlsSegmentId!=null){
				config.useStrictHlsSegmentId=configOptions!.useStrictHlsSegmentId as boolean;
			}
			if(configOptions!.trackerZone!=null){
				config.trackerZone=zoneArr[configOptions!.trackerZone as number];
			}
			if(configOptions!.logEnabled!=null){
				config.debug=configOptions!.logEnabled  as boolean;
			}
			if(configOptions!.logLevel!=null){
				config.logLevel=logArr[configOptions!.logLevel as number];
			}
			if(configOptions!.localPortHls!=null){
				config.localPortHls=(configOptions!.localPortHls as number).toUInt();
			}
			if(configOptions!.diskCacheLimit!=null){
				config.diskCacheLimit=(configOptions!.diskCacheLimit as number).toUInt();
			}
			if(configOptions!.memoryCacheCountLimit!=null){
				config.memoryCacheCountLimit=(configOptions!.memoryCacheCountLimit as number).toUInt();
			}
			if(configOptions!.maxPeerConnections!=null){
				config.maxPeerConnections=(configOptions!.maxPeerConnections as number).toInt();
			}
			if(configOptions!.useHttpRange!=null){
				config.useHttpRange=configOptions!.useHttpRange as boolean;
			}
			if(configOptions!.httpHeadersForHls!=null){
				config.httpHeadersHls=configOptions!.httpHeadersForHls;
			}
			if(configOptions!.httpLoadTime!=null){
				config.httpLoadTime=(configOptions!.httpLoadTime as number).toDouble();
			}
			if(configOptions!.sharePlaylist!=null){
				config.sharePlaylist=configOptions!.sharePlaylist as boolean;
			}
			if(configOptions!.prefetchOnly!=null){
				config.prefetchOnly=configOptions!.prefetchOnly as boolean;
			}
			if(configOptions!.downloadOnly!=null){
				config.downloadOnly=configOptions!.downloadOnly as boolean;
			}
			if(configOptions!.insertTimeOffsetTag!=null){
				// config.playlistTimeOffset=(configOptions!.insertTimeOffsetTag as number).toDouble();
			}
			if(configOptions!.mediaFileSeparator!=null){
				config.mediaFileSeparator=configOptions!.mediaFileSeparator as string;
			}
			if(configOptions!.announce!=null){
				config.announce=configOptions!.announce as string;
			}
			if(configOptions!.signalConfig!=null){
				config.signalConfig=SignalConfig(mainAddr=configOptions!.signalConfig as string)
			}
			if(configOptions!.hlsMediaFiles!=null){
				config.hlsMediaFiles=configOptions!.hlsMediaFiles as Array<string>
			}
			if(configOptions!.tag!=null){
				config.customLabel=configOptions!.tag as string;
			} else {
				config.customLabel="uniapp";
			}
	
		
		P2pEngine.setup(token=token, config=config)
	}else{
		P2pEngine.setup(token=token, config=P2pConfig(trackerZone=TrackerZone.Europe)) 
	}

}
//将url转换成p2pUrl
//除了原始播放地址(m3u8/mpd)，同时传入videoId用以构造channelId
export function  getP2pUrl(url : string,videoId:string|null=null) : string {
	let parseUrl:string;
	
	if(videoId!=null){
		
		parseUrl= P2pEngine.shared.parseStreamUrl(url,videoId=videoId);
		
		
	}else{
		parseUrl=P2pEngine.shared.parseStreamUrl(url);
		
	}
    return  parseUrl;
}
//当前插件的版本号。
export function getP2pEngineVersion():string{
	
	return P2pEngine.VERSION;
}
//是否已与CDNBye后台建立连接。
export function p2pIsConnected():boolean{
	return P2pEngine.shared.isConnected;
}
//立即停止P2P加速并释放资源，一般只需要在退出APP的时候调用即可。SDK采用"懒释放"的策略，只有在重启p2p的时候才释放资源。对于性能较差的设备起播耗时可能比较明显，建议在视频播放之前提前调用 engine.stopP2p() 。
export function stopP2p():void{
	 P2pEngine.shared.stopP2p();
}

//重启P2P加速服务，一般不需要调用。
export function restartP2p():boolean{
	return P2pEngine.shared.restartP2p();
}

export function notifyPlaybackStalled():void{
	P2pEngine.shared.notifyPlaybackStalled();
}

//获取对等连接的id。
export function peerId():string{
	return P2pEngine.shared.peerId;
}


//运行时动态关闭P2P，在播放下一个媒体文件时才生效。
export function disableP2p():void{
	 P2pEngine.shared.disableP2p();
}


//运行时动态开启P2P，在播放下一个媒体文件时才生效。
export function enableP2p():void{
	 P2pEngine.shared.enableP2p();
}

//停止P2P并关闭代理服务器。
export function shutdownP2p():void{
	 P2pEngine.shared.shutdown();
}
//动态设置请求ts和m3u8时的HTTP请求头。
export function setHttpHeadersForHls(headers: Map<string, string>):void{
	 P2pEngine.shared.setHttpHeadersForHls(headers=headers);
}

export function onP2pStats(callback: onStatsCallback):void{
	let monitor = new P2pStatisticsMonitor();
	monitor.onHttpDownloaded = ((value: Int) => {
		callback({
			httpDownloaded: value as number,
		} as StatsObject)
	});
	monitor.onP2pUploaded = ((value: Int) => {
		callback({
			p2pUploaded: value as number,
		} as StatsObject)
	});
	monitor.onP2pDownloaded = ((value: Int, speed: Int) => {
		callback({
			p2pDownloaded: value as number,
			p2pDownloadSpeed: speed as number,
		} as StatsObject)
	});
	monitor.onPeers = ((peers: Array<string>) => {
		callback({
			peers: peers.length,
		} as StatsObject)
	});
	monitor.onServerConnected = ((connected:boolean) => {
		callback({
			serverConnected: connected, 
		} as StatsObject)
	});
	P2pEngine.shared.p2pStatisticsMonitor = monitor
}